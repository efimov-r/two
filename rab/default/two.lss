
two.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00004988  00004a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010a  00800180  00800180  00004b3c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00004b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000320  00000000  00000000  0000528d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a31  00000000  00000000  000055ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005bde  00000000  00000000  00005fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021c1  00000000  00000000  0000bbbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004b04  00000000  00000000  0000dd7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006e0  00000000  00000000  00012884  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b5d  00000000  00000000  00012f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000273e  00000000  00000000  00013ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000008dd  00000000  00000000  000161ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000178  00000000  00000000  00016adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__ctors_end>
       4:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
       8:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
       c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      10:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      14:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      18:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      1c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      20:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      24:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      28:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      2c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_11>
      30:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      34:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_13>
      38:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      3c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      40:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      44:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      48:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      4c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>
      50:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__bad_interrupt>

00000054 <c_21>:
      54:	70 88 88 88 88 88 70 08 18 28 08 08 08 08 70 88     p.....p..(....p.
      64:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
      74:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
      84:	70 f8 08 10 20 20 20 20 70 88 88 70 88 88 70 70     p...    p..p..pp
      94:	88 88 78 08 10 60 08 10 20 20 28 10 28 d0 20 50     ..x..`..  (.(. P
      a4:	90 10 20 c0 30 10 10 10 10 10 38 08 10 10 10 20     .. .0.....8.... 
      b4:	20 20 80 80 88 90 a0 d0 88 00 00 f0 a8 a8 a8 a8       ..............
      c4:	00 00 00 f8 00 00 00 00 00 00 00 00 00 00 00 40     ...............@
      d4:	00 c0 40 40 e0 00 00 c0 a0 a0 a0 a0 20 00 20 20     ..@@........ .  
      e4:	20 20 e0 00 00 60 80 40 20 c0 00 00 a0 a0 60 40       ...`.@ .....`@
      f4:	80 00 00 e0 20 40 80 e0 00 00 e0 80 80 80 e0 00     .... @..........
     104:	00 e0 a0 80 80 80 00 00 a0 a0 40 a0 a0 00 00 e0     ..........@.....
     114:	a0 e0 80 80 00 40 e0 40 40 40 60 00 80 80 c0 a0     .....@.@@@`.....
     124:	a0 a0 00 00 e0 80 c0 80 80 00 00 40 40 e0 a0 a0     ...........@@...
     134:	00 00 c0 80 80 a0 c0 00 00 40 a0 a0 a0 40           .........@...@

00000142 <c_27>:
     142:	78 84 84 84 84 84 84 84 78 04 0c 14 04 04 04 04     x.......x.......
     152:	04 04 78 84 04 08 10 20 40 80 fc 78 84 04 04 38     ..x.... @..x...8
     162:	04 04 84 78 08 18 28 48 88 88 fc 08 08 fc 80 80     ...x..(H........
     172:	80 f8 04 04 84 78 78 84 80 80 f8 84 84 84 78 fc     .....xx.......x.
     182:	04 08 10 20 20 20 20 20 78 84 84 84 78 84 84 84     ...     x...x...
     192:	78 78 84 84 84 7c 08 10 20 40 08 14 14 08 00 00     xx...|.. @......
     1a2:	00 00 00 70 88 80 80 80 80 80 88 70 00 00 00 00     ...p.......p....
     1b2:	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1c2:	00 00 00 00 00 30 30                                .....00

000001c9 <sneg>:
     1c9:	00 00 80 00 90 00 f0 00 f1 00 e7 00 e7 20 cf f0     ............. ..
     1d9:	8f e0 8f c0 9f e0 ff f0 f3 e0                       ..........

000001e3 <kar_TERM>:
     1e3:	00 00 00 00 00 00 00 a0 00 00 02 48 00 00 06 4c     ...........H...L
     1f3:	00 00 01 10 00 00 08 42 00 00 06 ec 00 00 08 42     .......B.......B
     203:	00 00 01 10 07 fc 06 4c 00 40 02 48 07 fc 00 a0     .......L.@.H....
     213:	1c 03 38 00 50 00 a8 00 50 00 48 00 50 00 04 00     ..8.P...P.H.P...
     223:	70 00 04 00 50 00 04 00 50 00 04 00 58 00 04 00     p...P...P...X...
     233:	04 00 48 00 02 00 a8 00 01 ff 18 00 00 00 00 00     ..H.............

00000243 <kar_AKK>:
	...
     24f:	03 c0 03 c0 03 c0 03 c0 3f ff ff fc 3f ff ff fc     ........?...?...
     25f:	30 00 00 0c 30 00 01 8c 30 00 01 8c 37 e0 07 ec     0...0...0...7...
     26f:	37 e0 07 ec 30 00 01 8c 30 00 01 8c 30 00 00 0c     7...0...0...0...
     27f:	30 00 00 0c 30 00 00 0c 30 00 00 0c 30 00 00 0c     0...0...0...0...
     28f:	30 00 00 0c 3f ff ff fc 3f ff ff fc 00 00 00 00     0...?...?.......
     29f:	00 00 00 00                                         ....

000002a3 <kar_BENZ>:
     2a3:	01 ff 80 00 03 ff d8 00 03 00 cc 00 03 00 c7 00     ................
     2b3:	03 00 c3 80 03 00 c1 e0 03 00 c1 e0 03 00 c0 c0     ................
     2c3:	03 00 c0 c0 03 ff f0 c0 03 ff f8 c0 03 81 d8 c0     ................
     2d3:	03 81 d8 c0 03 81 d8 c0 03 81 d8 c0 03 81 d8 c0     ................
     2e3:	03 81 d8 c0 03 81 d8 c0 03 81 d8 c0 03 81 dd c0     ................
     2f3:	03 81 cf 80 03 ff c7 00 07 ff e0 00 07 ff e0 00     ................

00000303 <kar_TEMP>:
     303:	00 01 80 00 00 01 80 00 00 01 ff 80 00 01 ff 80     ................
     313:	00 01 80 00 00 01 80 00 00 01 ff 80 00 01 ff 80     ................
     323:	00 01 80 00 00 01 80 00 00 01 ff 80 00 01 ff 80     ................
     333:	00 01 80 00 00 01 80 00 00 01 80 00 00 03 c0 00     ................
     343:	23 87 e1 c4 3f f7 ef fc 1c 77 ee 38 00 03 c0 00     #...?....w.8....
     353:	00 00 00 00 01 c7 1c 70 0f ff ff f0 0e 38 e3 80     .......p.....8..

00000363 <kar_TORM>:
     363:	00 00 00 00 04 0f f0 20 0e 3f fc 70 1e 78 1e 78     ....... .?.p.x.x
     373:	1c e0 07 38 39 c1 83 9c 3b 81 81 dc 73 01 80 ce     ...89...;...s...
     383:	73 01 80 ce 76 01 80 6e e6 01 80 67 e6 01 80 67     s...v..n...g...g
     393:	e6 01 80 67 e6 01 80 67 76 01 80 6e 73 00 00 ce     ...g...gv..ns...
     3a3:	73 00 00 ce 3b 81 81 dc 39 c1 83 9c 1c e0 07 38     s...;...9......8
     3b3:	1e 78 1e 78 0e 3f fc 70 04 0f f0 20 00 00 00 00     .x.x.?.p... ....
	...

000003c4 <__ctors_end>:
     3c4:	11 24       	eor	r1, r1
     3c6:	1f be       	out	0x3f, r1	; 63
     3c8:	cf e5       	ldi	r28, 0x5F	; 95
     3ca:	d8 e0       	ldi	r29, 0x08	; 8
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	cd bf       	out	0x3d, r28	; 61

000003d0 <__do_copy_data>:
     3d0:	11 e0       	ldi	r17, 0x01	; 1
     3d2:	a0 e6       	ldi	r26, 0x60	; 96
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	e8 e8       	ldi	r30, 0x88	; 136
     3d8:	f9 e4       	ldi	r31, 0x49	; 73
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <__do_copy_data+0x10>
     3dc:	05 90       	lpm	r0, Z+
     3de:	0d 92       	st	X+, r0
     3e0:	a0 38       	cpi	r26, 0x80	; 128
     3e2:	b1 07       	cpc	r27, r17
     3e4:	d9 f7       	brne	.-10     	; 0x3dc <__do_copy_data+0xc>

000003e6 <__do_clear_bss>:
     3e6:	12 e0       	ldi	r17, 0x02	; 2
     3e8:	a0 e8       	ldi	r26, 0x80	; 128
     3ea:	b1 e0       	ldi	r27, 0x01	; 1
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <.do_clear_bss_start>

000003ee <.do_clear_bss_loop>:
     3ee:	1d 92       	st	X+, r1

000003f0 <.do_clear_bss_start>:
     3f0:	aa 38       	cpi	r26, 0x8A	; 138
     3f2:	b1 07       	cpc	r27, r17
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <.do_clear_bss_loop>
     3f6:	0e 94 a6 04 	call	0x94c	; 0x94c <main>
     3fa:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <_exit>

000003fe <__bad_interrupt>:
     3fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000402 <__vector_13>:
unsigned char data3; //для двухбайтовых данных
signed char data4=0;
float dataFloat; //вычисления

ISR (USART_RXC_vect)
{
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
	unsigned char status,data, data2,numByte;
	status=UCSRA;
     424:	8b b1       	in	r24, 0x0b	; 11
	data=UDR;
     426:	3c b1       	in	r19, 0x0c	; 12
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
     428:	8c 71       	andi	r24, 0x1C	; 28
     42a:	09 f0       	breq	.+2      	; 0x42e <__vector_13+0x2c>
     42c:	8b c1       	rjmp	.+790    	; 0x744 <__vector_13+0x342>
	{
		if(mode == connectNew && data == 0xF1) mode = connect1True;
     42e:	80 91 9e 01 	lds	r24, 0x019E
     432:	90 91 9f 01 	lds	r25, 0x019F
     436:	82 30       	cpi	r24, 0x02	; 2
     438:	91 05       	cpc	r25, r1
     43a:	29 f4       	brne	.+10     	; 0x446 <__vector_13+0x44>
     43c:	31 3f       	cpi	r19, 0xF1	; 241
     43e:	b9 f4       	brne	.+46     	; 0x46e <__vector_13+0x6c>
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	07 c0       	rjmp	.+14     	; 0x454 <__vector_13+0x52>
		else if(mode == connect1True && data == 0x10) mode = connect2True;
     446:	83 30       	cpi	r24, 0x03	; 3
     448:	91 05       	cpc	r25, r1
     44a:	49 f4       	brne	.+18     	; 0x45e <__vector_13+0x5c>
     44c:	30 31       	cpi	r19, 0x10	; 16
     44e:	79 f4       	brne	.+30     	; 0x46e <__vector_13+0x6c>
     450:	84 e0       	ldi	r24, 0x04	; 4
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	90 93 9f 01 	sts	0x019F, r25
     458:	80 93 9e 01 	sts	0x019E, r24
     45c:	31 c0       	rjmp	.+98     	; 0x4c0 <__vector_13+0xbe>
		else if(mode == connect2True && data == 0xC1) mode = connectTrue;
     45e:	84 30       	cpi	r24, 0x04	; 4
     460:	91 05       	cpc	r25, r1
     462:	29 f4       	brne	.+10     	; 0x46e <__vector_13+0x6c>
     464:	31 3c       	cpi	r19, 0xC1	; 193
     466:	99 f4       	brne	.+38     	; 0x48e <__vector_13+0x8c>
     468:	85 e0       	ldi	r24, 0x05	; 5
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	f3 cf       	rjmp	.-26     	; 0x454 <__vector_13+0x52>

		else if(mode == connectTrue && data == 0xF1) {mode = input1True;} 
     46e:	85 30       	cpi	r24, 0x05	; 5
     470:	91 05       	cpc	r25, r1
     472:	29 f4       	brne	.+10     	; 0x47e <__vector_13+0x7c>
     474:	31 3f       	cpi	r19, 0xF1	; 241
     476:	99 f4       	brne	.+38     	; 0x49e <__vector_13+0x9c>
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	eb cf       	rjmp	.-42     	; 0x454 <__vector_13+0x52>
		else if(mode == input1True && data == 0x10) {mode = input2True;}
     47e:	86 30       	cpi	r24, 0x06	; 6
     480:	91 05       	cpc	r25, r1
     482:	29 f4       	brne	.+10     	; 0x48e <__vector_13+0x8c>
     484:	30 31       	cpi	r19, 0x10	; 16
     486:	99 f4       	brne	.+38     	; 0x4ae <__vector_13+0xac>
     488:	87 e0       	ldi	r24, 0x07	; 7
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	e3 cf       	rjmp	.-58     	; 0x454 <__vector_13+0x52>
		else if(mode == input2True && data == 0x26) {mode = input3True;}
     48e:	87 30       	cpi	r24, 0x07	; 7
     490:	91 05       	cpc	r25, r1
     492:	29 f4       	brne	.+10     	; 0x49e <__vector_13+0x9c>
     494:	36 32       	cpi	r19, 0x26	; 38
     496:	a1 f4       	brne	.+40     	; 0x4c0 <__vector_13+0xbe>
     498:	88 e0       	ldi	r24, 0x08	; 8
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	db cf       	rjmp	.-74     	; 0x454 <__vector_13+0x52>
		else if(mode == input3True && data == 0x61) {mode = inputBute+1;}
     49e:	88 30       	cpi	r24, 0x08	; 8
     4a0:	91 05       	cpc	r25, r1
     4a2:	29 f4       	brne	.+10     	; 0x4ae <__vector_13+0xac>
     4a4:	31 36       	cpi	r19, 0x61	; 97
     4a6:	61 f4       	brne	.+24     	; 0x4c0 <__vector_13+0xbe>
     4a8:	8b e0       	ldi	r24, 0x0B	; 11
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	d3 cf       	rjmp	.-90     	; 0x454 <__vector_13+0x52>
		else if(mode>inputBute)
     4ae:	8b 30       	cpi	r24, 0x0B	; 11
     4b0:	91 05       	cpc	r25, r1
     4b2:	30 f0       	brcs	.+12     	; 0x4c0 <__vector_13+0xbe>
		{
			data2 = data;
			mode++;
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	90 93 9f 01 	sts	0x019F, r25
     4ba:	80 93 9e 01 	sts	0x019E, r24

ISR (USART_RXC_vect)
{
	unsigned char status,data, data2,numByte;
	status=UCSRA;
	data=UDR;
     4be:	23 2f       	mov	r18, r19
		{
			data2 = data;
			mode++;
		}
		
        if(mode > 10) numByte = mode - 10; else numByte = 0;
     4c0:	80 91 9e 01 	lds	r24, 0x019E
     4c4:	90 91 9f 01 	lds	r25, 0x019F
     4c8:	8b 30       	cpi	r24, 0x0B	; 11
     4ca:	91 05       	cpc	r25, r1
     4cc:	08 f4       	brcc	.+2      	; 0x4d0 <__vector_13+0xce>
     4ce:	3a c1       	rjmp	.+628    	; 0x744 <__vector_13+0x342>
     4d0:	8a 50       	subi	r24, 0x0A	; 10
		if(numByte > 35) {mode = connectTrue; }
     4d2:	84 32       	cpi	r24, 0x24	; 36
     4d4:	38 f0       	brcs	.+14     	; 0x4e4 <__vector_13+0xe2>
     4d6:	85 e0       	ldi	r24, 0x05	; 5
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	90 93 9f 01 	sts	0x019F, r25
     4de:	80 93 9e 01 	sts	0x019E, r24
     4e2:	30 c1       	rjmp	.+608    	; 0x744 <__vector_13+0x342>
		else if(numByte > 10)
     4e4:	8b 30       	cpi	r24, 0x0B	; 11
     4e6:	08 f4       	brcc	.+2      	; 0x4ea <__vector_13+0xe8>
     4e8:	2d c1       	rjmp	.+602    	; 0x744 <__vector_13+0x342>
		{
		

			if(numByte == 11)
     4ea:	8b 30       	cpi	r24, 0x0B	; 11
     4ec:	49 f4       	brne	.+18     	; 0x500 <__vector_13+0xfe>
			{
				coolendTemperature = data2-40;
     4ee:	62 2f       	mov	r22, r18
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	68 52       	subi	r22, 0x28	; 40
     4f4:	70 40       	sbci	r23, 0x00	; 0
     4f6:	70 93 8d 01 	sts	0x018D, r23
     4fa:	60 93 8c 01 	sts	0x018C, r22
     4fe:	22 c1       	rjmp	.+580    	; 0x744 <__vector_13+0x342>
			}
			if(numByte == 12)
     500:	8c 30       	cpi	r24, 0x0C	; 12
     502:	79 f5       	brne	.+94     	; 0x562 <__vector_13+0x160>
			{
				dataFloat = data2 + 128;
     504:	62 2f       	mov	r22, r18
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	60 58       	subi	r22, 0x80	; 128
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	88 27       	eor	r24, r24
     50e:	77 fd       	sbrc	r23, 7
     510:	80 95       	com	r24
     512:	98 2f       	mov	r25, r24
     514:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
				dataFloat *= 14.7;
     518:	23 e3       	ldi	r18, 0x33	; 51
     51a:	33 e3       	ldi	r19, 0x33	; 51
     51c:	4b e6       	ldi	r20, 0x6B	; 107
     51e:	51 e4       	ldi	r21, 0x41	; 65
     520:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
				dataFloat /= 256; //истина 14.7
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e8       	ldi	r20, 0x80	; 128
     52a:	5b e3       	ldi	r21, 0x3B	; 59
     52c:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
     530:	26 2f       	mov	r18, r22
     532:	37 2f       	mov	r19, r23
     534:	48 2f       	mov	r20, r24
     536:	59 2f       	mov	r21, r25
     538:	20 93 ad 01 	sts	0x01AD, r18
     53c:	30 93 ae 01 	sts	0x01AE, r19
     540:	40 93 af 01 	sts	0x01AF, r20
     544:	50 93 b0 01 	sts	0x01B0, r21
				fuelAir = dataFloat*10;
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e2       	ldi	r20, 0x20	; 32
     54e:	51 e4       	ldi	r21, 0x41	; 65
     550:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
     554:	0e 94 82 21 	call	0x4304	; 0x4304 <__fixsfsi>
     558:	70 93 8f 01 	sts	0x018F, r23
     55c:	60 93 8e 01 	sts	0x018E, r22
     560:	f1 c0       	rjmp	.+482    	; 0x744 <__vector_13+0x342>
			}
			if(numByte == 13)
     562:	8d 30       	cpi	r24, 0x0D	; 13
     564:	29 f4       	brne	.+10     	; 0x570 <__vector_13+0x16e>
			{
				throttlePosition = data2;
     566:	20 93 90 01 	sts	0x0190, r18
     56a:	10 92 91 01 	sts	0x0191, r1
     56e:	ea c0       	rjmp	.+468    	; 0x744 <__vector_13+0x342>
			}
			if(numByte == 14)
     570:	8e 30       	cpi	r24, 0x0E	; 14
     572:	49 f4       	brne	.+18     	; 0x586 <__vector_13+0x184>
			{
				rpm = data2*40;
     574:	68 e2       	ldi	r22, 0x28	; 40
     576:	26 9f       	mul	r18, r22
     578:	b0 01       	movw	r22, r0
     57a:	11 24       	eor	r1, r1
     57c:	70 93 93 01 	sts	0x0193, r23
     580:	60 93 92 01 	sts	0x0192, r22
     584:	df c0       	rjmp	.+446    	; 0x744 <__vector_13+0x342>
			}
			if(numByte == 17)
     586:	81 31       	cpi	r24, 0x11	; 17
     588:	29 f4       	brne	.+10     	; 0x594 <__vector_13+0x192>
			{
				positionRhh = data2;
     58a:	20 93 94 01 	sts	0x0194, r18
     58e:	10 92 95 01 	sts	0x0195, r1
     592:	d8 c0       	rjmp	.+432    	; 0x744 <__vector_13+0x342>
			}
			if(numByte == 18)
     594:	82 31       	cpi	r24, 0x12	; 18
     596:	59 f5       	brne	.+86     	; 0x5ee <__vector_13+0x1ec>
			{
				dataFloat = data2;
     598:	62 2f       	mov	r22, r18
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__floatunsisf>
				dataFloat += 128;
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	53 e4       	ldi	r21, 0x43	; 67
     5ac:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__addsf3>
				dataFloat /= 256; //истина 
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	40 e8       	ldi	r20, 0x80	; 128
     5b6:	5b e3       	ldi	r21, 0x3B	; 59
     5b8:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
     5bc:	26 2f       	mov	r18, r22
     5be:	37 2f       	mov	r19, r23
     5c0:	48 2f       	mov	r20, r24
     5c2:	59 2f       	mov	r21, r25
     5c4:	20 93 ad 01 	sts	0x01AD, r18
     5c8:	30 93 ae 01 	sts	0x01AE, r19
     5cc:	40 93 af 01 	sts	0x01AF, r20
     5d0:	50 93 b0 01 	sts	0x01B0, r21
				injectionTimeCorrection = dataFloat*100;
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	48 ec       	ldi	r20, 0xC8	; 200
     5da:	52 e4       	ldi	r21, 0x42	; 66
     5dc:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
     5e0:	0e 94 82 21 	call	0x4304	; 0x4304 <__fixsfsi>
     5e4:	70 93 97 01 	sts	0x0197, r23
     5e8:	60 93 96 01 	sts	0x0196, r22
     5ec:	ab c0       	rjmp	.+342    	; 0x744 <__vector_13+0x342>
			}
			if(numByte == 19)
     5ee:	83 31       	cpi	r24, 0x13	; 19
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <__vector_13+0x1f2>
     5f2:	48 c0       	rjmp	.+144    	; 0x684 <__vector_13+0x282>
			{
				data4 = 0;
     5f4:	10 92 a1 01 	sts	0x01A1, r1
				if(0 != (data2 & 0b10000000)) data4 |= 0b10000000;
     5f8:	27 ff       	sbrs	r18, 7
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <__vector_13+0x200>
     5fc:	80 e8       	ldi	r24, 0x80	; 128
     5fe:	80 93 a1 01 	sts	0x01A1, r24
				if(0 != (data2 & 0b01000000)) data4 |= 0b01000000;
     602:	62 2f       	mov	r22, r18
     604:	26 ff       	sbrs	r18, 6
     606:	05 c0       	rjmp	.+10     	; 0x612 <__vector_13+0x210>
     608:	80 91 a1 01 	lds	r24, 0x01A1
     60c:	80 64       	ori	r24, 0x40	; 64
     60e:	80 93 a1 01 	sts	0x01A1, r24
				if(0 != (data2 & 0b00100000)) data4 |= 0b00100000;
     612:	65 ff       	sbrs	r22, 5
     614:	05 c0       	rjmp	.+10     	; 0x620 <__vector_13+0x21e>
     616:	80 91 a1 01 	lds	r24, 0x01A1
     61a:	80 62       	ori	r24, 0x20	; 32
     61c:	80 93 a1 01 	sts	0x01A1, r24
				if(0 != (data2 & 0b00010000)) data4 |= 0b00010000;
     620:	64 ff       	sbrs	r22, 4
     622:	05 c0       	rjmp	.+10     	; 0x62e <__vector_13+0x22c>
     624:	80 91 a1 01 	lds	r24, 0x01A1
     628:	80 61       	ori	r24, 0x10	; 16
     62a:	80 93 a1 01 	sts	0x01A1, r24
				if(0 != (data2 & 0b00001000)) data4 |= 0b00001000;
     62e:	63 ff       	sbrs	r22, 3
     630:	05 c0       	rjmp	.+10     	; 0x63c <__vector_13+0x23a>
     632:	80 91 a1 01 	lds	r24, 0x01A1
     636:	88 60       	ori	r24, 0x08	; 8
     638:	80 93 a1 01 	sts	0x01A1, r24
				if(0 != (data2 & 0b00000100)) data4 |= 0b00000100;
     63c:	62 ff       	sbrs	r22, 2
     63e:	05 c0       	rjmp	.+10     	; 0x64a <__vector_13+0x248>
     640:	80 91 a1 01 	lds	r24, 0x01A1
     644:	84 60       	ori	r24, 0x04	; 4
     646:	80 93 a1 01 	sts	0x01A1, r24
				if(0 != (data2 & 0b00000010)) data4 |= 0b00000010;
     64a:	61 ff       	sbrs	r22, 1
     64c:	05 c0       	rjmp	.+10     	; 0x658 <__vector_13+0x256>
     64e:	80 91 a1 01 	lds	r24, 0x01A1
     652:	82 60       	ori	r24, 0x02	; 2
     654:	80 93 a1 01 	sts	0x01A1, r24
				if(0 != (data2 & 0b00000001)) data4 |= 0b00000001;
     658:	60 ff       	sbrs	r22, 0
     65a:	05 c0       	rjmp	.+10     	; 0x666 <__vector_13+0x264>
     65c:	80 91 a1 01 	lds	r24, 0x01A1
     660:	81 60       	ori	r24, 0x01	; 1
     662:	80 93 a1 01 	sts	0x01A1, r24

				data4 /=2;  //истина
     666:	80 91 a1 01 	lds	r24, 0x01A1
     66a:	87 fd       	sbrc	r24, 7
     66c:	8f 5f       	subi	r24, 0xFF	; 255
     66e:	85 95       	asr	r24
     670:	80 93 a1 01 	sts	0x01A1, r24

				ignitionTiming = data4;
     674:	99 27       	eor	r25, r25
     676:	87 fd       	sbrc	r24, 7
     678:	90 95       	com	r25
     67a:	90 93 99 01 	sts	0x0199, r25
     67e:	80 93 98 01 	sts	0x0198, r24
     682:	60 c0       	rjmp	.+192    	; 0x744 <__vector_13+0x342>
			}
			if(numByte == 25)
     684:	89 31       	cpi	r24, 0x19	; 25
     686:	79 f1       	breq	.+94     	; 0x6e6 <__vector_13+0x2e4>
			{
				data3 = data2;
			}
			if(numByte == 26)
     688:	8a 31       	cpi	r24, 0x1A	; 26
     68a:	59 f5       	brne	.+86     	; 0x6e2 <__vector_13+0x2e0>
			{
				dataFloat = (data2<<8) + data3;
     68c:	72 2f       	mov	r23, r18
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	80 91 4b 02 	lds	r24, 0x024B
     694:	68 0f       	add	r22, r24
     696:	71 1d       	adc	r23, r1
     698:	88 27       	eor	r24, r24
     69a:	77 fd       	sbrc	r23, 7
     69c:	80 95       	com	r24
     69e:	98 2f       	mov	r25, r24
     6a0:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
				dataFloat /= 125; //истина
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	4a ef       	ldi	r20, 0xFA	; 250
     6aa:	52 e4       	ldi	r21, 0x42	; 66
     6ac:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__divsf3>
     6b0:	26 2f       	mov	r18, r22
     6b2:	37 2f       	mov	r19, r23
     6b4:	48 2f       	mov	r20, r24
     6b6:	59 2f       	mov	r21, r25
     6b8:	20 93 ad 01 	sts	0x01AD, r18
     6bc:	30 93 ae 01 	sts	0x01AE, r19
     6c0:	40 93 af 01 	sts	0x01AF, r20
     6c4:	50 93 b0 01 	sts	0x01B0, r21
				injectionPulseTime = dataFloat * 10;
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e2       	ldi	r20, 0x20	; 32
     6ce:	51 e4       	ldi	r21, 0x41	; 65
     6d0:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
     6d4:	0e 94 82 21 	call	0x4304	; 0x4304 <__fixsfsi>
     6d8:	70 93 9b 01 	sts	0x019B, r23
     6dc:	60 93 9a 01 	sts	0x019A, r22
     6e0:	31 c0       	rjmp	.+98     	; 0x744 <__vector_13+0x342>
			}
			if(numByte == 33)
     6e2:	81 32       	cpi	r24, 0x21	; 33
     6e4:	19 f4       	brne	.+6      	; 0x6ec <__vector_13+0x2ea>
			{
				data3 = data2;
     6e6:	20 93 4b 02 	sts	0x024B, r18
     6ea:	2c c0       	rjmp	.+88     	; 0x744 <__vector_13+0x342>
			}
			if(numByte == 34)
     6ec:	82 32       	cpi	r24, 0x22	; 34
     6ee:	51 f5       	brne	.+84     	; 0x744 <__vector_13+0x342>
			{
				dataFloat = (data2<<8) + data3;
     6f0:	72 2f       	mov	r23, r18
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	80 91 4b 02 	lds	r24, 0x024B
     6f8:	68 0f       	add	r22, r24
     6fa:	71 1d       	adc	r23, r1
     6fc:	88 27       	eor	r24, r24
     6fe:	77 fd       	sbrc	r23, 7
     700:	80 95       	com	r24
     702:	98 2f       	mov	r25, r24
     704:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
				dataFloat /= 128; //истина
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	5c e3       	ldi	r21, 0x3C	; 60
     710:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
     714:	26 2f       	mov	r18, r22
     716:	37 2f       	mov	r19, r23
     718:	48 2f       	mov	r20, r24
     71a:	59 2f       	mov	r21, r25
     71c:	20 93 ad 01 	sts	0x01AD, r18
     720:	30 93 ae 01 	sts	0x01AE, r19
     724:	40 93 af 01 	sts	0x01AF, r20
     728:	50 93 b0 01 	sts	0x01B0, r21
				fuelConsumption = dataFloat * 10;
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e2       	ldi	r20, 0x20	; 32
     732:	51 e4       	ldi	r21, 0x41	; 65
     734:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
     738:	0e 94 82 21 	call	0x4304	; 0x4304 <__fixsfsi>
     73c:	70 93 9d 01 	sts	0x019D, r23
     740:	60 93 9c 01 	sts	0x019C, r22
			}
			
		}
	}
}
     744:	ff 91       	pop	r31
     746:	ef 91       	pop	r30
     748:	bf 91       	pop	r27
     74a:	af 91       	pop	r26
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	7f 91       	pop	r23
     752:	6f 91       	pop	r22
     754:	5f 91       	pop	r21
     756:	4f 91       	pop	r20
     758:	3f 91       	pop	r19
     75a:	2f 91       	pop	r18
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <SendCommand>:



void SendCommand (unsigned char *command, unsigned char length) {
     766:	fc 01       	movw	r30, r24
  while (length--) {
     768:	05 c0       	rjmp	.+10     	; 0x774 <SendCommand+0xe>
    while(!(UCSRA & (1<<UDRE)));  
     76a:	5d 9b       	sbis	0x0b, 5	; 11
     76c:	fe cf       	rjmp	.-4      	; 0x76a <SendCommand+0x4>
    UDR = *command++;
     76e:	81 91       	ld	r24, Z+
     770:	8c b9       	out	0x0c, r24	; 12
     772:	61 50       	subi	r22, 0x01	; 1
}



void SendCommand (unsigned char *command, unsigned char length) {
  while (length--) {
     774:	66 23       	and	r22, r22
     776:	c9 f7       	brne	.-14     	; 0x76a <SendCommand+0x4>
    while(!(UCSRA & (1<<UDRE)));  
    UDR = *command++;
  }
}
     778:	08 95       	ret

0000077a <InitScheduler>:

void InitScheduler (void)
{
   unsigned int i, q;
   
   TCCR0 |= (1<<CS02)|(1<<CS00);
     77a:	83 b7       	in	r24, 0x33	; 51
     77c:	85 60       	ori	r24, 0x05	; 5
     77e:	83 bf       	out	0x33, r24	; 51
   TIFR = 1<<TOV0;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	88 bf       	out	0x38, r24	; 56
   TIMSK |= 1<<TOIE0;
     784:	89 b7       	in	r24, 0x39	; 57
     786:	81 60       	ori	r24, 0x01	; 1
     788:	89 bf       	out	0x39, r24	; 57
   TCNT0 = StartFrom;
     78a:	83 e6       	ldi	r24, 0x63	; 99
     78c:	82 bf       	out	0x32, r24	; 50

   for (i=0; i<MAXnTASKS; i++)
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
   {
      TaskArray[i].pfunc = 0;      
     792:	fc 01       	movw	r30, r24
     794:	ee 0f       	add	r30, r30
     796:	ff 1f       	adc	r31, r31
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	e8 0f       	add	r30, r24
     79e:	f9 1f       	adc	r31, r25
     7a0:	ef 54       	subi	r30, 0x4F	; 79
     7a2:	fe 4f       	sbci	r31, 0xFE	; 254
     7a4:	11 82       	std	Z+1, r1	; 0x01
     7a6:	10 82       	st	Z, r1
   TCCR0 |= (1<<CS02)|(1<<CS00);
   TIFR = 1<<TOV0;
   TIMSK |= 1<<TOIE0;
   TCNT0 = StartFrom;

   for (i=0; i<MAXnTASKS; i++)
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	8e 31       	cpi	r24, 0x1E	; 30
     7ac:	91 05       	cpc	r25, r1
     7ae:	89 f7       	brne	.-30     	; 0x792 <InitScheduler+0x18>
   {
      TaskArray[i].pfunc = 0;      
   }
}
     7b0:	08 95       	ret

000007b2 <AddTask>:


unsigned char AddTask (void (*taskfunc)(void), unsigned int time)
{
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
   unsigned char n=0;

   for (n=0; n<MAXnTASKS; n++)
	   {
	      if(TaskArray[n].pfunc == 0)
     7b6:	f9 01       	movw	r30, r18
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	ee 0f       	add	r30, r30
     7be:	ff 1f       	adc	r31, r31
     7c0:	e2 0f       	add	r30, r18
     7c2:	f3 1f       	adc	r31, r19
     7c4:	ef 54       	subi	r30, 0x4F	; 79
     7c6:	fe 4f       	sbci	r31, 0xFE	; 254
     7c8:	40 81       	ld	r20, Z
     7ca:	51 81       	ldd	r21, Z+1	; 0x01
     7cc:	41 15       	cp	r20, r1
     7ce:	51 05       	cpc	r21, r1
     7d0:	39 f4       	brne	.+14     	; 0x7e0 <AddTask+0x2e>
		  {
			 TaskArray[n].pfunc = taskfunc;
     7d2:	91 83       	std	Z+1, r25	; 0x01
     7d4:	80 83       	st	Z, r24
			 TaskArray[n].fl = 0;
     7d6:	14 82       	std	Z+4, r1	; 0x04
			 TaskArray[n].delay = time;
     7d8:	73 83       	std	Z+3, r23	; 0x03
     7da:	62 83       	std	Z+2, r22	; 0x02
			 return 1;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	08 95       	ret
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255

unsigned char AddTask (void (*taskfunc)(void), unsigned int time)
{
   unsigned char n=0;

   for (n=0; n<MAXnTASKS; n++)
     7e4:	2e 31       	cpi	r18, 0x1E	; 30
     7e6:	31 05       	cpc	r19, r1
     7e8:	31 f7       	brne	.-52     	; 0x7b6 <AddTask+0x4>
			 TaskArray[n].fl = 0;
			 TaskArray[n].delay = time;
			 return 1;
	      }
	   }	   
   return 0;
     7ea:	80 e0       	ldi	r24, 0x00	; 0
}
     7ec:	08 95       	ret

000007ee <__vector_11>:

unsigned int buttonTime=0;

ISR(TIMER0_OVF_vect)
{
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	0f 92       	push	r0
     7f6:	11 24       	eor	r1, r1
     7f8:	2f 93       	push	r18
     7fa:	3f 93       	push	r19
     7fc:	4f 93       	push	r20
     7fe:	5f 93       	push	r21
     800:	6f 93       	push	r22
     802:	7f 93       	push	r23
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	af 93       	push	r26
     80a:	bf 93       	push	r27
     80c:	ef 93       	push	r30
     80e:	ff 93       	push	r31

   unsigned char m, n;

   time++;
     810:	80 91 47 02 	lds	r24, 0x0247
     814:	90 91 48 02 	lds	r25, 0x0248
     818:	a0 91 49 02 	lds	r26, 0x0249
     81c:	b0 91 4a 02 	lds	r27, 0x024A
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	a1 1d       	adc	r26, r1
     824:	b1 1d       	adc	r27, r1
     826:	80 93 47 02 	sts	0x0247, r24
     82a:	90 93 48 02 	sts	0x0248, r25
     82e:	a0 93 49 02 	sts	0x0249, r26
     832:	b0 93 4a 02 	sts	0x024A, r27

   TCNT0 = StartFrom;
     836:	83 e6       	ldi	r24, 0x63	; 99
     838:	82 bf       	out	0x32, r24	; 50
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
	             if(TaskArray[m].delay > 0)
				 {
				     TaskArray[m].delay--;
					 if(TaskArray[m].delay==0)
					 {
                         TaskArray[m].fl=1;
     83e:	41 e0       	ldi	r20, 0x01	; 1

   TCNT0 = StartFrom;
   
   for (m=0; m<MAXnTASKS; m++)
   {
      if (TaskArray[m].pfunc)
     840:	fc 01       	movw	r30, r24
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	ee 0f       	add	r30, r30
     848:	ff 1f       	adc	r31, r31
     84a:	e8 0f       	add	r30, r24
     84c:	f9 1f       	adc	r31, r25
     84e:	ef 54       	subi	r30, 0x4F	; 79
     850:	fe 4f       	sbci	r31, 0xFE	; 254
     852:	20 81       	ld	r18, Z
     854:	31 81       	ldd	r19, Z+1	; 0x01
     856:	21 15       	cp	r18, r1
     858:	31 05       	cpc	r19, r1
     85a:	a1 f0       	breq	.+40     	; 0x884 <__stack+0x25>
	      {   
	         if (TaskArray[m].fl == 0) 
     85c:	24 81       	ldd	r18, Z+4	; 0x04
     85e:	22 23       	and	r18, r18
     860:	89 f4       	brne	.+34     	; 0x884 <__stack+0x25>
	         {
	             if(TaskArray[m].delay > 0)
     862:	22 81       	ldd	r18, Z+2	; 0x02
     864:	33 81       	ldd	r19, Z+3	; 0x03
     866:	21 15       	cp	r18, r1
     868:	31 05       	cpc	r19, r1
     86a:	61 f0       	breq	.+24     	; 0x884 <__stack+0x25>
				 {
				     TaskArray[m].delay--;
     86c:	22 81       	ldd	r18, Z+2	; 0x02
     86e:	33 81       	ldd	r19, Z+3	; 0x03
     870:	21 50       	subi	r18, 0x01	; 1
     872:	30 40       	sbci	r19, 0x00	; 0
     874:	33 83       	std	Z+3, r19	; 0x03
     876:	22 83       	std	Z+2, r18	; 0x02
					 if(TaskArray[m].delay==0)
     878:	22 81       	ldd	r18, Z+2	; 0x02
     87a:	33 81       	ldd	r19, Z+3	; 0x03
     87c:	21 15       	cp	r18, r1
     87e:	31 05       	cpc	r19, r1
     880:	09 f4       	brne	.+2      	; 0x884 <__stack+0x25>
					 {
                         TaskArray[m].fl=1;
     882:	44 83       	std	Z+4, r20	; 0x04
     884:	01 96       	adiw	r24, 0x01	; 1

   time++;

   TCNT0 = StartFrom;
   
   for (m=0; m<MAXnTASKS; m++)
     886:	8e 31       	cpi	r24, 0x1E	; 30
     888:	91 05       	cpc	r25, r1
     88a:	d1 f6       	brne	.-76     	; 0x840 <__vector_11+0x52>
     88c:	80 91 a2 01 	lds	r24, 0x01A2
     890:	90 91 a3 01 	lds	r25, 0x01A3
				 }				 
	         }
	      }      
   }
   
	if(PINA&0b00001000) //ненажата
     894:	cb 9b       	sbis	0x19, 3	; 25
     896:	14 c0       	rjmp	.+40     	; 0x8c0 <__stack+0x61>
	{
		if(buttonTime>10)
     898:	8b 30       	cpi	r24, 0x0B	; 11
     89a:	91 05       	cpc	r25, r1
     89c:	b0 f0       	brcs	.+44     	; 0x8ca <__stack+0x6b>
		{
			if(buttonTime>200)
     89e:	89 3c       	cpi	r24, 0xC9	; 201
     8a0:	91 05       	cpc	r25, r1
     8a2:	18 f0       	brcs	.+6      	; 0x8aa <__stack+0x4b>
			{
				AddTask (TaskLongPress, 1);
     8a4:	86 e8       	ldi	r24, 0x86	; 134
     8a6:	9c e1       	ldi	r25, 0x1C	; 28
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
			}
			else
			{
				AddTask (TestQuickPress, 1);
     8aa:	87 e8       	ldi	r24, 0x87	; 135
     8ac:	9c e1       	ldi	r25, 0x1C	; 28
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
			}
			buttonTime=0;			
     8b6:	10 92 a3 01 	sts	0x01A3, r1
     8ba:	10 92 a2 01 	sts	0x01A2, r1
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <__stack+0x6b>
		}		
	}
	else //нажата
	{
		buttonTime++;		
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 a3 01 	sts	0x01A3, r25
     8c6:	80 93 a2 01 	sts	0x01A2, r24
	}

}
     8ca:	ff 91       	pop	r31
     8cc:	ef 91       	pop	r30
     8ce:	bf 91       	pop	r27
     8d0:	af 91       	pop	r26
     8d2:	9f 91       	pop	r25
     8d4:	8f 91       	pop	r24
     8d6:	7f 91       	pop	r23
     8d8:	6f 91       	pop	r22
     8da:	5f 91       	pop	r21
     8dc:	4f 91       	pop	r20
     8de:	3f 91       	pop	r19
     8e0:	2f 91       	pop	r18
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0
     8e8:	1f 90       	pop	r1
     8ea:	18 95       	reti

000008ec <DispatchTask>:



void DispatchTask (void)
{
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char m, n;	

	for (m=0; m<MAXnTASKS; m++)
	{
  
	      if (TaskArray[m].pfunc)
     8f8:	ec 01       	movw	r28, r24
     8fa:	cc 0f       	add	r28, r28
     8fc:	dd 1f       	adc	r29, r29
     8fe:	cc 0f       	add	r28, r28
     900:	dd 1f       	adc	r29, r29
     902:	c8 0f       	add	r28, r24
     904:	d9 1f       	adc	r29, r25
     906:	cf 54       	subi	r28, 0x4F	; 79
     908:	de 4f       	sbci	r29, 0xFE	; 254
     90a:	28 81       	ld	r18, Y
     90c:	39 81       	ldd	r19, Y+1	; 0x01
     90e:	21 15       	cp	r18, r1
     910:	31 05       	cpc	r19, r1
     912:	99 f0       	breq	.+38     	; 0x93a <DispatchTask+0x4e>
	      {   
	         if (TaskArray[m].fl == 1) 
     914:	8e 01       	movw	r16, r28
     916:	0c 5f       	subi	r16, 0xFC	; 252
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	2c 81       	ldd	r18, Y+4	; 0x04
     91c:	21 30       	cpi	r18, 0x01	; 1
     91e:	69 f4       	brne	.+26     	; 0x93a <DispatchTask+0x4e>
	         {
	            if (TaskArray[m].delay == 0)
     920:	2a 81       	ldd	r18, Y+2	; 0x02
     922:	3b 81       	ldd	r19, Y+3	; 0x03
     924:	21 15       	cp	r18, r1
     926:	31 05       	cpc	r19, r1
     928:	41 f4       	brne	.+16     	; 0x93a <DispatchTask+0x4e>
				{
	                 (*TaskArray[m].pfunc)();
     92a:	e8 81       	ld	r30, Y
     92c:	f9 81       	ldd	r31, Y+1	; 0x01
     92e:	09 95       	icall
					 TaskArray[m].fl=0;
     930:	f8 01       	movw	r30, r16
     932:	10 82       	st	Z, r1
					 TaskArray[m].pfunc=0;
     934:	19 82       	std	Y+1, r1	; 0x01
     936:	18 82       	st	Y, r1
					 return;
     938:	04 c0       	rjmp	.+8      	; 0x942 <DispatchTask+0x56>
     93a:	01 96       	adiw	r24, 0x01	; 1

void DispatchTask (void)
{
	unsigned char m, n;	

	for (m=0; m<MAXnTASKS; m++)
     93c:	8e 31       	cpi	r24, 0x1E	; 30
     93e:	91 05       	cpc	r25, r1
     940:	d9 f6       	brne	.-74     	; 0x8f8 <DispatchTask+0xc>
					 return;
				}							 
	         }
	      }  
	}
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	08 95       	ret

0000094c <main>:
#define inputBute        10 //пошли даные, номер бита + это

/// Main //////////////
int main(void)
{  
	initLCD();
     94c:	0e 94 c6 13 	call	0x278c	; 0x278c <initLCD>
	ADC_Init();
     950:	0e 94 fd 13 	call	0x27fa	; 0x27fa <ADC_Init>
	OWI_Init(OWI_PIN_1);
     954:	82 e0       	ldi	r24, 0x02	; 2
     956:	0e 94 62 14 	call	0x28c4	; 0x28c4 <OWI_Init>
	InitScheduler();
     95a:	0e 94 bd 03 	call	0x77a	; 0x77a <InitScheduler>
    
	AddTask (TaskError, 20);
     95e:	83 ee       	ldi	r24, 0xE3	; 227
     960:	97 e1       	ldi	r25, 0x17	; 23
     962:	64 e1       	ldi	r22, 0x14	; 20
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
	AddTask (Volt, 20);
     96a:	88 ee       	ldi	r24, 0xE8	; 232
     96c:	94 e1       	ldi	r25, 0x14	; 20
     96e:	64 e1       	ldi	r22, 0x14	; 20
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
	AddTask (Temp_out_a, 20);
     976:	8f ee       	ldi	r24, 0xEF	; 239
     978:	95 e1       	ldi	r25, 0x15	; 21
     97a:	64 e1       	ldi	r22, 0x14	; 20
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
	AddTask (Temp_oila, 20);
     982:	8d e2       	ldi	r24, 0x2D	; 45
     984:	97 e1       	ldi	r25, 0x17	; 23
     986:	64 e1       	ldi	r22, 0x14	; 20
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
	AddTask (TaskGazoline, 30);
     98e:	87 ed       	ldi	r24, 0xD7	; 215
     990:	9c e1       	ldi	r25, 0x1C	; 28
     992:	6e e1       	ldi	r22, 0x1E	; 30
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
	AddTask (TaskGazolineWrite, 1000);
     99a:	82 eb       	ldi	r24, 0xB2	; 178
     99c:	9c e1       	ldi	r25, 0x1C	; 28
     99e:	68 ee       	ldi	r22, 0xE8	; 232
     9a0:	73 e0       	ldi	r23, 0x03	; 3
     9a2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
	AddTask (printKartinki, 100);   
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	98 e1       	ldi	r25, 0x18	; 24
     9aa:	64 e6       	ldi	r22, 0x64	; 100
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>

	UBRRH=0x00;
     9b2:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x5F;
     9b4:	8f e5       	ldi	r24, 0x5F	; 95
     9b6:	89 b9       	out	0x09, r24	; 9
	UCSRA=0b00000000;
     9b8:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0b10011000;
     9ba:	88 e9       	ldi	r24, 0x98	; 152
     9bc:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
     9be:	86 e8       	ldi	r24, 0x86	; 134
     9c0:	80 bd       	out	0x20, r24	; 32

	if(PINA&0b00001000) //ненажата
     9c2:	cb 9b       	sbis	0x19, 3	; 25
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <main+0x88>
	{
		mode = onMode;		
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	90 93 9f 01 	sts	0x019F, r25
     9ce:	80 93 9e 01 	sts	0x019E, r24
     9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <main+0x94>
	}
	else
	{
		fuelConsumption = 333;
     9d4:	8d e4       	ldi	r24, 0x4D	; 77
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	90 93 9d 01 	sts	0x019D, r25
     9dc:	80 93 9c 01 	sts	0x019C, r24
	}
	
	AddTask (TaskJanuaryConnect, 100);
     9e0:	8e e3       	ldi	r24, 0x3E	; 62
     9e2:	98 e1       	ldi	r25, 0x18	; 24
     9e4:	64 e6       	ldi	r22, 0x64	; 100
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
	AddTask (TaskJanuaryData, 200);
     9ec:	8c e0       	ldi	r24, 0x0C	; 12
     9ee:	98 e1       	ldi	r25, 0x18	; 24
     9f0:	68 ec       	ldi	r22, 0xC8	; 200
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>

	AddTask (TaskIgnition, 100);
     9f8:	89 e6       	ldi	r24, 0x69	; 105
     9fa:	98 e1       	ldi	r25, 0x18	; 24
     9fc:	64 e6       	ldi	r22, 0x64	; 100
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>

	AddTask (TaskPrintSred, 10);
     a04:	87 eb       	ldi	r24, 0xB7	; 183
     a06:	98 e1       	ldi	r25, 0x18	; 24
     a08:	6a e0       	ldi	r22, 0x0A	; 10
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>

   sei();
     a10:	78 94       	sei

   
        
   while (1) 
   {
      DispatchTask();
     a12:	0e 94 76 04 	call	0x8ec	; 0x8ec <DispatchTask>
     a16:	fd cf       	rjmp	.-6      	; 0xa12 <main+0xc6>

00000a18 <ili9341_hard_init>:
	}
}

void ili9341_hard_init(void)//init hardware
{
rstddr|=(1<<rst);//output for reset
     a18:	b9 9a       	sbi	0x17, 1	; 23
rstport |=(1<<rst);//pull high for normal operation
     a1a:	c1 9a       	sbi	0x18, 1	; 24
dcddr|=(1<<dc);//D/C as output
     a1c:	b8 9a       	sbi	0x17, 0	; 23
}
     a1e:	08 95       	ret

00000a20 <ili9341_spi_init>:


void ili9341_spi_init(void)//set spi speed and settings 
{
DDRB |=(1<<4)|(1<<5)|(1<<7);//CS,SS,MOSI,SCK as output(although SS will be unused throughout the program)
     a20:	87 b3       	in	r24, 0x17	; 23
     a22:	80 6b       	ori	r24, 0xB0	; 176
     a24:	87 bb       	out	0x17, r24	; 23
SPCR=(1<<SPE)|(1<<MSTR);//mode 0,fosc/4
     a26:	80 e5       	ldi	r24, 0x50	; 80
     a28:	8d b9       	out	0x0d, r24	; 13
SPCR&=~((1<<SPR1)|(1<<SPR0));//mode 0,fosc/4
     a2a:	8d b1       	in	r24, 0x0d	; 13
     a2c:	8c 7f       	andi	r24, 0xFC	; 252
     a2e:	8d b9       	out	0x0d, r24	; 13
SPSR |=(1<<SPI2X);//doubling spi speed.i.e final spi speed-fosc/2
     a30:	70 9a       	sbi	0x0e, 0	; 14
csport |=(1<<cs);//cs off during startup
     a32:	c2 9a       	sbi	0x18, 2	; 24
}
     a34:	08 95       	ret

00000a36 <ili9341_spi_send>:


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
SPDR=spi_data;//move data into spdr
     a36:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     a38:	77 9b       	sbis	0x0e, 7	; 14
     a3a:	fe cf       	rjmp	.-4      	; 0xa38 <ili9341_spi_send+0x2>
}
     a3c:	08 95       	ret

00000a3e <ili9341_writecommand8>:


void ili9341_writecommand8(uint8_t com)//command write
{
csport &=~(1<<cs);//dc and cs both low to send command
     a3e:	c2 98       	cbi	0x18, 2	; 24
dcport &=~(1<<dc);//dc and cs both low to send command
     a40:	c0 98       	cbi	0x18, 0	; 24
//_delay_us(5);//little delay
SPDR=com;//move data into spdr
     a42:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     a44:	77 9b       	sbis	0x0e, 7	; 14
     a46:	fe cf       	rjmp	.-4      	; 0xa44 <ili9341_writecommand8+0x6>
csport |=(1<<cs);//pull high cs
     a48:	c2 9a       	sbi	0x18, 2	; 24
}
     a4a:	08 95       	ret

00000a4c <ili9341_writedata8>:


void ili9341_writedata8(uint8_t data)//data write
{
dcport |=(1<<dc);//st dc high for data
     a4c:	c0 9a       	sbi	0x18, 0	; 24
//_delay_us(1);//delay
csport &=~(1<<cs);//set cs low for operation
     a4e:	c2 98       	cbi	0x18, 2	; 24
SPDR=data;//move data into spdr
     a50:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     a52:	77 9b       	sbis	0x0e, 7	; 14
     a54:	fe cf       	rjmp	.-4      	; 0xa52 <ili9341_writedata8+0x6>
csport |=(1<<cs);
     a56:	c2 9a       	sbi	0x18, 2	; 24
}
     a58:	08 95       	ret

00000a5a <ili9341_setaddress>:




void ili9341_setaddress(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)//set coordinate for print or other function
{
     a5a:	1f 93       	push	r17
     a5c:	df 93       	push	r29
     a5e:	cf 93       	push	r28
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	27 97       	sbiw	r28, 0x07	; 7
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	18 2f       	mov	r17, r24
ili9341_writecommand8(0x2A);
     a72:	8a e2       	ldi	r24, 0x2A	; 42
     a74:	2f 83       	std	Y+7, r18	; 0x07
     a76:	3e 83       	std	Y+6, r19	; 0x06
     a78:	4b 83       	std	Y+3, r20	; 0x03
     a7a:	5a 83       	std	Y+2, r21	; 0x02
     a7c:	6d 83       	std	Y+5, r22	; 0x05
     a7e:	7c 83       	std	Y+4, r23	; 0x04
     a80:	99 83       	std	Y+1, r25	; 0x01
     a82:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(x1>>8);
     a86:	99 81       	ldd	r25, Y+1	; 0x01
     a88:	89 2f       	mov	r24, r25
     a8a:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(x1);
     a8e:	81 2f       	mov	r24, r17
     a90:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(x2>>8);
     a94:	5a 81       	ldd	r21, Y+2	; 0x02
     a96:	85 2f       	mov	r24, r21
     a98:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(x2);
     a9c:	4b 81       	ldd	r20, Y+3	; 0x03
     a9e:	84 2f       	mov	r24, r20
     aa0:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

ili9341_writecommand8(0x2B);
     aa4:	8b e2       	ldi	r24, 0x2B	; 43
     aa6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(y1>>8);
     aaa:	7c 81       	ldd	r23, Y+4	; 0x04
     aac:	87 2f       	mov	r24, r23
     aae:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(y1);
     ab2:	6d 81       	ldd	r22, Y+5	; 0x05
     ab4:	86 2f       	mov	r24, r22
     ab6:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(y2>>8);
     aba:	3e 81       	ldd	r19, Y+6	; 0x06
     abc:	83 2f       	mov	r24, r19
     abe:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(y2);
     ac2:	2f 81       	ldd	r18, Y+7	; 0x07
     ac4:	82 2f       	mov	r24, r18
     ac6:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

ili9341_writecommand8(0x2C);//meory write
     aca:	8c e2       	ldi	r24, 0x2C	; 44
     acc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
}
     ad0:	27 96       	adiw	r28, 0x07	; 7
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	cf 91       	pop	r28
     ade:	df 91       	pop	r29
     ae0:	1f 91       	pop	r17
     ae2:	08 95       	ret

00000ae4 <ili9341_hard_reset>:

void ili9341_hard_reset(void)//hard reset display
{
rstport |=(1<<rst);//pull high if low previously
     ae4:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	91 ee       	ldi	r25, 0xE1	; 225
     aea:	a4 e0       	ldi	r26, 0x04	; 4
     aec:	81 50       	subi	r24, 0x01	; 1
     aee:	90 40       	sbci	r25, 0x00	; 0
     af0:	a0 40       	sbci	r26, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <ili9341_hard_reset+0x8>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <ili9341_hard_reset+0x12>
     af6:	00 00       	nop
_delay_ms(200);
rstport &=~(1<<rst);//low for reset
     af8:	c1 98       	cbi	0x18, 1	; 24
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	91 ee       	ldi	r25, 0xE1	; 225
     afe:	a4 e0       	ldi	r26, 0x04	; 4
     b00:	81 50       	subi	r24, 0x01	; 1
     b02:	90 40       	sbci	r25, 0x00	; 0
     b04:	a0 40       	sbci	r26, 0x00	; 0
     b06:	e1 f7       	brne	.-8      	; 0xb00 <ili9341_hard_reset+0x1c>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <ili9341_hard_reset+0x26>
     b0a:	00 00       	nop
_delay_ms(200);
rstport |=(1<<rst);//again pull high for normal operation
     b0c:	c1 9a       	sbi	0x18, 1	; 24
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	91 ee       	ldi	r25, 0xE1	; 225
     b12:	a4 e0       	ldi	r26, 0x04	; 4
     b14:	81 50       	subi	r24, 0x01	; 1
     b16:	90 40       	sbci	r25, 0x00	; 0
     b18:	a0 40       	sbci	r26, 0x00	; 0
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <ili9341_hard_reset+0x30>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <ili9341_hard_reset+0x3a>
     b1e:	00 00       	nop
_delay_ms(200);
}
     b20:	08 95       	ret

00000b22 <ili9341_init>:


void ili9341_init(void)//set up display using predefined command sequence
{
ili9341_hard_init();
     b22:	0e 94 0c 05 	call	0xa18	; 0xa18 <ili9341_hard_init>
ili9341_spi_init();
     b26:	0e 94 10 05 	call	0xa20	; 0xa20 <ili9341_spi_init>
ili9341_hard_reset();
     b2a:	0e 94 72 05 	call	0xae4	; 0xae4 <ili9341_hard_reset>
ili9341_writecommand8(0x01);//soft reset
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	99 e6       	ldi	r25, 0x69	; 105
     b38:	a8 e1       	ldi	r26, 0x18	; 24
     b3a:	81 50       	subi	r24, 0x01	; 1
     b3c:	90 40       	sbci	r25, 0x00	; 0
     b3e:	a0 40       	sbci	r26, 0x00	; 0
     b40:	e1 f7       	brne	.-8      	; 0xb3a <ili9341_init+0x18>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <ili9341_init+0x22>
     b44:	00 00       	nop
_delay_ms(1000);
//power control A
ili9341_writecommand8(0xCB);
     b46:	8b ec       	ldi	r24, 0xCB	; 203
     b48:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x39);
     b4c:	89 e3       	ldi	r24, 0x39	; 57
     b4e:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x2C);
     b52:	8c e2       	ldi	r24, 0x2C	; 44
     b54:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x00);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x34);
     b5e:	84 e3       	ldi	r24, 0x34	; 52
     b60:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x02);
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//power control B
ili9341_writecommand8(0xCF);
     b6a:	8f ec       	ldi	r24, 0xCF	; 207
     b6c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x00);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0xC1);
     b76:	81 ec       	ldi	r24, 0xC1	; 193
     b78:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x30);
     b7c:	80 e3       	ldi	r24, 0x30	; 48
     b7e:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//driver timing control A
ili9341_writecommand8(0xE8);
     b82:	88 ee       	ldi	r24, 0xE8	; 232
     b84:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x85);
     b88:	85 e8       	ldi	r24, 0x85	; 133
     b8a:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x00);
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x78);
     b94:	88 e7       	ldi	r24, 0x78	; 120
     b96:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//driver timing control B
ili9341_writecommand8(0xEA);
     b9a:	8a ee       	ldi	r24, 0xEA	; 234
     b9c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x00);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x00);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//power on sequence control
ili9341_writecommand8(0xED);
     bac:	8d ee       	ldi	r24, 0xED	; 237
     bae:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x64);
     bb2:	84 e6       	ldi	r24, 0x64	; 100
     bb4:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x03);
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x12);
     bbe:	82 e1       	ldi	r24, 0x12	; 18
     bc0:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x81);
     bc4:	81 e8       	ldi	r24, 0x81	; 129
     bc6:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//pump ratio control
ili9341_writecommand8(0xF7);
     bca:	87 ef       	ldi	r24, 0xF7	; 247
     bcc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x20);
     bd0:	80 e2       	ldi	r24, 0x20	; 32
     bd2:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//power control,VRH[5:0]
ili9341_writecommand8(0xC0);
     bd6:	80 ec       	ldi	r24, 0xC0	; 192
     bd8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x23);
     bdc:	83 e2       	ldi	r24, 0x23	; 35
     bde:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//Power control,SAP[2:0];BT[3:0]
ili9341_writecommand8(0xC1);
     be2:	81 ec       	ldi	r24, 0xC1	; 193
     be4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x10);
     be8:	80 e1       	ldi	r24, 0x10	; 16
     bea:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//vcm control
ili9341_writecommand8(0xC5);
     bee:	85 ec       	ldi	r24, 0xC5	; 197
     bf0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x3E);
     bf4:	8e e3       	ldi	r24, 0x3E	; 62
     bf6:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x28);
     bfa:	88 e2       	ldi	r24, 0x28	; 40
     bfc:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//vcm control 2
ili9341_writecommand8(0xC7);
     c00:	87 ec       	ldi	r24, 0xC7	; 199
     c02:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x86);
     c06:	86 e8       	ldi	r24, 0x86	; 134
     c08:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//memory access control
ili9341_writecommand8(0x36);
     c0c:	86 e3       	ldi	r24, 0x36	; 54
     c0e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x48);
     c12:	88 e4       	ldi	r24, 0x48	; 72
     c14:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//pixel format
ili9341_writecommand8(0x3A);
     c18:	8a e3       	ldi	r24, 0x3A	; 58
     c1a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x55);
     c1e:	85 e5       	ldi	r24, 0x55	; 85
     c20:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//frameration control,normal mode full colours
ili9341_writecommand8(0xB1);
     c24:	81 eb       	ldi	r24, 0xB1	; 177
     c26:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x00);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x18);
     c30:	88 e1       	ldi	r24, 0x18	; 24
     c32:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//display function control
ili9341_writecommand8(0xB6);
     c36:	86 eb       	ldi	r24, 0xB6	; 182
     c38:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x08);
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x82);
     c42:	82 e8       	ldi	r24, 0x82	; 130
     c44:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x27);
     c48:	87 e2       	ldi	r24, 0x27	; 39
     c4a:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//3gamma function disable
ili9341_writecommand8(0xF2);
     c4e:	82 ef       	ldi	r24, 0xF2	; 242
     c50:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x00);
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//gamma curve selected
ili9341_writecommand8(0x26);
     c5a:	86 e2       	ldi	r24, 0x26	; 38
     c5c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x01);
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//set positive gamma correction
ili9341_writecommand8(0xE0);
     c66:	80 ee       	ldi	r24, 0xE0	; 224
     c68:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x0F);
     c6c:	8f e0       	ldi	r24, 0x0F	; 15
     c6e:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x31);
     c72:	81 e3       	ldi	r24, 0x31	; 49
     c74:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x2B);
     c78:	8b e2       	ldi	r24, 0x2B	; 43
     c7a:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x0C);
     c7e:	8c e0       	ldi	r24, 0x0C	; 12
     c80:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x0E);
     c84:	8e e0       	ldi	r24, 0x0E	; 14
     c86:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x08);
     c8a:	88 e0       	ldi	r24, 0x08	; 8
     c8c:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x4E);
     c90:	8e e4       	ldi	r24, 0x4E	; 78
     c92:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0xF1);
     c96:	81 ef       	ldi	r24, 0xF1	; 241
     c98:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x37);
     c9c:	87 e3       	ldi	r24, 0x37	; 55
     c9e:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x07);
     ca2:	87 e0       	ldi	r24, 0x07	; 7
     ca4:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x10);
     ca8:	80 e1       	ldi	r24, 0x10	; 16
     caa:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x03);
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x0E);
     cb4:	8e e0       	ldi	r24, 0x0E	; 14
     cb6:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x09);
     cba:	89 e0       	ldi	r24, 0x09	; 9
     cbc:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x00);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//set negative gamma correction
ili9341_writecommand8(0xE1);
     cc6:	81 ee       	ldi	r24, 0xE1	; 225
     cc8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
ili9341_writedata8(0x00);
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x0E);
     cd2:	8e e0       	ldi	r24, 0x0E	; 14
     cd4:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x14);
     cd8:	84 e1       	ldi	r24, 0x14	; 20
     cda:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x03);
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x11);
     ce4:	81 e1       	ldi	r24, 0x11	; 17
     ce6:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x07);
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x31);
     cf0:	81 e3       	ldi	r24, 0x31	; 49
     cf2:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0xC1);
     cf6:	81 ec       	ldi	r24, 0xC1	; 193
     cf8:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x48);
     cfc:	88 e4       	ldi	r24, 0x48	; 72
     cfe:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x08);
     d02:	88 e0       	ldi	r24, 0x08	; 8
     d04:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x0F);
     d08:	8f e0       	ldi	r24, 0x0F	; 15
     d0a:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x0C);
     d0e:	8c e0       	ldi	r24, 0x0C	; 12
     d10:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x31);
     d14:	81 e3       	ldi	r24, 0x31	; 49
     d16:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x36);
     d1a:	86 e3       	ldi	r24, 0x36	; 54
     d1c:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>
ili9341_writedata8(0x0F);
     d20:	8f e0       	ldi	r24, 0x0F	; 15
     d22:	0e 94 26 05 	call	0xa4c	; 0xa4c <ili9341_writedata8>

//exit sleep
ili9341_writecommand8(0x11);
     d26:	81 e1       	ldi	r24, 0x11	; 17
     d28:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	9d ee       	ldi	r25, 0xED	; 237
     d30:	a2 e0       	ldi	r26, 0x02	; 2
     d32:	81 50       	subi	r24, 0x01	; 1
     d34:	90 40       	sbci	r25, 0x00	; 0
     d36:	a0 40       	sbci	r26, 0x00	; 0
     d38:	e1 f7       	brne	.-8      	; 0xd32 <ili9341_init+0x210>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <ili9341_init+0x21a>
     d3c:	00 00       	nop
_delay_ms(120);
//display on
ili9341_writecommand8(0x29);
     d3e:	89 e2       	ldi	r24, 0x29	; 41
     d40:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ili9341_writecommand8>

}
     d44:	08 95       	ret

00000d46 <ili9341_pushcolour>:

//set colour for drawing
void ili9341_pushcolour(uint16_t colour)
{
dcport |=(1<<dc);//st dc high for data
     d46:	c0 9a       	sbi	0x18, 0	; 24
//_delay_us(1);//delay
csport &=~(1<<cs);//set cs low for operation
     d48:	c2 98       	cbi	0x18, 2	; 24
SPDR=colour>>8;//move data into spdr
     d4a:	9f b9       	out	0x0f, r25	; 15
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     d4c:	77 9b       	sbis	0x0e, 7	; 14
     d4e:	fe cf       	rjmp	.-4      	; 0xd4c <ili9341_pushcolour+0x6>
csport |=(1<<cs);
     d50:	c2 9a       	sbi	0x18, 2	; 24

dcport |=(1<<dc);//st dc high for data
     d52:	c0 9a       	sbi	0x18, 0	; 24
//_delay_us(1);//delay
csport &=~(1<<cs);//set cs low for operation
     d54:	c2 98       	cbi	0x18, 2	; 24
SPDR=colour;//move data into spdr
     d56:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     d58:	77 9b       	sbis	0x0e, 7	; 14
     d5a:	fe cf       	rjmp	.-4      	; 0xd58 <ili9341_pushcolour+0x12>
csport |=(1<<cs);
     d5c:	c2 9a       	sbi	0x18, 2	; 24
}
     d5e:	08 95       	ret

00000d60 <ili9341_fillrect_3>:
		ili9341_pushcolour(colour);		
	}
}

void ili9341_fillrect_3(unsigned int x,unsigned int y,unsigned int w,unsigned int h,uint16_t colour)
{
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	ea 01       	movw	r28, r20
     d6e:	79 01       	movw	r14, r18
	ili9341_setaddress(x, y, x+(w*3)-1, y+(h*3)-1);	
     d70:	ac 01       	movw	r20, r24
     d72:	41 50       	subi	r20, 0x01	; 1
     d74:	50 40       	sbci	r21, 0x00	; 0
     d76:	9e 01       	movw	r18, r28
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	2c 0f       	add	r18, r28
     d7e:	3d 1f       	adc	r19, r29
     d80:	42 0f       	add	r20, r18
     d82:	53 1f       	adc	r21, r19
     d84:	9b 01       	movw	r18, r22
     d86:	21 50       	subi	r18, 0x01	; 1
     d88:	30 40       	sbci	r19, 0x00	; 0
     d8a:	f7 01       	movw	r30, r14
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	ee 0d       	add	r30, r14
     d92:	ff 1d       	adc	r31, r15
     d94:	2e 0f       	add	r18, r30
     d96:	3f 1f       	adc	r19, r31
     d98:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>

	for(y=w*h*9; y>0; y--) 
     d9c:	ce 01       	movw	r24, r28
     d9e:	23 e0       	ldi	r18, 0x03	; 3
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	2a 95       	dec	r18
     da6:	e1 f7       	brne	.-8      	; 0xda0 <ili9341_fillrect_3+0x40>
     da8:	8c 0f       	add	r24, r28
     daa:	9d 1f       	adc	r25, r29
     dac:	8e 9d       	mul	r24, r14
     dae:	e0 01       	movw	r28, r0
     db0:	8f 9d       	mul	r24, r15
     db2:	d0 0d       	add	r29, r0
     db4:	9e 9d       	mul	r25, r14
     db6:	d0 0d       	add	r29, r0
     db8:	11 24       	eor	r1, r1
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <ili9341_fillrect_3+0x64>
	{
		ili9341_pushcolour(colour);		
     dbc:	c8 01       	movw	r24, r16
     dbe:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>

void ili9341_fillrect_3(unsigned int x,unsigned int y,unsigned int w,unsigned int h,uint16_t colour)
{
	ili9341_setaddress(x, y, x+(w*3)-1, y+(h*3)-1);	

	for(y=w*h*9; y>0; y--) 
     dc2:	21 97       	sbiw	r28, 0x01	; 1
     dc4:	20 97       	sbiw	r28, 0x00	; 0
     dc6:	d1 f7       	brne	.-12     	; 0xdbc <ili9341_fillrect_3+0x5c>
	{
		ili9341_pushcolour(colour);		
	}
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	08 95       	ret

00000dd6 <ili9341_fillrect>:
ili9341_pushcolour(colour1);
}

//draw colour filled rectangle
void ili9341_fillrect(unsigned int x,unsigned int y,unsigned int w,unsigned int h,uint16_t colour)
{
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	7a 01       	movw	r14, r20
     de8:	e9 01       	movw	r28, r18
     dea:	68 01       	movw	r12, r16
	ili9341_setaddress(x, y, x+w-1, y+h-1);	
     dec:	ac 01       	movw	r20, r24
     dee:	41 50       	subi	r20, 0x01	; 1
     df0:	50 40       	sbci	r21, 0x00	; 0
     df2:	4e 0d       	add	r20, r14
     df4:	5f 1d       	adc	r21, r15
     df6:	9b 01       	movw	r18, r22
     df8:	21 50       	subi	r18, 0x01	; 1
     dfa:	30 40       	sbci	r19, 0x00	; 0
     dfc:	2c 0f       	add	r18, r28
     dfe:	3d 1f       	adc	r19, r29
     e00:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>

	for(y=w*h; y>0; y--) 
     e04:	ce 9d       	mul	r28, r14
     e06:	80 01       	movw	r16, r0
     e08:	cf 9d       	mul	r28, r15
     e0a:	10 0d       	add	r17, r0
     e0c:	de 9d       	mul	r29, r14
     e0e:	10 0d       	add	r17, r0
     e10:	11 24       	eor	r1, r1
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <ili9341_fillrect+0x48>
	{
		ili9341_pushcolour(colour);		
     e14:	c6 01       	movw	r24, r12
     e16:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
//draw colour filled rectangle
void ili9341_fillrect(unsigned int x,unsigned int y,unsigned int w,unsigned int h,uint16_t colour)
{
	ili9341_setaddress(x, y, x+w-1, y+h-1);	

	for(y=w*h; y>0; y--) 
     e1a:	01 50       	subi	r16, 0x01	; 1
     e1c:	10 40       	sbci	r17, 0x00	; 0
     e1e:	01 15       	cp	r16, r1
     e20:	11 05       	cpc	r17, r1
     e22:	c1 f7       	brne	.-16     	; 0xe14 <ili9341_fillrect+0x3e>
	{
		ili9341_pushcolour(colour);		
	}
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	df 90       	pop	r13
     e32:	cf 90       	pop	r12
     e34:	08 95       	ret

00000e36 <ili9341_drawpixel_3>:

ili9341_pushcolour(colour1);
}

void ili9341_drawpixel_3(uint16_t x3,uint16_t y3,uint16_t colour1) //pixels will always be counted from right side.x is representing LCD width which will always be less tha 240.Y is representing LCD height which will always be less than 320
{
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	ea 01       	movw	r28, r20

ili9341_setaddress(x3,y3,x3+2,y3+2);
     e3c:	ac 01       	movw	r20, r24
     e3e:	4e 5f       	subi	r20, 0xFE	; 254
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	9b 01       	movw	r18, r22
     e44:	2e 5f       	subi	r18, 0xFE	; 254
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>

ili9341_pushcolour(colour1);
     e4c:	ce 01       	movw	r24, r28
     e4e:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
ili9341_pushcolour(colour1);
     e52:	ce 01       	movw	r24, r28
     e54:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
ili9341_pushcolour(colour1);
     e58:	ce 01       	movw	r24, r28
     e5a:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
ili9341_pushcolour(colour1);
     e5e:	ce 01       	movw	r24, r28
     e60:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
ili9341_pushcolour(colour1);
     e64:	ce 01       	movw	r24, r28
     e66:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
ili9341_pushcolour(colour1);
     e6a:	ce 01       	movw	r24, r28
     e6c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
ili9341_pushcolour(colour1);
     e70:	ce 01       	movw	r24, r28
     e72:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
ili9341_pushcolour(colour1);
     e76:	ce 01       	movw	r24, r28
     e78:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
ili9341_pushcolour(colour1);
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
}
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <ili9341_drawpixel>:
#include "lcd_low.h"


//draw pixel
void ili9341_drawpixel(uint16_t x3,uint16_t y3,uint16_t colour1) //pixels will always be counted from right side.x is representing LCD width which will always be less tha 240.Y is representing LCD height which will always be less than 320
{
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ea 01       	movw	r28, r20

ili9341_setaddress(x3,y3,x3+1,y3+1);
     e8e:	ac 01       	movw	r20, r24
     e90:	4f 5f       	subi	r20, 0xFF	; 255
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	9b 01       	movw	r18, r22
     e96:	2f 5f       	subi	r18, 0xFF	; 255
     e98:	3f 4f       	sbci	r19, 0xFF	; 255
     e9a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>

ili9341_pushcolour(colour1);
     e9e:	ce 01       	movw	r24, r28
     ea0:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <ili9341_pink_double_line>:
csport |=(1<<cs);
}


void ili9341_pink_double_line(void)
{
     eaa:	80 ec       	ldi	r24, 0xC0	; 192
     eac:	93 e0       	ldi	r25, 0x03	; 3
for(j=0;j<960;j++)
	{
		dcport |=(1<<dc);//st dc high for data
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
		SPDR=PINK>>8;//move data into spdr
     eae:	28 eb       	ldi	r18, 0xB8	; 184
void ili9341_pink_double_line(void)
{
uint16_t j;
for(j=0;j<960;j++)
	{
		dcport |=(1<<dc);//st dc high for data
     eb0:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     eb2:	c2 98       	cbi	0x18, 2	; 24
		SPDR=PINK>>8;//move data into spdr
     eb4:	2f b9       	out	0x0f, r18	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     eb6:	77 9b       	sbis	0x0e, 7	; 14
     eb8:	fe cf       	rjmp	.-4      	; 0xeb6 <ili9341_pink_double_line+0xc>
		csport |=(1<<cs);
     eba:	c2 9a       	sbi	0x18, 2	; 24

		dcport |=(1<<dc);//st dc high for data
     ebc:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     ebe:	c2 98       	cbi	0x18, 2	; 24
		SPDR=PINK;//move data into spdr
     ec0:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     ec2:	77 9b       	sbis	0x0e, 7	; 14
     ec4:	fe cf       	rjmp	.-4      	; 0xec2 <ili9341_pink_double_line+0x18>
		csport |=(1<<cs);
     ec6:	c2 9a       	sbi	0x18, 2	; 24
     ec8:	01 97       	sbiw	r24, 0x01	; 1


void ili9341_pink_double_line(void)
{
uint16_t j;
for(j=0;j<960;j++)
     eca:	91 f7       	brne	.-28     	; 0xeb0 <ili9341_pink_double_line+0x6>
		csport &=~(1<<cs);//set cs low for operation
		SPDR=PINK;//move data into spdr
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
		csport |=(1<<cs);
	}
}
     ecc:	08 95       	ret

00000ece <ili9341_clear>:


//clear lcd and fill with colour
void ili9341_clear(uint16_t colour)
{
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	18 2f       	mov	r17, r24
     ed4:	09 2f       	mov	r16, r25
	uint16_t i,j;
	unsigned int c;
	ili9341_setaddress(0,0,239,319);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	4f ee       	ldi	r20, 0xEF	; 239
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	2f e3       	ldi	r18, 0x3F	; 63
     ee4:	31 e0       	ldi	r19, 0x01	; 1
     ee6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
	for(i=0;i<c;i++)
	{
		dcport |=(1<<dc);//st dc high for data
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
		SPDR=colour>>8;//move data into spdr
     eea:	80 ee       	ldi	r24, 0xE0	; 224
     eec:	9b e5       	ldi	r25, 0x5B	; 91

	
	c = (line_a-2)*240;
	for(i=0;i<c;i++)
	{
		dcport |=(1<<dc);//st dc high for data
     eee:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     ef0:	c2 98       	cbi	0x18, 2	; 24
		SPDR=colour>>8;//move data into spdr
     ef2:	0f b9       	out	0x0f, r16	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     ef4:	77 9b       	sbis	0x0e, 7	; 14
     ef6:	fe cf       	rjmp	.-4      	; 0xef4 <ili9341_clear+0x26>
		csport |=(1<<cs);
     ef8:	c2 9a       	sbi	0x18, 2	; 24

		dcport |=(1<<dc);//st dc high for data
     efa:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     efc:	c2 98       	cbi	0x18, 2	; 24
		SPDR=colour;//move data into spdr
     efe:	1f b9       	out	0x0f, r17	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     f00:	77 9b       	sbis	0x0e, 7	; 14
     f02:	fe cf       	rjmp	.-4      	; 0xf00 <ili9341_clear+0x32>
		csport |=(1<<cs);		
     f04:	c2 9a       	sbi	0x18, 2	; 24
     f06:	01 97       	sbiw	r24, 0x01	; 1
	unsigned int c;
	ili9341_setaddress(0,0,239,319);

	
	c = (line_a-2)*240;
	for(i=0;i<c;i++)
     f08:	91 f7       	brne	.-28     	; 0xeee <ili9341_clear+0x20>
		SPDR=colour;//move data into spdr
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
		csport |=(1<<cs);		
	}

	ili9341_pink_double_line();
     f0a:	0e 94 55 07 	call	0xeaa	; 0xeaa <ili9341_pink_double_line>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	9a e5       	ldi	r25, 0x5A	; 90

	c=((line_b-2)-(line_a+2))*240;

	for(i=0;i<c;i++)
	{
		dcport |=(1<<dc);//st dc high for data
     f12:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     f14:	c2 98       	cbi	0x18, 2	; 24
		SPDR=colour>>8;//move data into spdr
     f16:	0f b9       	out	0x0f, r16	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     f18:	77 9b       	sbis	0x0e, 7	; 14
     f1a:	fe cf       	rjmp	.-4      	; 0xf18 <ili9341_clear+0x4a>
		csport |=(1<<cs);
     f1c:	c2 9a       	sbi	0x18, 2	; 24

		dcport |=(1<<dc);//st dc high for data
     f1e:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     f20:	c2 98       	cbi	0x18, 2	; 24
		SPDR=colour;//move data into spdr
     f22:	1f b9       	out	0x0f, r17	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     f24:	77 9b       	sbis	0x0e, 7	; 14
     f26:	fe cf       	rjmp	.-4      	; 0xf24 <ili9341_clear+0x56>
		csport |=(1<<cs);		
     f28:	c2 9a       	sbi	0x18, 2	; 24
     f2a:	01 97       	sbiw	r24, 0x01	; 1

	ili9341_pink_double_line();

	c=((line_b-2)-(line_a+2))*240;

	for(i=0;i<c;i++)
     f2c:	91 f7       	brne	.-28     	; 0xf12 <ili9341_clear+0x44>
		SPDR=colour;//move data into spdr
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
		csport |=(1<<cs);		
	}

	ili9341_pink_double_line();
     f2e:	0e 94 55 07 	call	0xeaa	; 0xeaa <ili9341_pink_double_line>
     f32:	80 ee       	ldi	r24, 0xE0	; 224
     f34:	9d e3       	ldi	r25, 0x3D	; 61

	c = ((line_c-2)-(line_b+2))*240;

	for(i=0;i<c;i++)
	{
		dcport |=(1<<dc);//st dc high for data
     f36:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     f38:	c2 98       	cbi	0x18, 2	; 24
		SPDR=colour>>8;//move data into spdr
     f3a:	0f b9       	out	0x0f, r16	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     f3c:	77 9b       	sbis	0x0e, 7	; 14
     f3e:	fe cf       	rjmp	.-4      	; 0xf3c <ili9341_clear+0x6e>
		csport |=(1<<cs);
     f40:	c2 9a       	sbi	0x18, 2	; 24

		dcport |=(1<<dc);//st dc high for data
     f42:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     f44:	c2 98       	cbi	0x18, 2	; 24
		SPDR=colour;//move data into spdr
     f46:	1f b9       	out	0x0f, r17	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     f48:	77 9b       	sbis	0x0e, 7	; 14
     f4a:	fe cf       	rjmp	.-4      	; 0xf48 <ili9341_clear+0x7a>
		csport |=(1<<cs);		
     f4c:	c2 9a       	sbi	0x18, 2	; 24
     f4e:	01 97       	sbiw	r24, 0x01	; 1

	ili9341_pink_double_line();

	c = ((line_c-2)-(line_b+2))*240;

	for(i=0;i<c;i++)
     f50:	91 f7       	brne	.-28     	; 0xf36 <ili9341_clear+0x68>
		SPDR=colour;//move data into spdr
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
		csport |=(1<<cs);		
	}

	ili9341_pink_double_line();
     f52:	0e 94 55 07 	call	0xeaa	; 0xeaa <ili9341_pink_double_line>
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	3d e2       	ldi	r19, 0x2D	; 45

	c=(320 - (line_c+2))*240;

	for(i=0;i<c;i++)
	{
		dcport |=(1<<dc);//st dc high for data
     f5a:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     f5c:	c2 98       	cbi	0x18, 2	; 24
		SPDR=colour>>8;//move data into spdr
     f5e:	0f b9       	out	0x0f, r16	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     f60:	77 9b       	sbis	0x0e, 7	; 14
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <ili9341_clear+0x92>
		csport |=(1<<cs);
     f64:	c2 9a       	sbi	0x18, 2	; 24

		dcport |=(1<<dc);//st dc high for data
     f66:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     f68:	c2 98       	cbi	0x18, 2	; 24
		SPDR=colour;//move data into spdr
     f6a:	1f b9       	out	0x0f, r17	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     f6c:	77 9b       	sbis	0x0e, 7	; 14
     f6e:	fe cf       	rjmp	.-4      	; 0xf6c <ili9341_clear+0x9e>
		csport |=(1<<cs);		
     f70:	c2 9a       	sbi	0x18, 2	; 24
     f72:	21 50       	subi	r18, 0x01	; 1
     f74:	30 40       	sbci	r19, 0x00	; 0

	ili9341_pink_double_line();

	c=(320 - (line_c+2))*240;

	for(i=0;i<c;i++)
     f76:	89 f7       	brne	.-30     	; 0xf5a <ili9341_clear+0x8c>
		csport &=~(1<<cs);//set cs low for operation
		SPDR=colour;//move data into spdr
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
		csport |=(1<<cs);		
	}
	ledport |=(1<<led);//pull high for normal operation
     f78:	c3 9a       	sbi	0x18, 3	; 24
	ledddr|=(1<<led);//D/C as output
     f7a:	bb 9a       	sbi	0x17, 3	; 23
}
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <DelError>:
}

void DelError(void)
{
	unsigned int i,j;
	ili9341_setaddress(0,110,239,260);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	6e e6       	ldi	r22, 0x6E	; 110
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	4f ee       	ldi	r20, 0xEF	; 239
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	24 e0       	ldi	r18, 0x04	; 4
     f90:	31 e0       	ldi	r19, 0x01	; 1
     f92:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
     f96:	80 e8       	ldi	r24, 0x80	; 128
     f98:	92 e5       	ldi	r25, 0x52	; 82
	
	for(i=0;i<21120;i++)
	{
		dcport |=(1<<dc);//st dc high for data
     f9a:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     f9c:	c2 98       	cbi	0x18, 2	; 24
		SPDR=RED>>8;//move data into spdr
     f9e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     fa0:	77 9b       	sbis	0x0e, 7	; 14
     fa2:	fe cf       	rjmp	.-4      	; 0xfa0 <DelError+0x1e>
		csport |=(1<<cs);
     fa4:	c2 9a       	sbi	0x18, 2	; 24

		dcport |=(1<<dc);//st dc high for data
     fa6:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     fa8:	c2 98       	cbi	0x18, 2	; 24
		SPDR=RED;//move data into spdr
     faa:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     fac:	77 9b       	sbis	0x0e, 7	; 14
     fae:	fe cf       	rjmp	.-4      	; 0xfac <DelError+0x2a>
		csport |=(1<<cs);		
     fb0:	c2 9a       	sbi	0x18, 2	; 24
     fb2:	01 97       	sbiw	r24, 0x01	; 1
void DelError(void)
{
	unsigned int i,j;
	ili9341_setaddress(0,110,239,260);
	
	for(i=0;i<21120;i++)
     fb4:	91 f7       	brne	.-28     	; 0xf9a <DelError+0x18>
		csport |=(1<<cs);		
	}

	

	ili9341_pink_double_line();
     fb6:	0e 94 55 07 	call	0xeaa	; 0xeaa <ili9341_pink_double_line>
     fba:	80 e9       	ldi	r24, 0x90	; 144
     fbc:	93 e3       	ldi	r25, 0x33	; 51

	for(i=0;i<13200;i++)
	{
		dcport |=(1<<dc);//st dc high for data
     fbe:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     fc0:	c2 98       	cbi	0x18, 2	; 24
		SPDR=RED>>8;//move data into spdr
     fc2:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     fc4:	77 9b       	sbis	0x0e, 7	; 14
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <DelError+0x42>
		csport |=(1<<cs);
     fc8:	c2 9a       	sbi	0x18, 2	; 24

		dcport |=(1<<dc);//st dc high for data
     fca:	c0 9a       	sbi	0x18, 0	; 24
		//_delay_us(1);//delay
		csport &=~(1<<cs);//set cs low for operation
     fcc:	c2 98       	cbi	0x18, 2	; 24
		SPDR=RED;//move data into spdr
     fce:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     fd0:	77 9b       	sbis	0x0e, 7	; 14
     fd2:	fe cf       	rjmp	.-4      	; 0xfd0 <DelError+0x4e>
		csport |=(1<<cs);		
     fd4:	c2 9a       	sbi	0x18, 2	; 24
     fd6:	01 97       	sbiw	r24, 0x01	; 1

	

	ili9341_pink_double_line();

	for(i=0;i<13200;i++)
     fd8:	91 f7       	brne	.-28     	; 0xfbe <DelError+0x3c>
		csport &=~(1<<cs);//set cs low for operation
		SPDR=RED;//move data into spdr
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
		csport |=(1<<cs);		
	}	
} 
     fda:	08 95       	ret

00000fdc <PrintError>:

void PrintError(unsigned char *cas) 
{
     fdc:	8f 92       	push	r8
     fde:	9f 92       	push	r9
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	6c 01       	movw	r12, r24
	ili9341_fillrect(0, y_Err - 10, 240, 10, RED);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	63 e7       	ldi	r22, 0x73	; 115
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	40 ef       	ldi	r20, 0xF0	; 240
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	2a e0       	ldi	r18, 0x0A	; 10
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	00 e0       	ldi	r16, 0x00	; 0
    1008:	10 e0       	ldi	r17, 0x00	; 0
    100a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>

	unsigned char line;
	ili9341_setaddress(0, y_Err, 239, y_Err+119);
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	6d e7       	ldi	r22, 0x7D	; 125
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	4f ee       	ldi	r20, 0xEF	; 239
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	24 ef       	ldi	r18, 0xF4	; 244
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
		while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
		csport |=(1<<cs);		
	}	
} 

void PrintError(unsigned char *cas) 
    1022:	08 94       	sec
    1024:	c1 08       	sbc	r12, r1
    1026:	d1 08       	sbc	r13, r1
    1028:	98 e1       	ldi	r25, 0x18	; 24
    102a:	89 2e       	mov	r8, r25
    102c:	51 c0       	rjmp	.+162    	; 0x10d0 <PrintError+0xf4>
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<5; jjj++)
		for( int jj=0; jj<6; jj++)
		{
			if(jj>0 && jj <5 )
    102e:	c4 30       	cpi	r28, 0x04	; 4
    1030:	d1 05       	cpc	r29, r1
    1032:	18 f4       	brcc	.+6      	; 0x103a <PrintError+0x5e>
			{
				line = pgm_read_byte(cas+(i*4)+jj-1);
    1034:	f5 01       	movw	r30, r10
    1036:	94 90       	lpm	r9, Z+
    1038:	01 c0       	rjmp	.+2      	; 0x103c <PrintError+0x60>
			}
			else
			{
				line = 0x00;
    103a:	99 24       	eor	r9, r9
    103c:	88 e0       	ldi	r24, 0x08	; 8
    103e:	e8 2e       	mov	r14, r24
    1040:	f1 2c       	mov	r15, r1
			}
			for (int j = 0; j<8; j++) 
			{
				if (line & 0b10000000) 
    1042:	97 fe       	sbrs	r9, 7
    1044:	13 c0       	rjmp	.+38     	; 0x106c <PrintError+0x90>
				{
					ili9341_pushcolour(PINK);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	98 eb       	ldi	r25, 0xB8	; 184
    104a:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(PINK);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	98 eb       	ldi	r25, 0xB8	; 184
    1052:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(PINK);	
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	98 eb       	ldi	r25, 0xB8	; 184
    105a:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(PINK);	
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	98 eb       	ldi	r25, 0xB8	; 184
    1062:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(PINK);			 
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	98 eb       	ldi	r25, 0xB8	; 184
    106a:	12 c0       	rjmp	.+36     	; 0x1090 <PrintError+0xb4>
				} 
				else
				{
					ili9341_pushcolour(RED);
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(RED);
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(RED);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(RED);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(RED);			
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1094:	08 94       	sec
    1096:	e1 08       	sbc	r14, r1
    1098:	f1 08       	sbc	r15, r1
			}
			else
			{
				line = 0x00;
			}
			for (int j = 0; j<8; j++) 
    109a:	e1 14       	cp	r14, r1
    109c:	f1 04       	cpc	r15, r1
    109e:	11 f0       	breq	.+4      	; 0x10a4 <PrintError+0xc8>
					ili9341_pushcolour(RED);
					ili9341_pushcolour(RED);
					ili9341_pushcolour(RED);
					ili9341_pushcolour(RED);			
				}
				line <<= 1;
    10a0:	99 0c       	add	r9, r9
    10a2:	cf cf       	rjmp	.-98     	; 0x1042 <PrintError+0x66>
    10a4:	21 96       	adiw	r28, 0x01	; 1
    10a6:	08 94       	sec
    10a8:	a1 1c       	adc	r10, r1
    10aa:	b1 1c       	adc	r11, r1
	unsigned char line;
	ili9341_setaddress(0, y_Err, 239, y_Err+119);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<5; jjj++)
		for( int jj=0; jj<6; jj++)
    10ac:	c5 30       	cpi	r28, 0x05	; 5
    10ae:	d1 05       	cpc	r29, r1
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <PrintError+0xd8>
    10b2:	bd cf       	rjmp	.-134    	; 0x102e <PrintError+0x52>
    10b4:	01 50       	subi	r16, 0x01	; 1
    10b6:	10 40       	sbci	r17, 0x00	; 0

	unsigned char line;
	ili9341_setaddress(0, y_Err, 239, y_Err+119);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<5; jjj++)
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <PrintError+0xe6>
			{
				line = pgm_read_byte(cas+(i*4)+jj-1);
			}
			else
			{
				line = 0x00;
    10ba:	56 01       	movw	r10, r12
    10bc:	cf ef       	ldi	r28, 0xFF	; 255
    10be:	df ef       	ldi	r29, 0xFF	; 255
    10c0:	bc cf       	rjmp	.-136    	; 0x103a <PrintError+0x5e>

	unsigned char line;
	ili9341_setaddress(0, y_Err, 239, y_Err+119);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<5; jjj++)
    10c2:	8a 94       	dec	r8
    10c4:	84 e0       	ldi	r24, 0x04	; 4
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	c8 0e       	add	r12, r24
    10ca:	d9 1e       	adc	r13, r25
{
	ili9341_fillrect(0, y_Err - 10, 240, 10, RED);

	unsigned char line;
	ili9341_setaddress(0, y_Err, 239, y_Err+119);
	for (int8_t i=0; i<24; i++ ) 
    10cc:	88 20       	and	r8, r8
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <PrintError+0xfa>
			{
				line = pgm_read_byte(cas+(i*4)+jj-1);
			}
			else
			{
				line = 0x00;
    10d0:	05 e0       	ldi	r16, 0x05	; 5
    10d2:	10 e0       	ldi	r17, 0x00	; 0
    10d4:	f2 cf       	rjmp	.-28     	; 0x10ba <PrintError+0xde>
				line <<= 1;
			}
		}		
	}

	ili9341_fillrect(0, y_Err + 120, 240, 10, RED);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	65 ef       	ldi	r22, 0xF5	; 245
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	40 ef       	ldi	r20, 0xF0	; 240
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	2a e0       	ldi	r18, 0x0A	; 10
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	00 e0       	ldi	r16, 0x00	; 0
    10e8:	10 e0       	ldi	r17, 0x00	; 0
    10ea:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
}
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	bf 90       	pop	r11
    1100:	af 90       	pop	r10
    1102:	9f 90       	pop	r9
    1104:	8f 90       	pop	r8
    1106:	08 95       	ret

00001108 <DelKar>:

void DelKar(void) 
{
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
    1116:	88 e3       	ldi	r24, 0x38	; 56
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	47 eb       	ldi	r20, 0xB7	; 183
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	2f e5       	ldi	r18, 0x5F	; 95
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
    112a:	38 e1       	ldi	r19, 0x18	; 24
    112c:	d3 2e       	mov	r13, r19
    112e:	24 c0       	rjmp	.+72     	; 0x1178 <DelKar+0x70>
		for( int jjj=0; jjj<4; jjj++)
		for( int jj=0; jj<4; jj++)
		{
			for (int j = 0; j<8; j++) 
			{
				ili9341_pushcolour(RED);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);			
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1150:	08 94       	sec
    1152:	e1 08       	sbc	r14, r1
    1154:	f1 08       	sbc	r15, r1
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<4; jjj++)
		for( int jj=0; jj<4; jj++)
		{
			for (int j = 0; j<8; j++) 
    1156:	e1 14       	cp	r14, r1
    1158:	f1 04       	cpc	r15, r1
    115a:	51 f7       	brne	.-44     	; 0x1130 <DelKar+0x28>
    115c:	01 50       	subi	r16, 0x01	; 1
    115e:	10 40       	sbci	r17, 0x00	; 0
{
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<4; jjj++)
		for( int jj=0; jj<4; jj++)
    1160:	21 f0       	breq	.+8      	; 0x116a <DelKar+0x62>

	ili9341_fillrect(0, y_Err + 120, 240, 10, RED);
}

void DelKar(void) 
{
    1162:	28 e0       	ldi	r18, 0x08	; 8
    1164:	e2 2e       	mov	r14, r18
    1166:	f1 2c       	mov	r15, r1
    1168:	e3 cf       	rjmp	.-58     	; 0x1130 <DelKar+0x28>
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<4; jjj++)
		for( int jj=0; jj<4; jj++)
    116a:	21 97       	sbiw	r28, 0x01	; 1
void DelKar(void) 
{
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<4; jjj++)
    116c:	19 f0       	breq	.+6      	; 0x1174 <DelKar+0x6c>

	ili9341_fillrect(0, y_Err + 120, 240, 10, RED);
}

void DelKar(void) 
{
    116e:	04 e0       	ldi	r16, 0x04	; 4
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	f7 cf       	rjmp	.-18     	; 0x1162 <DelKar+0x5a>
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<4; jjj++)
    1174:	da 94       	dec	r13
}

void DelKar(void) 
{
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
	for (int8_t i=0; i<24; i++ ) 
    1176:	19 f0       	breq	.+6      	; 0x117e <DelKar+0x76>

	ili9341_fillrect(0, y_Err + 120, 240, 10, RED);
}

void DelKar(void) 
{
    1178:	c4 e0       	ldi	r28, 0x04	; 4
    117a:	d0 e0       	ldi	r29, 0x00	; 0
    117c:	f8 cf       	rjmp	.-16     	; 0x116e <DelKar+0x66>
				ili9341_pushcolour(RED);			
				
			}
		}		
	}
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	08 95       	ret

0000118e <PrintKar>:

void PrintKar(unsigned char *cas) 
{
    118e:	8f 92       	push	r8
    1190:	9f 92       	push	r9
    1192:	af 92       	push	r10
    1194:	bf 92       	push	r11
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	e8 2e       	mov	r14, r24
    11a8:	09 2f       	mov	r16, r25
	unsigned char line;
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
    11aa:	88 e3       	ldi	r24, 0x38	; 56
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	47 eb       	ldi	r20, 0xB7	; 183
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	2f e5       	ldi	r18, 0x5F	; 95
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
    11be:	ce 2c       	mov	r12, r14
    11c0:	d0 2e       	mov	r13, r16
    11c2:	58 e1       	ldi	r21, 0x18	; 24
    11c4:	95 2e       	mov	r9, r21
    11c6:	43 c0       	rjmp	.+134    	; 0x124e <PrintKar+0xc0>
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<4; jjj++)
		for( int jj=0; jj<4; jj++)
		{
			line = pgm_read_byte(cas+(i*4)+jj);
    11c8:	f5 01       	movw	r30, r10
    11ca:	84 90       	lpm	r8, Z+
    11cc:	48 e0       	ldi	r20, 0x08	; 8
    11ce:	e4 2e       	mov	r14, r20
    11d0:	f1 2c       	mov	r15, r1
			for (int j = 0; j<8; j++) 
			{
				if (line & 0b10000000) 
    11d2:	87 fe       	sbrs	r8, 7
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <PrintKar+0x66>
				{
					ili9341_pushcolour(YELLOW);
    11d6:	80 e6       	ldi	r24, 0x60	; 96
    11d8:	9e ef       	ldi	r25, 0xFE	; 254
    11da:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(YELLOW);
    11de:	80 e6       	ldi	r24, 0x60	; 96
    11e0:	9e ef       	ldi	r25, 0xFE	; 254
    11e2:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(YELLOW);	
    11e6:	80 e6       	ldi	r24, 0x60	; 96
    11e8:	9e ef       	ldi	r25, 0xFE	; 254
    11ea:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(YELLOW);				 
    11ee:	80 e6       	ldi	r24, 0x60	; 96
    11f0:	9e ef       	ldi	r25, 0xFE	; 254
    11f2:	0e c0       	rjmp	.+28     	; 0x1210 <PrintKar+0x82>
				} 
				else
				{
					ili9341_pushcolour(RED);
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(RED);
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(RED);
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
					ili9341_pushcolour(RED);			
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1214:	08 94       	sec
    1216:	e1 08       	sbc	r14, r1
    1218:	f1 08       	sbc	r15, r1
	{
		for( int jjj=0; jjj<4; jjj++)
		for( int jj=0; jj<4; jj++)
		{
			line = pgm_read_byte(cas+(i*4)+jj);
			for (int j = 0; j<8; j++) 
    121a:	e1 14       	cp	r14, r1
    121c:	f1 04       	cpc	r15, r1
    121e:	11 f0       	breq	.+4      	; 0x1224 <PrintKar+0x96>
					ili9341_pushcolour(RED);
					ili9341_pushcolour(RED);
					ili9341_pushcolour(RED);
					ili9341_pushcolour(RED);			
				}
				line <<= 1;
    1220:	88 0c       	add	r8, r8
    1222:	d7 cf       	rjmp	.-82     	; 0x11d2 <PrintKar+0x44>
	unsigned char line;
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<4; jjj++)
		for( int jj=0; jj<4; jj++)
    1224:	0f 5f       	subi	r16, 0xFF	; 255
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	08 94       	sec
    122a:	a1 1c       	adc	r10, r1
    122c:	b1 1c       	adc	r11, r1
    122e:	04 30       	cpi	r16, 0x04	; 4
    1230:	11 05       	cpc	r17, r1
    1232:	51 f6       	brne	.-108    	; 0x11c8 <PrintKar+0x3a>
    1234:	21 97       	sbiw	r28, 0x01	; 1
{
	unsigned char line;
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<4; jjj++)
    1236:	21 f0       	breq	.+8      	; 0x1240 <PrintKar+0xb2>
		}		
	}
}

void PrintKar(unsigned char *cas) 
{
    1238:	56 01       	movw	r10, r12
    123a:	00 e0       	ldi	r16, 0x00	; 0
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	c4 cf       	rjmp	.-120    	; 0x11c8 <PrintKar+0x3a>
	unsigned char line;
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
	for (int8_t i=0; i<24; i++ ) 
	{
		for( int jjj=0; jjj<4; jjj++)
    1240:	9a 94       	dec	r9
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	c8 0e       	add	r12, r24
    1248:	d9 1e       	adc	r13, r25

void PrintKar(unsigned char *cas) 
{
	unsigned char line;
	ili9341_setaddress(x_Kar, y_Kar, x_Kar+127, y_Kar+95);
	for (int8_t i=0; i<24; i++ ) 
    124a:	99 20       	and	r9, r9
    124c:	19 f0       	breq	.+6      	; 0x1254 <PrintKar+0xc6>
	{
		for( int jjj=0; jjj<4; jjj++)
		for( int jj=0; jj<4; jj++)
		{
			line = pgm_read_byte(cas+(i*4)+jj);
    124e:	c4 e0       	ldi	r28, 0x04	; 4
    1250:	d0 e0       	ldi	r29, 0x00	; 0
    1252:	f2 cf       	rjmp	.-28     	; 0x1238 <PrintKar+0xaa>
				}
				line <<= 1;
			}
		}		
	}
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	bf 90       	pop	r11
    1266:	af 90       	pop	r10
    1268:	9f 90       	pop	r9
    126a:	8f 90       	pop	r8
    126c:	08 95       	ret

0000126e <Kartinki>:


void Kartinki(void)
{

	for(int i = pred_kar; i < 5; i++)
    126e:	80 91 a4 01 	lds	r24, 0x01A4
    1272:	90 e0       	ldi	r25, 0x00	; 0
	{
		switch(i)
		{
			case 0:
			{
				if(f_NUOZ)
    1274:	50 91 83 01 	lds	r21, 0x0183
				}
				break;
			}
			case 1:
			{
				if(f_LF)
    1278:	40 91 84 01 	lds	r20, 0x0184
				}
				break;
			}
			case 2:
			{
				if(TERM)
    127c:	60 91 8a 01 	lds	r22, 0x018A
				}
				break;
			}
			case 3:
			{
				if(lowVoltagePicture)
    1280:	30 91 86 01 	lds	r19, 0x0186
				}
				break;
			}
			case 4:
			{
				if(lowGasolinePicture)
    1284:	20 91 88 01 	lds	r18, 0x0188


void Kartinki(void)
{

	for(int i = pred_kar; i < 5; i++)
    1288:	53 c0       	rjmp	.+166    	; 0x1330 <Kartinki+0xc2>
	{
		switch(i)
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	91 05       	cpc	r25, r1
    128e:	19 f1       	breq	.+70     	; 0x12d6 <Kartinki+0x68>
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	24 f4       	brge	.+8      	; 0x129e <Kartinki+0x30>
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	91 05       	cpc	r25, r1
    129a:	39 f4       	brne	.+14     	; 0x12aa <Kartinki+0x3c>
    129c:	11 c0       	rjmp	.+34     	; 0x12c0 <Kartinki+0x52>
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	91 05       	cpc	r25, r1
    12a2:	41 f1       	breq	.+80     	; 0x12f4 <Kartinki+0x86>
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	91 05       	cpc	r25, r1
    12a8:	b1 f1       	breq	.+108    	; 0x1316 <Kartinki+0xa8>
		{
			case 0:
			{
				if(f_NUOZ)
    12aa:	55 23       	and	r21, r21
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <Kartinki+0x42>
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <Kartinki+0xc0>
				{
					if(viv_kar!=0)
    12b0:	80 91 69 00 	lds	r24, 0x0069
    12b4:	88 23       	and	r24, r24
    12b6:	11 f0       	breq	.+4      	; 0x12bc <Kartinki+0x4e>
					//PrintKar(kar_NYOZ);
					viv_kar = 0;
    12b8:	10 92 69 00 	sts	0x0069, r1
					pred_kar=1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	28 c0       	rjmp	.+80     	; 0x1310 <Kartinki+0xa2>
				}
				break;
			}
			case 1:
			{
				if(f_LF)
    12c0:	44 23       	and	r20, r20
    12c2:	a9 f1       	breq	.+106    	; 0x132e <Kartinki+0xc0>
				{
					if(viv_kar!=1)
    12c4:	80 91 69 00 	lds	r24, 0x0069
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <Kartinki+0x64>
					//PrintKar(kar_FAR);
					viv_kar = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 69 00 	sts	0x0069, r24
					pred_kar=2;
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	1d c0       	rjmp	.+58     	; 0x1310 <Kartinki+0xa2>
				}
				break;
			}
			case 2:
			{
				if(TERM)
    12d6:	66 23       	and	r22, r22
    12d8:	51 f1       	breq	.+84     	; 0x132e <Kartinki+0xc0>
				{
					if(viv_kar!=2)
    12da:	80 91 69 00 	lds	r24, 0x0069
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	21 f0       	breq	.+8      	; 0x12ea <Kartinki+0x7c>
					PrintKar(kar_TERM);
    12e2:	83 ee       	ldi	r24, 0xE3	; 227
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	0e 94 c7 08 	call	0x118e	; 0x118e <PrintKar>
					viv_kar = 2;
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	80 93 69 00 	sts	0x0069, r24
					pred_kar=3;
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	0e c0       	rjmp	.+28     	; 0x1310 <Kartinki+0xa2>
				}
				break;
			}
			case 3:
			{
				if(lowVoltagePicture)
    12f4:	33 23       	and	r19, r19
    12f6:	d9 f0       	breq	.+54     	; 0x132e <Kartinki+0xc0>
				{
					if(viv_kar!=3)
    12f8:	80 91 69 00 	lds	r24, 0x0069
    12fc:	83 30       	cpi	r24, 0x03	; 3
    12fe:	21 f0       	breq	.+8      	; 0x1308 <Kartinki+0x9a>
					PrintKar(kar_AKK);
    1300:	83 e4       	ldi	r24, 0x43	; 67
    1302:	92 e0       	ldi	r25, 0x02	; 2
    1304:	0e 94 c7 08 	call	0x118e	; 0x118e <PrintKar>
					viv_kar = 3;
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	80 93 69 00 	sts	0x0069, r24
					pred_kar=4;
    130e:	84 e0       	ldi	r24, 0x04	; 4
    1310:	80 93 a4 01 	sts	0x01A4, r24
					return;
    1314:	08 95       	ret
				}
				break;
			}
			case 4:
			{
				if(lowGasolinePicture)
    1316:	22 23       	and	r18, r18
    1318:	51 f0       	breq	.+20     	; 0x132e <Kartinki+0xc0>
				{
					if(viv_kar!=4)
    131a:	80 91 69 00 	lds	r24, 0x0069
    131e:	84 30       	cpi	r24, 0x04	; 4
    1320:	21 f0       	breq	.+8      	; 0x132a <Kartinki+0xbc>
					PrintKar(kar_BENZ);
    1322:	83 ea       	ldi	r24, 0xA3	; 163
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	0e 94 c7 08 	call	0x118e	; 0x118e <PrintKar>
					viv_kar = 4;
    132a:	84 e0       	ldi	r24, 0x04	; 4
    132c:	18 c0       	rjmp	.+48     	; 0x135e <Kartinki+0xf0>


void Kartinki(void)
{

	for(int i = pred_kar; i < 5; i++)
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	85 30       	cpi	r24, 0x05	; 5
    1332:	91 05       	cpc	r25, r1
    1334:	0c f4       	brge	.+2      	; 0x1338 <Kartinki+0xca>
    1336:	a9 cf       	rjmp	.-174    	; 0x128a <Kartinki+0x1c>
				}
				break;
			}
		}
	}
	if(!f_NUOZ && !f_LF && !f_LS && !lowVoltagePicture && !lowGasolinePicture && viv_kar != 55)
    1338:	55 23       	and	r21, r21
    133a:	99 f4       	brne	.+38     	; 0x1362 <Kartinki+0xf4>
    133c:	44 23       	and	r20, r20
    133e:	89 f4       	brne	.+34     	; 0x1362 <Kartinki+0xf4>
    1340:	80 91 85 01 	lds	r24, 0x0185
    1344:	88 23       	and	r24, r24
    1346:	69 f4       	brne	.+26     	; 0x1362 <Kartinki+0xf4>
    1348:	33 23       	and	r19, r19
    134a:	59 f4       	brne	.+22     	; 0x1362 <Kartinki+0xf4>
    134c:	22 23       	and	r18, r18
    134e:	49 f4       	brne	.+18     	; 0x1362 <Kartinki+0xf4>
    1350:	80 91 69 00 	lds	r24, 0x0069
    1354:	87 33       	cpi	r24, 0x37	; 55
    1356:	29 f0       	breq	.+10     	; 0x1362 <Kartinki+0xf4>
	{
	DelKar();
    1358:	0e 94 84 08 	call	0x1108	; 0x1108 <DelKar>
	viv_kar = 55;
    135c:	87 e3       	ldi	r24, 0x37	; 55
    135e:	80 93 69 00 	sts	0x0069, r24
	}
pred_kar = 0;
    1362:	10 92 a4 01 	sts	0x01A4, r1
    1366:	08 95       	ret

00001368 <sneg_get>:
		
}


void sneg_get(int x, int y)
{
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
	ili9341_fillrect(x, y, 27, 27, RED);
    136c:	4b e1       	ldi	r20, 0x1B	; 27
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	2b e1       	ldi	r18, 0x1B	; 27
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	00 e0       	ldi	r16, 0x00	; 0
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
}
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	08 95       	ret

00001382 <sneg_set>:

void sneg_set(int x, int y,uint16_t colour) 
{
    1382:	2f 92       	push	r2
    1384:	3f 92       	push	r3
    1386:	4f 92       	push	r4
    1388:	5f 92       	push	r5
    138a:	6f 92       	push	r6
    138c:	7f 92       	push	r7
    138e:	8f 92       	push	r8
    1390:	9f 92       	push	r9
    1392:	af 92       	push	r10
    1394:	bf 92       	push	r11
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	28 97       	sbiw	r28, 0x08	; 8
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	5c 01       	movw	r10, r24
    13b8:	78 87       	std	Y+8, r23	; 0x08
    13ba:	6f 83       	std	Y+7, r22	; 0x07
    13bc:	6a 01       	movw	r12, r20
	unsigned char line;

	
	
	ili9341_setaddress(x, y, x+12, y+12);
    13be:	58 2e       	mov	r5, r24
    13c0:	be 82       	std	Y+6, r11	; 0x06
    13c2:	4f 80       	ldd	r4, Y+7	; 0x07
    13c4:	e8 84       	ldd	r14, Y+8	; 0x08
    13c6:	ed 82       	std	Y+5, r14	; 0x05
    13c8:	5c e0       	ldi	r21, 0x0C	; 12
    13ca:	25 2e       	mov	r2, r21
    13cc:	31 2c       	mov	r3, r1
    13ce:	28 0e       	add	r2, r24
    13d0:	39 1e       	adc	r3, r25
    13d2:	4c e0       	ldi	r20, 0x0C	; 12
    13d4:	84 2e       	mov	r8, r20
    13d6:	91 2c       	mov	r9, r1
    13d8:	86 0e       	add	r8, r22
    13da:	97 1e       	adc	r9, r23
    13dc:	64 2d       	mov	r22, r4
    13de:	7e 2d       	mov	r23, r14
    13e0:	a1 01       	movw	r20, r2
    13e2:	94 01       	movw	r18, r8
    13e4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
    13e8:	00 e0       	ldi	r16, 0x00	; 0
    13ea:	10 e0       	ldi	r17, 0x00	; 0
	for (int8_t i=0; i<13; i++ ) 
	{
		line = pgm_read_byte(sneg+(i*2)+1);
    13ec:	f8 01       	movw	r30, r16
    13ee:	e6 53       	subi	r30, 0x36	; 54
    13f0:	fe 4f       	sbci	r31, 0xFE	; 254
    13f2:	64 90       	lpm	r6, Z+
    13f4:	35 e0       	ldi	r19, 0x05	; 5
    13f6:	e3 2e       	mov	r14, r19
    13f8:	f1 2c       	mov	r15, r1
		for (int j = 0; j<5; j++) 
		{
			if (line & 0b00001000) 
    13fa:	63 fe       	sbrs	r6, 3
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <sneg_set+0x80>
			{
				ili9341_pushcolour(colour);								 
    13fe:	c6 01       	movw	r24, r12
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <sneg_set+0x84>
			} 
			else
			{
				ili9341_pushcolour(RED);			
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    140a:	08 94       	sec
    140c:	e1 08       	sbc	r14, r1
    140e:	f1 08       	sbc	r15, r1
	
	ili9341_setaddress(x, y, x+12, y+12);
	for (int8_t i=0; i<13; i++ ) 
	{
		line = pgm_read_byte(sneg+(i*2)+1);
		for (int j = 0; j<5; j++) 
    1410:	e1 14       	cp	r14, r1
    1412:	f1 04       	cpc	r15, r1
    1414:	11 f0       	breq	.+4      	; 0x141a <sneg_set+0x98>
			} 
			else
			{
				ili9341_pushcolour(RED);			
			}
			line >>= 1;
    1416:	66 94       	lsr	r6
    1418:	f0 cf       	rjmp	.-32     	; 0x13fa <sneg_set+0x78>
		}
		line = pgm_read_byte(sneg+(i*2));
    141a:	f8 01       	movw	r30, r16
    141c:	e7 53       	subi	r30, 0x37	; 55
    141e:	fe 4f       	sbci	r31, 0xFE	; 254
    1420:	64 90       	lpm	r6, Z+
    1422:	28 e0       	ldi	r18, 0x08	; 8
    1424:	e2 2e       	mov	r14, r18
    1426:	f1 2c       	mov	r15, r1
		for (int j = 0; j<8; j++) 
		{
			if (line & 0b10000001) 
    1428:	86 2d       	mov	r24, r6
    142a:	81 78       	andi	r24, 0x81	; 129
    142c:	11 f0       	breq	.+4      	; 0x1432 <sneg_set+0xb0>
			{
				ili9341_pushcolour(colour);							 
    142e:	c6 01       	movw	r24, r12
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <sneg_set+0xb4>
			} 
			else
			{
				ili9341_pushcolour(RED);							
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    143a:	08 94       	sec
    143c:	e1 08       	sbc	r14, r1
    143e:	f1 08       	sbc	r15, r1
				ili9341_pushcolour(RED);			
			}
			line >>= 1;
		}
		line = pgm_read_byte(sneg+(i*2));
		for (int j = 0; j<8; j++) 
    1440:	e1 14       	cp	r14, r1
    1442:	f1 04       	cpc	r15, r1
    1444:	11 f0       	breq	.+4      	; 0x144a <sneg_set+0xc8>
			} 
			else
			{
				ili9341_pushcolour(RED);							
			}
			line >>= 1;
    1446:	66 94       	lsr	r6
    1448:	ef cf       	rjmp	.-34     	; 0x1428 <sneg_set+0xa6>
    144a:	0e 5f       	subi	r16, 0xFE	; 254
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char line;

	
	
	ili9341_setaddress(x, y, x+12, y+12);
	for (int8_t i=0; i<13; i++ ) 
    144e:	0a 31       	cpi	r16, 0x1A	; 26
    1450:	11 05       	cpc	r17, r1
    1452:	61 f6       	brne	.-104    	; 0x13ec <sneg_set+0x6a>
			}
			line >>= 1;
		}				
	}

	ili9341_setaddress(x+14, y, x+26, y+12);
    1454:	95 01       	movw	r18, r10
    1456:	22 5f       	subi	r18, 0xF2	; 242
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	3a 83       	std	Y+2, r19	; 0x02
    145c:	29 83       	std	Y+1, r18	; 0x01
    145e:	c5 01       	movw	r24, r10
    1460:	4a 96       	adiw	r24, 0x1a	; 26
    1462:	9c 83       	std	Y+4, r25	; 0x04
    1464:	8b 83       	std	Y+3, r24	; 0x03
    1466:	c9 01       	movw	r24, r18
    1468:	64 2d       	mov	r22, r4
    146a:	7d 81       	ldd	r23, Y+5	; 0x05
    146c:	4b 81       	ldd	r20, Y+3	; 0x03
    146e:	5c 81       	ldd	r21, Y+4	; 0x04
    1470:	94 01       	movw	r18, r8
    1472:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
    1476:	00 e0       	ldi	r16, 0x00	; 0
    1478:	10 e0       	ldi	r17, 0x00	; 0
	for (int8_t i=0; i<13; i++ ) 
	{
		line = pgm_read_byte(sneg+(i*2));
    147a:	f8 01       	movw	r30, r16
    147c:	e7 53       	subi	r30, 0x37	; 55
    147e:	fe 4f       	sbci	r31, 0xFE	; 254
    1480:	84 90       	lpm	r8, Z+
    1482:	98 e0       	ldi	r25, 0x08	; 8
    1484:	e9 2e       	mov	r14, r25
    1486:	f1 2c       	mov	r15, r1
		for (int j = 0; j<8; j++) 
		{
			if (line & 0b10000000) 
    1488:	87 fe       	sbrs	r8, 7
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <sneg_set+0x10e>
			{
				ili9341_pushcolour(colour);							 
    148c:	c6 01       	movw	r24, r12
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <sneg_set+0x112>
			} 
			else
			{
				ili9341_pushcolour(RED);							
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1498:	08 94       	sec
    149a:	e1 08       	sbc	r14, r1
    149c:	f1 08       	sbc	r15, r1

	ili9341_setaddress(x+14, y, x+26, y+12);
	for (int8_t i=0; i<13; i++ ) 
	{
		line = pgm_read_byte(sneg+(i*2));
		for (int j = 0; j<8; j++) 
    149e:	e1 14       	cp	r14, r1
    14a0:	f1 04       	cpc	r15, r1
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <sneg_set+0x126>
			} 
			else
			{
				ili9341_pushcolour(RED);							
			}
			line <<= 1;
    14a4:	88 0c       	add	r8, r8
    14a6:	f0 cf       	rjmp	.-32     	; 0x1488 <sneg_set+0x106>
		}
		line = pgm_read_byte(sneg+(i*2)+1);
    14a8:	f8 01       	movw	r30, r16
    14aa:	e6 53       	subi	r30, 0x36	; 54
    14ac:	fe 4f       	sbci	r31, 0xFE	; 254
    14ae:	84 90       	lpm	r8, Z+
    14b0:	85 e0       	ldi	r24, 0x05	; 5
    14b2:	e8 2e       	mov	r14, r24
    14b4:	f1 2c       	mov	r15, r1
		for (int j = 0; j<5; j++) 
		{
			if (line & 0b10000000) 
    14b6:	87 fe       	sbrs	r8, 7
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <sneg_set+0x13c>
			{
				ili9341_pushcolour(colour);								 
    14ba:	c6 01       	movw	r24, r12
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <sneg_set+0x140>
			} 
			else
			{
				ili9341_pushcolour(RED);			
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    14c6:	08 94       	sec
    14c8:	e1 08       	sbc	r14, r1
    14ca:	f1 08       	sbc	r15, r1
				ili9341_pushcolour(RED);							
			}
			line <<= 1;
		}
		line = pgm_read_byte(sneg+(i*2)+1);
		for (int j = 0; j<5; j++) 
    14cc:	e1 14       	cp	r14, r1
    14ce:	f1 04       	cpc	r15, r1
    14d0:	11 f0       	breq	.+4      	; 0x14d6 <sneg_set+0x154>
			} 
			else
			{
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
    14d2:	88 0c       	add	r8, r8
    14d4:	f0 cf       	rjmp	.-32     	; 0x14b6 <sneg_set+0x134>
    14d6:	0e 5f       	subi	r16, 0xFE	; 254
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
			line >>= 1;
		}				
	}

	ili9341_setaddress(x+14, y, x+26, y+12);
	for (int8_t i=0; i<13; i++ ) 
    14da:	0a 31       	cpi	r16, 0x1A	; 26
    14dc:	11 05       	cpc	r17, r1
    14de:	69 f6       	brne	.-102    	; 0x147a <sneg_set+0xf8>
			}
			line <<= 1;
		}		
	}

	ili9341_setaddress(x, y + 14, x+12, y+26);
    14e0:	be e0       	ldi	r27, 0x0E	; 14
    14e2:	8b 2e       	mov	r8, r27
    14e4:	91 2c       	mov	r9, r1
    14e6:	ef 81       	ldd	r30, Y+7	; 0x07
    14e8:	f8 85       	ldd	r31, Y+8	; 0x08
    14ea:	8e 0e       	add	r8, r30
    14ec:	9f 1e       	adc	r9, r31
    14ee:	aa e1       	ldi	r26, 0x1A	; 26
    14f0:	6a 2e       	mov	r6, r26
    14f2:	71 2c       	mov	r7, r1
    14f4:	6e 0e       	add	r6, r30
    14f6:	7f 1e       	adc	r7, r31
    14f8:	85 2d       	mov	r24, r5
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	b4 01       	movw	r22, r8
    14fe:	a1 01       	movw	r20, r2
    1500:	93 01       	movw	r18, r6
    1502:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
    1506:	09 e1       	ldi	r16, 0x19	; 25
    1508:	10 e0       	ldi	r17, 0x00	; 0
    150a:	18 01       	movw	r2, r16
    150c:	08 94       	sec
    150e:	21 08       	sbc	r2, r1
    1510:	31 08       	sbc	r3, r1
	for (int8_t i=12; i>=0; i-- ) 
	{
		line = pgm_read_byte(sneg+(i*2)+1);
    1512:	f8 01       	movw	r30, r16
    1514:	e7 53       	subi	r30, 0x37	; 55
    1516:	fe 4f       	sbci	r31, 0xFE	; 254
    1518:	54 90       	lpm	r5, Z+
    151a:	f5 e0       	ldi	r31, 0x05	; 5
    151c:	ef 2e       	mov	r14, r31
    151e:	f1 2c       	mov	r15, r1
		for (int j = 0; j<5; j++) 
		{
			if (line & 0b00001000) 
    1520:	53 fe       	sbrs	r5, 3
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <sneg_set+0x1a6>
			{
				ili9341_pushcolour(colour);								 
    1524:	c6 01       	movw	r24, r12
    1526:	02 c0       	rjmp	.+4      	; 0x152c <sneg_set+0x1aa>
			} 
			else
			{
				ili9341_pushcolour(RED);			
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1530:	08 94       	sec
    1532:	e1 08       	sbc	r14, r1
    1534:	f1 08       	sbc	r15, r1

	ili9341_setaddress(x, y + 14, x+12, y+26);
	for (int8_t i=12; i>=0; i-- ) 
	{
		line = pgm_read_byte(sneg+(i*2)+1);
		for (int j = 0; j<5; j++) 
    1536:	e1 14       	cp	r14, r1
    1538:	f1 04       	cpc	r15, r1
    153a:	11 f0       	breq	.+4      	; 0x1540 <sneg_set+0x1be>
			} 
			else
			{
				ili9341_pushcolour(RED);			
			}
			line >>= 1;
    153c:	56 94       	lsr	r5
    153e:	f0 cf       	rjmp	.-32     	; 0x1520 <sneg_set+0x19e>
		}
		line = pgm_read_byte(sneg+(i*2));
    1540:	f1 01       	movw	r30, r2
    1542:	e7 53       	subi	r30, 0x37	; 55
    1544:	fe 4f       	sbci	r31, 0xFE	; 254
    1546:	24 90       	lpm	r2, Z+
    1548:	e8 e0       	ldi	r30, 0x08	; 8
    154a:	ee 2e       	mov	r14, r30
    154c:	f1 2c       	mov	r15, r1
		for (int j = 0; j<8; j++) 
		{
			if (line & 0b10000001) 
    154e:	82 2d       	mov	r24, r2
    1550:	81 78       	andi	r24, 0x81	; 129
    1552:	11 f0       	breq	.+4      	; 0x1558 <sneg_set+0x1d6>
			{
				ili9341_pushcolour(colour);							 
    1554:	c6 01       	movw	r24, r12
    1556:	02 c0       	rjmp	.+4      	; 0x155c <sneg_set+0x1da>
			} 
			else
			{
				ili9341_pushcolour(RED);							
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1560:	08 94       	sec
    1562:	e1 08       	sbc	r14, r1
    1564:	f1 08       	sbc	r15, r1
				ili9341_pushcolour(RED);			
			}
			line >>= 1;
		}
		line = pgm_read_byte(sneg+(i*2));
		for (int j = 0; j<8; j++) 
    1566:	e1 14       	cp	r14, r1
    1568:	f1 04       	cpc	r15, r1
    156a:	11 f0       	breq	.+4      	; 0x1570 <sneg_set+0x1ee>
			} 
			else
			{
				ili9341_pushcolour(RED);							
			}
			line >>= 1;
    156c:	26 94       	lsr	r2
    156e:	ef cf       	rjmp	.-34     	; 0x154e <sneg_set+0x1cc>
    1570:	02 50       	subi	r16, 0x02	; 2
    1572:	10 40       	sbci	r17, 0x00	; 0
			line <<= 1;
		}		
	}

	ili9341_setaddress(x, y + 14, x+12, y+26);
	for (int8_t i=12; i>=0; i-- ) 
    1574:	ff ef       	ldi	r31, 0xFF	; 255
    1576:	0f 3f       	cpi	r16, 0xFF	; 255
    1578:	1f 07       	cpc	r17, r31
    157a:	09 f0       	breq	.+2      	; 0x157e <sneg_set+0x1fc>
    157c:	c6 cf       	rjmp	.-116    	; 0x150a <sneg_set+0x188>
			}
			line >>= 1;
		}				
	}

	ili9341_setaddress(x+14, y+14, x+26, y+26);
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	9a 81       	ldd	r25, Y+2	; 0x02
    1582:	b4 01       	movw	r22, r8
    1584:	4b 81       	ldd	r20, Y+3	; 0x03
    1586:	5c 81       	ldd	r21, Y+4	; 0x04
    1588:	93 01       	movw	r18, r6
    158a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
    158e:	08 e1       	ldi	r16, 0x18	; 24
    1590:	10 e0       	ldi	r17, 0x00	; 0
	for (int8_t i=12; i>=0; i-- ) 
	{
		line = pgm_read_byte(sneg+(i*2));
    1592:	f8 01       	movw	r30, r16
    1594:	e7 53       	subi	r30, 0x37	; 55
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	84 90       	lpm	r8, Z+
    159a:	78 e0       	ldi	r23, 0x08	; 8
    159c:	e7 2e       	mov	r14, r23
    159e:	f1 2c       	mov	r15, r1
		for (int j = 0; j<8; j++) 
		{
			if (line & 0b10000000) 
    15a0:	87 fe       	sbrs	r8, 7
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <sneg_set+0x226>
			{
				ili9341_pushcolour(colour);							 
    15a4:	c6 01       	movw	r24, r12
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <sneg_set+0x22a>
			} 
			else
			{
				ili9341_pushcolour(RED);							
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    15b0:	08 94       	sec
    15b2:	e1 08       	sbc	r14, r1
    15b4:	f1 08       	sbc	r15, r1

	ili9341_setaddress(x+14, y+14, x+26, y+26);
	for (int8_t i=12; i>=0; i-- ) 
	{
		line = pgm_read_byte(sneg+(i*2));
		for (int j = 0; j<8; j++) 
    15b6:	e1 14       	cp	r14, r1
    15b8:	f1 04       	cpc	r15, r1
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <sneg_set+0x23e>
			} 
			else
			{
				ili9341_pushcolour(RED);							
			}
			line <<= 1;
    15bc:	88 0c       	add	r8, r8
    15be:	f0 cf       	rjmp	.-32     	; 0x15a0 <sneg_set+0x21e>
		}
		line = pgm_read_byte(sneg+(i*2)+1);
    15c0:	f8 01       	movw	r30, r16
    15c2:	e6 53       	subi	r30, 0x36	; 54
    15c4:	fe 4f       	sbci	r31, 0xFE	; 254
    15c6:	84 90       	lpm	r8, Z+
    15c8:	65 e0       	ldi	r22, 0x05	; 5
    15ca:	e6 2e       	mov	r14, r22
    15cc:	f1 2c       	mov	r15, r1
		for (int j = 0; j<5; j++) 
		{
			if (line & 0b10000000) 
    15ce:	87 fe       	sbrs	r8, 7
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <sneg_set+0x254>
			{
				ili9341_pushcolour(colour);								 
    15d2:	c6 01       	movw	r24, r12
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <sneg_set+0x258>
			} 
			else
			{
				ili9341_pushcolour(RED);			
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    15de:	08 94       	sec
    15e0:	e1 08       	sbc	r14, r1
    15e2:	f1 08       	sbc	r15, r1
				ili9341_pushcolour(RED);							
			}
			line <<= 1;
		}
		line = pgm_read_byte(sneg+(i*2)+1);
		for (int j = 0; j<5; j++) 
    15e4:	e1 14       	cp	r14, r1
    15e6:	f1 04       	cpc	r15, r1
    15e8:	11 f0       	breq	.+4      	; 0x15ee <sneg_set+0x26c>
			} 
			else
			{
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
    15ea:	88 0c       	add	r8, r8
    15ec:	f0 cf       	rjmp	.-32     	; 0x15ce <sneg_set+0x24c>
    15ee:	02 50       	subi	r16, 0x02	; 2
    15f0:	10 40       	sbci	r17, 0x00	; 0
			line >>= 1;
		}				
	}

	ili9341_setaddress(x+14, y+14, x+26, y+26);
	for (int8_t i=12; i>=0; i-- ) 
    15f2:	2f ef       	ldi	r18, 0xFF	; 255
    15f4:	0e 3f       	cpi	r16, 0xFE	; 254
    15f6:	12 07       	cpc	r17, r18
    15f8:	61 f6       	brne	.-104    	; 0x1592 <sneg_set+0x210>
			}
			line <<= 1;
		}		
	}

	ili9341_drawpixel(x+5,y+1,RED);
    15fa:	85 01       	movw	r16, r10
    15fc:	0b 5f       	subi	r16, 0xFB	; 251
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	6f 81       	ldd	r22, Y+7	; 0x07
    1602:	78 85       	ldd	r23, Y+8	; 0x08
    1604:	6f 5f       	subi	r22, 0xFF	; 255
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	c8 01       	movw	r24, r16
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x+5,y+2,RED);
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	6e 5f       	subi	r22, 0xFE	; 254
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	c8 01       	movw	r24, r16
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x+5,y+3,RED);
    1624:	6f 81       	ldd	r22, Y+7	; 0x07
    1626:	78 85       	ldd	r23, Y+8	; 0x08
    1628:	6d 5f       	subi	r22, 0xFD	; 253
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	c8 01       	movw	r24, r16
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x+5,y+25,RED);
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	67 5e       	subi	r22, 0xE7	; 231
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	c8 01       	movw	r24, r16
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x+5,y+24,RED);
    1648:	6f 81       	ldd	r22, Y+7	; 0x07
    164a:	78 85       	ldd	r23, Y+8	; 0x08
    164c:	68 5e       	subi	r22, 0xE8	; 232
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	c8 01       	movw	r24, r16
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x+5,y+23,RED);
    165a:	6f 81       	ldd	r22, Y+7	; 0x07
    165c:	78 85       	ldd	r23, Y+8	; 0x08
    165e:	69 5e       	subi	r22, 0xE9	; 233
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	c8 01       	movw	r24, r16
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>

	ili9341_fillrect(x+13, y, 1, 27, PINK);
    166c:	c5 01       	movw	r24, r10
    166e:	0d 96       	adiw	r24, 0x0d	; 13
    1670:	64 2d       	mov	r22, r4
    1672:	7d 81       	ldd	r23, Y+5	; 0x05
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	2b e1       	ldi	r18, 0x1B	; 27
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	00 e0       	ldi	r16, 0x00	; 0
    167e:	18 eb       	ldi	r17, 0xB8	; 184
    1680:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x+10, y+13, 7, 1, PINK);
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	63 5f       	subi	r22, 0xF3	; 243
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	c5 01       	movw	r24, r10
    168e:	0a 96       	adiw	r24, 0x0a	; 10
    1690:	47 e0       	ldi	r20, 0x07	; 7
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	21 e0       	ldi	r18, 0x01	; 1
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
}
    169c:	28 96       	adiw	r28, 0x08	; 8
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	ef 90       	pop	r14
    16b4:	df 90       	pop	r13
    16b6:	cf 90       	pop	r12
    16b8:	bf 90       	pop	r11
    16ba:	af 90       	pop	r10
    16bc:	9f 90       	pop	r9
    16be:	8f 90       	pop	r8
    16c0:	7f 90       	pop	r7
    16c2:	6f 90       	pop	r6
    16c4:	5f 90       	pop	r5
    16c6:	4f 90       	pop	r4
    16c8:	3f 90       	pop	r3
    16ca:	2f 90       	pop	r2
    16cc:	08 95       	ret

000016ce <drawchar_27>:


void drawchar_27(int x, int y, unsigned char c,uint16_t colour) 
{
    16ce:	9f 92       	push	r9
    16d0:	af 92       	push	r10
    16d2:	bf 92       	push	r11
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	04 2f       	mov	r16, r20
    16e6:	e9 01       	movw	r28, r18
	unsigned char line;
	ili9341_setaddress(x, y, x+17, y+26);
    16e8:	ac 01       	movw	r20, r24
    16ea:	4f 5e       	subi	r20, 0xEF	; 239
    16ec:	5f 4f       	sbci	r21, 0xFF	; 255
    16ee:	9b 01       	movw	r18, r22
    16f0:	26 5e       	subi	r18, 0xE6	; 230
    16f2:	3f 4f       	sbci	r19, 0xFF	; 255
    16f4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
	for (int8_t i=0; i<9; i++ ) 
	{
		line = pgm_read_byte(c_27+(c*9)+i);
    16f8:	89 e0       	ldi	r24, 0x09	; 9
    16fa:	08 9f       	mul	r16, r24
    16fc:	80 01       	movw	r16, r0
    16fe:	11 24       	eor	r1, r1
	ili9341_fillrect(x+13, y, 1, 27, PINK);
	ili9341_fillrect(x+10, y+13, 7, 1, PINK);
}


void drawchar_27(int x, int y, unsigned char c,uint16_t colour) 
    1700:	a9 e0       	ldi	r26, 0x09	; 9
    1702:	aa 2e       	mov	r10, r26
    1704:	b1 2c       	mov	r11, r1
    1706:	a0 0e       	add	r10, r16
    1708:	b1 1e       	adc	r11, r17
{
	unsigned char line;
	ili9341_setaddress(x, y, x+17, y+26);
	for (int8_t i=0; i<9; i++ ) 
	{
		line = pgm_read_byte(c_27+(c*9)+i);
    170a:	f2 e4       	ldi	r31, 0x42	; 66
    170c:	cf 2e       	mov	r12, r31
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	df 2e       	mov	r13, r31
    1712:	c0 0e       	add	r12, r16
    1714:	d1 1e       	adc	r13, r17
    1716:	f6 01       	movw	r30, r12
    1718:	94 90       	lpm	r9, Z+
    171a:	e6 e0       	ldi	r30, 0x06	; 6
    171c:	ee 2e       	mov	r14, r30
    171e:	f1 2c       	mov	r15, r1
		for (int j = 0; j<6; j++) 
		{
			if (line & 0b10000000) 
    1720:	97 fe       	sbrs	r9, 7
    1722:	08 c0       	rjmp	.+16     	; 0x1734 <drawchar_27+0x66>
			{
				ili9341_pushcolour(colour);
    1724:	ce 01       	movw	r24, r28
    1726:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);
    172a:	ce 01       	movw	r24, r28
    172c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);				 
    1730:	ce 01       	movw	r24, r28
    1732:	0a c0       	rjmp	.+20     	; 0x1748 <drawchar_27+0x7a>
			} 
			else
			{
				ili9341_pushcolour(RED);
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);			
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    174c:	08 94       	sec
    174e:	e1 08       	sbc	r14, r1
    1750:	f1 08       	sbc	r15, r1
	unsigned char line;
	ili9341_setaddress(x, y, x+17, y+26);
	for (int8_t i=0; i<9; i++ ) 
	{
		line = pgm_read_byte(c_27+(c*9)+i);
		for (int j = 0; j<6; j++) 
    1752:	e1 14       	cp	r14, r1
    1754:	f1 04       	cpc	r15, r1
    1756:	11 f0       	breq	.+4      	; 0x175c <drawchar_27+0x8e>
			{
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
    1758:	99 0c       	add	r9, r9
    175a:	e2 cf       	rjmp	.-60     	; 0x1720 <drawchar_27+0x52>
		}
		line = pgm_read_byte(c_27+(c*9)+i);
    175c:	f6 01       	movw	r30, r12
    175e:	94 90       	lpm	r9, Z+
    1760:	76 e0       	ldi	r23, 0x06	; 6
    1762:	e7 2e       	mov	r14, r23
    1764:	f1 2c       	mov	r15, r1
		for (int j = 0; j<6; j++) 
		{
			if (line & 0b10000000) 
    1766:	97 fe       	sbrs	r9, 7
    1768:	08 c0       	rjmp	.+16     	; 0x177a <drawchar_27+0xac>
			{
				ili9341_pushcolour(colour);
    176a:	ce 01       	movw	r24, r28
    176c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);
    1770:	ce 01       	movw	r24, r28
    1772:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);				 
    1776:	ce 01       	movw	r24, r28
    1778:	0a c0       	rjmp	.+20     	; 0x178e <drawchar_27+0xc0>
			} 
			else
			{
				ili9341_pushcolour(RED);
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);			
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1792:	08 94       	sec
    1794:	e1 08       	sbc	r14, r1
    1796:	f1 08       	sbc	r15, r1
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
		}
		line = pgm_read_byte(c_27+(c*9)+i);
		for (int j = 0; j<6; j++) 
    1798:	e1 14       	cp	r14, r1
    179a:	f1 04       	cpc	r15, r1
    179c:	11 f0       	breq	.+4      	; 0x17a2 <drawchar_27+0xd4>
			{
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
    179e:	99 0c       	add	r9, r9
    17a0:	e2 cf       	rjmp	.-60     	; 0x1766 <drawchar_27+0x98>
		}
		line = pgm_read_byte(c_27+(c*9)+i);
    17a2:	f6 01       	movw	r30, r12
    17a4:	c4 90       	lpm	r12, Z+
    17a6:	66 e0       	ldi	r22, 0x06	; 6
    17a8:	e6 2e       	mov	r14, r22
    17aa:	f1 2c       	mov	r15, r1
		for (int j = 0; j<6; j++) 
		{
			if (line & 0b10000000) 
    17ac:	c7 fe       	sbrs	r12, 7
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <drawchar_27+0xf2>
			{
				ili9341_pushcolour(colour);
    17b0:	ce 01       	movw	r24, r28
    17b2:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);
    17b6:	ce 01       	movw	r24, r28
    17b8:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);				 
    17bc:	ce 01       	movw	r24, r28
    17be:	0a c0       	rjmp	.+20     	; 0x17d4 <drawchar_27+0x106>
			} 
			else
			{
				ili9341_pushcolour(RED);
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);			
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    17d8:	08 94       	sec
    17da:	e1 08       	sbc	r14, r1
    17dc:	f1 08       	sbc	r15, r1
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
		}
		line = pgm_read_byte(c_27+(c*9)+i);
		for (int j = 0; j<6; j++) 
    17de:	e1 14       	cp	r14, r1
    17e0:	f1 04       	cpc	r15, r1
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <drawchar_27+0x11a>
			{
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
    17e4:	cc 0c       	add	r12, r12
    17e6:	e2 cf       	rjmp	.-60     	; 0x17ac <drawchar_27+0xde>
    17e8:	0f 5f       	subi	r16, 0xFF	; 255
    17ea:	1f 4f       	sbci	r17, 0xFF	; 255

void drawchar_27(int x, int y, unsigned char c,uint16_t colour) 
{
	unsigned char line;
	ili9341_setaddress(x, y, x+17, y+26);
	for (int8_t i=0; i<9; i++ ) 
    17ec:	0a 15       	cp	r16, r10
    17ee:	1b 05       	cpc	r17, r11
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <drawchar_27+0x126>
    17f2:	8b cf       	rjmp	.-234    	; 0x170a <drawchar_27+0x3c>
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
		}
	}
}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	cf 90       	pop	r12
    1804:	bf 90       	pop	r11
    1806:	af 90       	pop	r10
    1808:	9f 90       	pop	r9
    180a:	08 95       	ret

0000180c <PrintTemp>:
		drawchar_27(x+63, y, d, PINK);

}

PrintTemp(int x, int y)
{
    180c:	cf 92       	push	r12
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	7c 01       	movw	r14, r24
    181e:	eb 01       	movw	r28, r22
	if(t_r==0)
    1820:	80 91 62 00 	lds	r24, 0x0062
    1824:	88 23       	and	r24, r24
    1826:	61 f5       	brne	.+88     	; 0x1880 <PrintTemp+0x74>
	{
		sneg_set(x, y, PINK);
    1828:	c7 01       	movw	r24, r14
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	58 eb       	ldi	r21, 0xB8	; 184
    182e:	0e 94 c1 09 	call	0x1382	; 0x1382 <sneg_set>
		ili9341_fillrect_3(x+50, y, 6, 4, RED);
    1832:	12 e3       	ldi	r17, 0x32	; 50
    1834:	c1 2e       	mov	r12, r17
    1836:	d1 2c       	mov	r13, r1
    1838:	ce 0c       	add	r12, r14
    183a:	df 1c       	adc	r13, r15
    183c:	c6 01       	movw	r24, r12
    183e:	be 01       	movw	r22, r28
    1840:	46 e0       	ldi	r20, 0x06	; 6
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	24 e0       	ldi	r18, 0x04	; 4
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	00 e0       	ldi	r16, 0x00	; 0
    184a:	10 e0       	ldi	r17, 0x00	; 0
    184c:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
		ili9341_fillrect(x+50, y+12, 17, 3, PINK);
    1850:	be 01       	movw	r22, r28
    1852:	64 5f       	subi	r22, 0xF4	; 244
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	c6 01       	movw	r24, r12
    1858:	41 e1       	ldi	r20, 0x11	; 17
    185a:	50 e0       	ldi	r21, 0x00	; 0
    185c:	23 e0       	ldi	r18, 0x03	; 3
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	00 e0       	ldi	r16, 0x00	; 0
    1862:	18 eb       	ldi	r17, 0xB8	; 184
    1864:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
		ili9341_fillrect_3(x+50, y+15, 6, 4, RED);
    1868:	be 01       	movw	r22, r28
    186a:	61 5f       	subi	r22, 0xF1	; 241
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	c6 01       	movw	r24, r12
    1870:	46 e0       	ldi	r20, 0x06	; 6
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	24 e0       	ldi	r18, 0x04	; 4
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	00 e0       	ldi	r16, 0x00	; 0
    187a:	10 e0       	ldi	r17, 0x00	; 0
    187c:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
		
	}
	if(t_r==1)
    1880:	80 91 62 00 	lds	r24, 0x0062
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	f1 f4       	brne	.+60     	; 0x18c4 <PrintTemp+0xb8>
	{
		sneg_set(x, y, PINK);
    1888:	c7 01       	movw	r24, r14
    188a:	be 01       	movw	r22, r28
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	58 eb       	ldi	r21, 0xB8	; 184
    1890:	0e 94 c1 09 	call	0x1382	; 0x1382 <sneg_set>
		ili9341_fillrect(x+57, y+5, 3, 17, PINK);
    1894:	be 01       	movw	r22, r28
    1896:	6b 5f       	subi	r22, 0xFB	; 251
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	c7 01       	movw	r24, r14
    189c:	c9 96       	adiw	r24, 0x39	; 57
    189e:	43 e0       	ldi	r20, 0x03	; 3
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	21 e1       	ldi	r18, 0x11	; 17
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	00 e0       	ldi	r16, 0x00	; 0
    18a8:	18 eb       	ldi	r17, 0xB8	; 184
    18aa:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
		ili9341_fillrect(x+50, y+12, 17, 3, PINK);
    18ae:	be 01       	movw	r22, r28
    18b0:	64 5f       	subi	r22, 0xF4	; 244
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	c7 01       	movw	r24, r14
    18b6:	c2 96       	adiw	r24, 0x32	; 50
    18b8:	41 e1       	ldi	r20, 0x11	; 17
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	23 e0       	ldi	r18, 0x03	; 3
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	}
	if(t_r==2)
    18c4:	80 91 62 00 	lds	r24, 0x0062
    18c8:	82 30       	cpi	r24, 0x02	; 2
    18ca:	e1 f4       	brne	.+56     	; 0x1904 <PrintTemp+0xf8>
	{
		sneg_get(x, y);
    18cc:	c7 01       	movw	r24, r14
    18ce:	be 01       	movw	r22, r28
    18d0:	0e 94 b4 09 	call	0x1368	; 0x1368 <sneg_get>
		ili9341_fillrect(x+57, y+5, 3, 17, PINK);
    18d4:	be 01       	movw	r22, r28
    18d6:	6b 5f       	subi	r22, 0xFB	; 251
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	c7 01       	movw	r24, r14
    18dc:	c9 96       	adiw	r24, 0x39	; 57
    18de:	43 e0       	ldi	r20, 0x03	; 3
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	21 e1       	ldi	r18, 0x11	; 17
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	00 e0       	ldi	r16, 0x00	; 0
    18e8:	18 eb       	ldi	r17, 0xB8	; 184
    18ea:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
		ili9341_fillrect(x+50, y+12, 17, 3, PINK);
    18ee:	be 01       	movw	r22, r28
    18f0:	64 5f       	subi	r22, 0xF4	; 244
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	c7 01       	movw	r24, r14
    18f6:	c2 96       	adiw	r24, 0x32	; 50
    18f8:	41 e1       	ldi	r20, 0x11	; 17
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	23 e0       	ldi	r18, 0x03	; 3
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	}
	
	if(t_r==3)
    1904:	80 91 62 00 	lds	r24, 0x0062
    1908:	83 30       	cpi	r24, 0x03	; 3
    190a:	09 f0       	breq	.+2      	; 0x190e <PrintTemp+0x102>
    190c:	4d c0       	rjmp	.+154    	; 0x19a8 <PrintTemp+0x19c>
	{
		sneg_get(x, y);
    190e:	c7 01       	movw	r24, r14
    1910:	be 01       	movw	r22, r28
    1912:	0e 94 b4 09 	call	0x1368	; 0x1368 <sneg_get>
		ili9341_fillrect_3(x+50, y, 6, 4, RED);
    1916:	b2 e3       	ldi	r27, 0x32	; 50
    1918:	cb 2e       	mov	r12, r27
    191a:	d1 2c       	mov	r13, r1
    191c:	ce 0c       	add	r12, r14
    191e:	df 1c       	adc	r13, r15
    1920:	c6 01       	movw	r24, r12
    1922:	be 01       	movw	r22, r28
    1924:	46 e0       	ldi	r20, 0x06	; 6
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	24 e0       	ldi	r18, 0x04	; 4
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	00 e0       	ldi	r16, 0x00	; 0
    192e:	10 e0       	ldi	r17, 0x00	; 0
    1930:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
		ili9341_fillrect(x+50, y+12, 17, 3, RED);
    1934:	be 01       	movw	r22, r28
    1936:	64 5f       	subi	r22, 0xF4	; 244
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	c6 01       	movw	r24, r12
    193c:	41 e1       	ldi	r20, 0x11	; 17
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	23 e0       	ldi	r18, 0x03	; 3
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
		ili9341_fillrect_3(x+50, y+15, 6, 4, RED);
    1948:	be 01       	movw	r22, r28
    194a:	61 5f       	subi	r22, 0xF1	; 241
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	c6 01       	movw	r24, r12
    1950:	46 e0       	ldi	r20, 0x06	; 6
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	24 e0       	ldi	r18, 0x04	; 4
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>

		drawchar_27(x+70, y, 12, PINK);
    195c:	c7 01       	movw	r24, r14
    195e:	8a 5b       	subi	r24, 0xBA	; 186
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	be 01       	movw	r22, r28
    1964:	4c e0       	ldi	r20, 0x0C	; 12
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	38 eb       	ldi	r19, 0xB8	; 184
    196a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
		drawchar_27(x+91, y, 12, PINK);
    196e:	c7 01       	movw	r24, r14
    1970:	85 5a       	subi	r24, 0xA5	; 165
    1972:	9f 4f       	sbci	r25, 0xFF	; 255
    1974:	be 01       	movw	r22, r28
    1976:	4c e0       	ldi	r20, 0x0C	; 12
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	38 eb       	ldi	r19, 0xB8	; 184
    197c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
		ili9341_fillrect_3(x+115, y+21, 2, 2, PINK);
    1980:	be 01       	movw	r22, r28
    1982:	6b 5e       	subi	r22, 0xEB	; 235
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	c7 01       	movw	r24, r14
    1988:	8d 58       	subi	r24, 0x8D	; 141
    198a:	9f 4f       	sbci	r25, 0xFF	; 255
    198c:	42 e0       	ldi	r20, 0x02	; 2
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	22 e0       	ldi	r18, 0x02	; 2
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	00 e0       	ldi	r16, 0x00	; 0
    1996:	18 eb       	ldi	r17, 0xB8	; 184
    1998:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
		drawchar_27(x+127, y, 12, PINK);
    199c:	c7 01       	movw	r24, r14
    199e:	81 58       	subi	r24, 0x81	; 129
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	be 01       	movw	r22, r28
    19a4:	4c e0       	ldi	r20, 0x0C	; 12
    19a6:	2d c0       	rjmp	.+90     	; 0x1a02 <PrintTemp+0x1f6>
		drawchar_27(x+148, y, 10, PINK);
		drawchar_27(x+169, y, 11, PINK);
		return;
	}	
	
	if(t_a == 0)
    19a8:	40 91 63 00 	lds	r20, 0x0063
    19ac:	c7 01       	movw	r24, r14
    19ae:	8a 5b       	subi	r24, 0xBA	; 186
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	44 23       	and	r20, r20
    19b4:	19 f4       	brne	.+6      	; 0x19bc <PrintTemp+0x1b0>
	{
		drawchar_27(x+70, y, 13, PINK);
    19b6:	be 01       	movw	r22, r28
    19b8:	4d e0       	ldi	r20, 0x0D	; 13
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <PrintTemp+0x1b2>
	}
	else
	{
		drawchar_27(x+70, y, t_a, PINK);
    19bc:	be 01       	movw	r22, r28
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	38 eb       	ldi	r19, 0xB8	; 184
    19c2:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
	}
	drawchar_27(x+91, y, t_b, PINK);
    19c6:	c7 01       	movw	r24, r14
    19c8:	85 5a       	subi	r24, 0xA5	; 165
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	be 01       	movw	r22, r28
    19ce:	40 91 64 00 	lds	r20, 0x0064
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	38 eb       	ldi	r19, 0xB8	; 184
    19d6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
	ili9341_fillrect_3(x+115, y+21, 2, 2, PINK);
    19da:	be 01       	movw	r22, r28
    19dc:	6b 5e       	subi	r22, 0xEB	; 235
    19de:	7f 4f       	sbci	r23, 0xFF	; 255
    19e0:	c7 01       	movw	r24, r14
    19e2:	8d 58       	subi	r24, 0x8D	; 141
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	42 e0       	ldi	r20, 0x02	; 2
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	22 e0       	ldi	r18, 0x02	; 2
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	00 e0       	ldi	r16, 0x00	; 0
    19f0:	18 eb       	ldi	r17, 0xB8	; 184
    19f2:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
	drawchar_27(x+127, y, t_c, PINK);
    19f6:	c7 01       	movw	r24, r14
    19f8:	81 58       	subi	r24, 0x81	; 129
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	be 01       	movw	r22, r28
    19fe:	40 91 65 00 	lds	r20, 0x0065
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	38 eb       	ldi	r19, 0xB8	; 184
    1a06:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
	drawchar_27(x+148, y, 10, PINK);
    1a0a:	c7 01       	movw	r24, r14
    1a0c:	8c 56       	subi	r24, 0x6C	; 108
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	be 01       	movw	r22, r28
    1a12:	4a e0       	ldi	r20, 0x0A	; 10
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	38 eb       	ldi	r19, 0xB8	; 184
    1a18:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
	drawchar_27(x+169, y, 11, PINK);
    1a1c:	c7 01       	movw	r24, r14
    1a1e:	87 55       	subi	r24, 0x57	; 87
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	be 01       	movw	r22, r28
    1a24:	4b e0       	ldi	r20, 0x0B	; 11
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	38 eb       	ldi	r19, 0xB8	; 184
    1a2a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
	
		
}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	df 90       	pop	r13
    1a3c:	cf 90       	pop	r12
    1a3e:	08 95       	ret

00001a40 <PrintJan>:
	

}*/

PrintJan(char a, char b, char c, char d)
{	
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	38 2f       	mov	r19, r24
    1a48:	f6 2e       	mov	r15, r22
    1a4a:	04 2f       	mov	r16, r20
    1a4c:	12 2f       	mov	r17, r18
	    int x =10;
	    int y = 137;

		drawchar_27(x, y, a, PINK);
    1a4e:	8a e0       	ldi	r24, 0x0A	; 10
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	69 e8       	ldi	r22, 0x89	; 137
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	43 2f       	mov	r20, r19
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	38 eb       	ldi	r19, 0xB8	; 184
    1a5c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
		drawchar_27(x+21, y, b, PINK);
    1a60:	8f e1       	ldi	r24, 0x1F	; 31
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	69 e8       	ldi	r22, 0x89	; 137
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	4f 2d       	mov	r20, r15
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	38 eb       	ldi	r19, 0xB8	; 184
    1a6e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
		drawchar_27(x+42, y, c, PINK);
    1a72:	84 e3       	ldi	r24, 0x34	; 52
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	69 e8       	ldi	r22, 0x89	; 137
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	40 2f       	mov	r20, r16
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	38 eb       	ldi	r19, 0xB8	; 184
    1a80:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>
		drawchar_27(x+63, y, d, PINK);
    1a84:	89 e4       	ldi	r24, 0x49	; 73
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	69 e8       	ldi	r22, 0x89	; 137
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	41 2f       	mov	r20, r17
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	38 eb       	ldi	r19, 0xB8	; 184
    1a92:	0e 94 67 0b 	call	0x16ce	; 0x16ce <drawchar_27>

}
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	08 95       	ret

00001a9e <drawchar_21>:
	ili9341_fillrect_3(x+72, y+9, 1, 3, PINK);
	ili9341_fillrect_3(x+75, y, 1, 3, PINK);
}

void drawchar_21(int x, int y, unsigned char c,uint16_t colour) 
{
    1a9e:	9f 92       	push	r9
    1aa0:	af 92       	push	r10
    1aa2:	bf 92       	push	r11
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	04 2f       	mov	r16, r20
    1ab6:	e9 01       	movw	r28, r18
	unsigned char line;
	ili9341_setaddress(x, y, x+14, y+20);
    1ab8:	ac 01       	movw	r20, r24
    1aba:	42 5f       	subi	r20, 0xF2	; 242
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	9b 01       	movw	r18, r22
    1ac0:	2c 5e       	subi	r18, 0xEC	; 236
    1ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ili9341_setaddress>
	for (int8_t i=0; i<7; i++ ) 
	{
		line = pgm_read_byte(c_21+(c*7)+i);
    1ac8:	87 e0       	ldi	r24, 0x07	; 7
    1aca:	08 9f       	mul	r16, r24
    1acc:	80 01       	movw	r16, r0
    1ace:	11 24       	eor	r1, r1
	ili9341_drawpixel_3(x+69,y+18,PINK);
	ili9341_fillrect_3(x+72, y+9, 1, 3, PINK);
	ili9341_fillrect_3(x+75, y, 1, 3, PINK);
}

void drawchar_21(int x, int y, unsigned char c,uint16_t colour) 
    1ad0:	47 e0       	ldi	r20, 0x07	; 7
    1ad2:	a4 2e       	mov	r10, r20
    1ad4:	b1 2c       	mov	r11, r1
    1ad6:	a0 0e       	add	r10, r16
    1ad8:	b1 1e       	adc	r11, r17
{
	unsigned char line;
	ili9341_setaddress(x, y, x+14, y+20);
	for (int8_t i=0; i<7; i++ ) 
	{
		line = pgm_read_byte(c_21+(c*7)+i);
    1ada:	34 e5       	ldi	r19, 0x54	; 84
    1adc:	c3 2e       	mov	r12, r19
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	d3 2e       	mov	r13, r19
    1ae2:	c0 0e       	add	r12, r16
    1ae4:	d1 1e       	adc	r13, r17
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	94 90       	lpm	r9, Z+
    1aea:	25 e0       	ldi	r18, 0x05	; 5
    1aec:	e2 2e       	mov	r14, r18
    1aee:	f1 2c       	mov	r15, r1
		for (int j = 0; j<5; j++) 
		{
			if (line & 0b10000000) 
    1af0:	97 fe       	sbrs	r9, 7
    1af2:	08 c0       	rjmp	.+16     	; 0x1b04 <drawchar_21+0x66>
			{
				ili9341_pushcolour(colour);
    1af4:	ce 01       	movw	r24, r28
    1af6:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);
    1afa:	ce 01       	movw	r24, r28
    1afc:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);				 
    1b00:	ce 01       	movw	r24, r28
    1b02:	0a c0       	rjmp	.+20     	; 0x1b18 <drawchar_21+0x7a>
			} 
			else
			{
				ili9341_pushcolour(RED);
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);			
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1b1c:	08 94       	sec
    1b1e:	e1 08       	sbc	r14, r1
    1b20:	f1 08       	sbc	r15, r1
	unsigned char line;
	ili9341_setaddress(x, y, x+14, y+20);
	for (int8_t i=0; i<7; i++ ) 
	{
		line = pgm_read_byte(c_21+(c*7)+i);
		for (int j = 0; j<5; j++) 
    1b22:	e1 14       	cp	r14, r1
    1b24:	f1 04       	cpc	r15, r1
    1b26:	11 f0       	breq	.+4      	; 0x1b2c <drawchar_21+0x8e>
			{
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
    1b28:	99 0c       	add	r9, r9
    1b2a:	e2 cf       	rjmp	.-60     	; 0x1af0 <drawchar_21+0x52>
		}
		line = pgm_read_byte(c_21+(c*7)+i);
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	94 90       	lpm	r9, Z+
    1b30:	95 e0       	ldi	r25, 0x05	; 5
    1b32:	e9 2e       	mov	r14, r25
    1b34:	f1 2c       	mov	r15, r1
		for (int j = 0; j<5; j++) 
		{
			if (line & 0b10000000) 
    1b36:	97 fe       	sbrs	r9, 7
    1b38:	08 c0       	rjmp	.+16     	; 0x1b4a <drawchar_21+0xac>
			{
				ili9341_pushcolour(colour);
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);
    1b40:	ce 01       	movw	r24, r28
    1b42:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);				 
    1b46:	ce 01       	movw	r24, r28
    1b48:	0a c0       	rjmp	.+20     	; 0x1b5e <drawchar_21+0xc0>
			} 
			else
			{
				ili9341_pushcolour(RED);
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);			
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1b62:	08 94       	sec
    1b64:	e1 08       	sbc	r14, r1
    1b66:	f1 08       	sbc	r15, r1
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
		}
		line = pgm_read_byte(c_21+(c*7)+i);
		for (int j = 0; j<5; j++) 
    1b68:	e1 14       	cp	r14, r1
    1b6a:	f1 04       	cpc	r15, r1
    1b6c:	11 f0       	breq	.+4      	; 0x1b72 <drawchar_21+0xd4>
			{
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
    1b6e:	99 0c       	add	r9, r9
    1b70:	e2 cf       	rjmp	.-60     	; 0x1b36 <drawchar_21+0x98>
		}
		line = pgm_read_byte(c_21+(c*7)+i);
    1b72:	f6 01       	movw	r30, r12
    1b74:	c4 90       	lpm	r12, Z+
    1b76:	85 e0       	ldi	r24, 0x05	; 5
    1b78:	e8 2e       	mov	r14, r24
    1b7a:	f1 2c       	mov	r15, r1
		for (int j = 0; j<5; j++) 
		{
			if (line & 0b10000000) 
    1b7c:	c7 fe       	sbrs	r12, 7
    1b7e:	08 c0       	rjmp	.+16     	; 0x1b90 <drawchar_21+0xf2>
			{
				ili9341_pushcolour(colour);
    1b80:	ce 01       	movw	r24, r28
    1b82:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);
    1b86:	ce 01       	movw	r24, r28
    1b88:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(colour);				 
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	0a c0       	rjmp	.+20     	; 0x1ba4 <drawchar_21+0x106>
			} 
			else
			{
				ili9341_pushcolour(RED);
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
				ili9341_pushcolour(RED);			
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 a3 06 	call	0xd46	; 0xd46 <ili9341_pushcolour>
    1ba8:	08 94       	sec
    1baa:	e1 08       	sbc	r14, r1
    1bac:	f1 08       	sbc	r15, r1
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
		}
		line = pgm_read_byte(c_21+(c*7)+i);
		for (int j = 0; j<5; j++) 
    1bae:	e1 14       	cp	r14, r1
    1bb0:	f1 04       	cpc	r15, r1
    1bb2:	11 f0       	breq	.+4      	; 0x1bb8 <drawchar_21+0x11a>
			{
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
    1bb4:	cc 0c       	add	r12, r12
    1bb6:	e2 cf       	rjmp	.-60     	; 0x1b7c <drawchar_21+0xde>
    1bb8:	0f 5f       	subi	r16, 0xFF	; 255
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255

void drawchar_21(int x, int y, unsigned char c,uint16_t colour) 
{
	unsigned char line;
	ili9341_setaddress(x, y, x+14, y+20);
	for (int8_t i=0; i<7; i++ ) 
    1bbc:	0a 15       	cp	r16, r10
    1bbe:	1b 05       	cpc	r17, r11
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <drawchar_21+0x126>
    1bc2:	8b cf       	rjmp	.-234    	; 0x1ada <drawchar_21+0x3c>
				ili9341_pushcolour(RED);			
			}
			line <<= 1;
		}
	}
}
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	df 90       	pop	r13
    1bd2:	cf 90       	pop	r12
    1bd4:	bf 90       	pop	r11
    1bd6:	af 90       	pop	r10
    1bd8:	9f 90       	pop	r9
    1bda:	08 95       	ret

00001bdc <PrintVolt>:
		
}

//если <10, то выводятся прочерки 
PrintVolt(int x, int y, unsigned char voltage)
{
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	ec 01       	movw	r28, r24
    1bee:	7b 01       	movw	r14, r22
    1bf0:	c4 2e       	mov	r12, r20
	//перменные напряжения, две цифры до запятой и одна после. Если цифры до запятой 0 и 0, то выводятся прочерки
	unsigned char v_a=0, v_b=0, v_c=3;
	v_a=voltage/100;
    1bf2:	84 2f       	mov	r24, r20
    1bf4:	64 e6       	ldi	r22, 0x64	; 100
    1bf6:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	89 2f       	mov	r24, r25
	v_b=(voltage%100)/10;
    1bfe:	6a e0       	ldi	r22, 0x0A	; 10
    1c00:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    1c04:	18 2f       	mov	r17, r24
	v_c=voltage%10;
	if(v_a==0 && v_b == 0)
    1c06:	44 23       	and	r20, r20
    1c08:	39 f5       	brne	.+78     	; 0x1c58 <PrintVolt+0x7c>
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f5       	brne	.+66     	; 0x1c50 <PrintVolt+0x74>
	{
		drawchar_21(x, y, 16, PINK);
    1c0e:	ce 01       	movw	r24, r28
    1c10:	b7 01       	movw	r22, r14
    1c12:	40 e1       	ldi	r20, 0x10	; 16
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	38 eb       	ldi	r19, 0xB8	; 184
    1c18:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+18, y, 16, PINK);
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	42 96       	adiw	r24, 0x12	; 18
    1c20:	b7 01       	movw	r22, r14
    1c22:	40 e1       	ldi	r20, 0x10	; 16
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	38 eb       	ldi	r19, 0xB8	; 184
    1c28:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		ili9341_fillrect_3(x+36, y+15, 2, 2, PINK);
    1c2c:	b7 01       	movw	r22, r14
    1c2e:	61 5f       	subi	r22, 0xF1	; 241
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	ce 01       	movw	r24, r28
    1c34:	84 96       	adiw	r24, 0x24	; 36
    1c36:	42 e0       	ldi	r20, 0x02	; 2
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	22 e0       	ldi	r18, 0x02	; 2
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	00 e0       	ldi	r16, 0x00	; 0
    1c40:	18 eb       	ldi	r17, 0xB8	; 184
    1c42:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
		drawchar_21(x+45, y, 16, PINK);
    1c46:	ce 01       	movw	r24, r28
    1c48:	8d 96       	adiw	r24, 0x2d	; 45
    1c4a:	b7 01       	movw	r22, r14
    1c4c:	40 e1       	ldi	r20, 0x10	; 16
    1c4e:	27 c0       	rjmp	.+78     	; 0x1c9e <PrintVolt+0xc2>
	}
	else
	{
		if(v_a == 0)
		{
			drawchar_21(x, y, 17, PINK);
    1c50:	ce 01       	movw	r24, r28
    1c52:	b7 01       	movw	r22, r14
    1c54:	41 e1       	ldi	r20, 0x11	; 17
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <PrintVolt+0x80>
		}
		else
		{
			drawchar_21(x, y, v_a, PINK);
    1c58:	ce 01       	movw	r24, r28
    1c5a:	b7 01       	movw	r22, r14
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	38 eb       	ldi	r19, 0xB8	; 184
    1c60:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		}
		drawchar_21(x+18, y, v_b, PINK);
    1c64:	ce 01       	movw	r24, r28
    1c66:	42 96       	adiw	r24, 0x12	; 18
    1c68:	b7 01       	movw	r22, r14
    1c6a:	41 2f       	mov	r20, r17
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	38 eb       	ldi	r19, 0xB8	; 184
    1c70:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		ili9341_fillrect_3(x+36, y+15, 2, 2, PINK);
    1c74:	b7 01       	movw	r22, r14
    1c76:	61 5f       	subi	r22, 0xF1	; 241
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	84 96       	adiw	r24, 0x24	; 36
    1c7e:	42 e0       	ldi	r20, 0x02	; 2
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	22 e0       	ldi	r18, 0x02	; 2
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	00 e0       	ldi	r16, 0x00	; 0
    1c88:	18 eb       	ldi	r17, 0xB8	; 184
    1c8a:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
{
	//перменные напряжения, две цифры до запятой и одна после. Если цифры до запятой 0 и 0, то выводятся прочерки
	unsigned char v_a=0, v_b=0, v_c=3;
	v_a=voltage/100;
	v_b=(voltage%100)/10;
	v_c=voltage%10;
    1c8e:	8c 2d       	mov	r24, r12
    1c90:	6a e0       	ldi	r22, 0x0A	; 10
    1c92:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    1c96:	49 2f       	mov	r20, r25
		{
			drawchar_21(x, y, v_a, PINK);
		}
		drawchar_21(x+18, y, v_b, PINK);
		ili9341_fillrect_3(x+36, y+15, 2, 2, PINK);
		drawchar_21(x+45, y, v_c, PINK);	
    1c98:	ce 01       	movw	r24, r28
    1c9a:	8d 96       	adiw	r24, 0x2d	; 45
    1c9c:	b7 01       	movw	r22, r14
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	38 eb       	ldi	r19, 0xB8	; 184
    1ca2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}

	ili9341_fillrect_3(x+63, y, 1, 3, PINK);
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	cf 96       	adiw	r24, 0x3f	; 63
    1caa:	b7 01       	movw	r22, r14
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	23 e0       	ldi	r18, 0x03	; 3
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	00 e0       	ldi	r16, 0x00	; 0
    1cb6:	18 eb       	ldi	r17, 0xB8	; 184
    1cb8:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
	ili9341_fillrect_3(x+66, y+9, 1, 3, PINK);
    1cbc:	59 e0       	ldi	r21, 0x09	; 9
    1cbe:	c5 2e       	mov	r12, r21
    1cc0:	d1 2c       	mov	r13, r1
    1cc2:	ce 0c       	add	r12, r14
    1cc4:	df 1c       	adc	r13, r15
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	8e 5b       	subi	r24, 0xBE	; 190
    1cca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ccc:	b6 01       	movw	r22, r12
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	23 e0       	ldi	r18, 0x03	; 3
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
	ili9341_drawpixel_3(x+69,y+18,PINK);
    1cda:	b7 01       	movw	r22, r14
    1cdc:	6e 5e       	subi	r22, 0xEE	; 238
    1cde:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	8b 5b       	subi	r24, 0xBB	; 187
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	58 eb       	ldi	r21, 0xB8	; 184
    1cea:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
	ili9341_fillrect_3(x+72, y+9, 1, 3, PINK);
    1cee:	ce 01       	movw	r24, r28
    1cf0:	88 5b       	subi	r24, 0xB8	; 184
    1cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf4:	b6 01       	movw	r22, r12
    1cf6:	41 e0       	ldi	r20, 0x01	; 1
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	23 e0       	ldi	r18, 0x03	; 3
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
	ili9341_fillrect_3(x+75, y, 1, 3, PINK);
    1d02:	ce 01       	movw	r24, r28
    1d04:	85 5b       	subi	r24, 0xB5	; 181
    1d06:	9f 4f       	sbci	r25, 0xFF	; 255
    1d08:	b7 01       	movw	r22, r14
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	23 e0       	ldi	r18, 0x03	; 3
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
}
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	ff 90       	pop	r15
    1d20:	ef 90       	pop	r14
    1d22:	df 90       	pop	r13
    1d24:	cf 90       	pop	r12
    1d26:	08 95       	ret

00001d28 <PrintOil>:
		}
	}
}

PrintOil(int x, int y, int tempOil)
{
    1d28:	af 92       	push	r10
    1d2a:	bf 92       	push	r11
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	6c 01       	movw	r12, r24
    1d3e:	7b 01       	movw	r14, r22
	//переменные температуры масла, три цифры. Первая цифра 0 не выводится, 1 как 1, 2 знак -, 3 все прочерки, 4 знак <
	unsigned char tm_a, tm_b, tm_c, vrem;
	if(tempOil<40) 
    1d40:	48 32       	cpi	r20, 0x28	; 40
    1d42:	51 05       	cpc	r21, r1
    1d44:	bc f1       	brlt	.+110    	; 0x1db4 <PrintOil+0x8c>
		tm_a = 4;
		tm_b = 4;
		tm_c = 0;
	}
	else
	if(tempOil>39 && tempOil < 171)
    1d46:	ca 01       	movw	r24, r20
    1d48:	88 97       	sbiw	r24, 0x28	; 40
    1d4a:	83 38       	cpi	r24, 0x83	; 131
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	f8 f4       	brcc	.+62     	; 0x1d8e <PrintOil+0x66>
	{
		tm_a = tempOil/100;
		vrem = tempOil;
		tm_b = (vrem%100)/10;
    1d50:	84 2f       	mov	r24, r20
    1d52:	64 e6       	ldi	r22, 0x64	; 100
    1d54:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    1d58:	89 2f       	mov	r24, r25
    1d5a:	2a e0       	ldi	r18, 0x0A	; 10
    1d5c:	62 2f       	mov	r22, r18
    1d5e:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    1d62:	a8 2e       	mov	r10, r24
		tm_c = vrem%10;
    1d64:	84 2f       	mov	r24, r20
    1d66:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    1d6a:	b9 2e       	mov	r11, r25
		tm_c = 0;
	}
	else
	if(tempOil>39 && tempOil < 171)
	{
		tm_a = tempOil/100;
    1d6c:	ca 01       	movw	r24, r20
    1d6e:	64 e6       	ldi	r22, 0x64	; 100
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    1d76:	86 01       	movw	r16, r12
    1d78:	0e 5e       	subi	r16, 0xEE	; 238
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	e6 01       	movw	r28, r12
    1d7e:	a4 96       	adiw	r28, 0x24	; 36
		tm_b = (vrem%100)/10;
		tm_c = vrem%10;
	}
	else tm_a = 3;

	if(tm_a==0)
    1d80:	66 23       	and	r22, r22
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <PrintOil+0x5e>
    1d84:	ba c0       	rjmp	.+372    	; 0x1efa <PrintOil+0x1d2>
	{
		drawchar_21(x, y, 17, PINK);
    1d86:	c6 01       	movw	r24, r12
    1d88:	b7 01       	movw	r22, r14
    1d8a:	41 e1       	ldi	r20, 0x11	; 17
    1d8c:	b9 c0       	rjmp	.+370    	; 0x1f00 <PrintOil+0x1d8>
		drawchar_21(x+18, y, tm_b, PINK);
		drawchar_21(x+36, y, tm_c, PINK);
	}
	if(tm_a==3)
	{
		drawchar_21(x, y, 16, PINK);
    1d8e:	c6 01       	movw	r24, r12
    1d90:	40 e1       	ldi	r20, 0x10	; 16
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	38 eb       	ldi	r19, 0xB8	; 184
    1d96:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+18, y, 16, PINK);
    1d9a:	c6 01       	movw	r24, r12
    1d9c:	42 96       	adiw	r24, 0x12	; 18
    1d9e:	b7 01       	movw	r22, r14
    1da0:	40 e1       	ldi	r20, 0x10	; 16
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	38 eb       	ldi	r19, 0xB8	; 184
    1da6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+36, y, 16, PINK);
    1daa:	c6 01       	movw	r24, r12
    1dac:	84 96       	adiw	r24, 0x24	; 36
    1dae:	b7 01       	movw	r22, r14
    1db0:	40 e1       	ldi	r20, 0x10	; 16
    1db2:	55 c0       	rjmp	.+170    	; 0x1e5e <PrintOil+0x136>
	}
	if(tm_a==4)
	{
		ili9341_fillrect(x, y, 15, 21, RED);
    1db4:	4f e0       	ldi	r20, 0x0F	; 15
    1db6:	50 e0       	ldi	r21, 0x00	; 0
    1db8:	25 e1       	ldi	r18, 0x15	; 21
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	00 e0       	ldi	r16, 0x00	; 0
    1dbe:	10 e0       	ldi	r17, 0x00	; 0
    1dc0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
		ili9341_drawpixel_3(x+12,y,PINK);
    1dc4:	7c e0       	ldi	r23, 0x0C	; 12
    1dc6:	a7 2e       	mov	r10, r23
    1dc8:	b1 2c       	mov	r11, r1
    1dca:	ac 0c       	add	r10, r12
    1dcc:	bd 1c       	adc	r11, r13
    1dce:	c5 01       	movw	r24, r10
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	58 eb       	ldi	r21, 0xB8	; 184
    1dd6:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
		ili9341_drawpixel_3(x+9,y+3,PINK);
    1dda:	86 01       	movw	r16, r12
    1ddc:	07 5f       	subi	r16, 0xF7	; 247
    1dde:	1f 4f       	sbci	r17, 0xFF	; 255
    1de0:	b7 01       	movw	r22, r14
    1de2:	6d 5f       	subi	r22, 0xFD	; 253
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	c8 01       	movw	r24, r16
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	58 eb       	ldi	r21, 0xB8	; 184
    1dec:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
		ili9341_drawpixel_3(x+6,y+6,PINK);
    1df0:	e6 01       	movw	r28, r12
    1df2:	26 96       	adiw	r28, 0x06	; 6
    1df4:	b7 01       	movw	r22, r14
    1df6:	6a 5f       	subi	r22, 0xFA	; 250
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	58 eb       	ldi	r21, 0xB8	; 184
    1e00:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
		ili9341_drawpixel_3(x+3,y+9,PINK);
    1e04:	b7 01       	movw	r22, r14
    1e06:	67 5f       	subi	r22, 0xF7	; 247
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	c6 01       	movw	r24, r12
    1e0c:	03 96       	adiw	r24, 0x03	; 3
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	58 eb       	ldi	r21, 0xB8	; 184
    1e12:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
		ili9341_drawpixel_3(x+6,y+12,PINK);
    1e16:	b7 01       	movw	r22, r14
    1e18:	64 5f       	subi	r22, 0xF4	; 244
    1e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	58 eb       	ldi	r21, 0xB8	; 184
    1e22:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
		ili9341_drawpixel_3(x+9,y+15,PINK);
    1e26:	b7 01       	movw	r22, r14
    1e28:	61 5f       	subi	r22, 0xF1	; 241
    1e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	58 eb       	ldi	r21, 0xB8	; 184
    1e32:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
		ili9341_drawpixel_3(x+12,y+18,PINK);
    1e36:	b7 01       	movw	r22, r14
    1e38:	6e 5e       	subi	r22, 0xEE	; 238
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	c5 01       	movw	r24, r10
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	58 eb       	ldi	r21, 0xB8	; 184
    1e42:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
		

		drawchar_21(x+18, y, tm_b, PINK);
    1e46:	c6 01       	movw	r24, r12
    1e48:	42 96       	adiw	r24, 0x12	; 18
    1e4a:	b7 01       	movw	r22, r14
    1e4c:	44 e0       	ldi	r20, 0x04	; 4
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	38 eb       	ldi	r19, 0xB8	; 184
    1e52:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+36, y, tm_c, PINK);
    1e56:	c6 01       	movw	r24, r12
    1e58:	84 96       	adiw	r24, 0x24	; 36
    1e5a:	b7 01       	movw	r22, r14
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	38 eb       	ldi	r19, 0xB8	; 184
    1e62:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
	
	ili9341_fillrect_3(x+54, y, 2, 2, PINK);
    1e66:	c6 01       	movw	r24, r12
    1e68:	c6 96       	adiw	r24, 0x36	; 54
    1e6a:	b7 01       	movw	r22, r14
    1e6c:	42 e0       	ldi	r20, 0x02	; 2
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	22 e0       	ldi	r18, 0x02	; 2
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	00 e0       	ldi	r16, 0x00	; 0
    1e76:	18 eb       	ldi	r17, 0xB8	; 184
    1e78:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
	
	ili9341_fillrect_3(x+61, y+3, 1, 5, PINK);
    1e7c:	63 e0       	ldi	r22, 0x03	; 3
    1e7e:	a6 2e       	mov	r10, r22
    1e80:	b1 2c       	mov	r11, r1
    1e82:	ae 0c       	add	r10, r14
    1e84:	bf 1c       	adc	r11, r15
    1e86:	c6 01       	movw	r24, r12
    1e88:	cd 96       	adiw	r24, 0x3d	; 61
    1e8a:	b5 01       	movw	r22, r10
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	25 e0       	ldi	r18, 0x05	; 5
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
	ili9341_fillrect_3(x+64, y, 3, 1, PINK);
    1e98:	e6 01       	movw	r28, r12
    1e9a:	c0 5c       	subi	r28, 0xC0	; 192
    1e9c:	df 4f       	sbci	r29, 0xFF	; 255
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	43 e0       	ldi	r20, 0x03	; 3
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	21 e0       	ldi	r18, 0x01	; 1
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
	ili9341_fillrect_3(x+64, y+18, 3, 1, PINK);
    1eae:	b7 01       	movw	r22, r14
    1eb0:	6e 5e       	subi	r22, 0xEE	; 238
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	43 e0       	ldi	r20, 0x03	; 3
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
	ili9341_drawpixel_3(x+73,y+3,PINK);
    1ec2:	e6 01       	movw	r28, r12
    1ec4:	c7 5b       	subi	r28, 0xB7	; 183
    1ec6:	df 4f       	sbci	r29, 0xFF	; 255
    1ec8:	ce 01       	movw	r24, r28
    1eca:	b5 01       	movw	r22, r10
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	58 eb       	ldi	r21, 0xB8	; 184
    1ed0:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
	ili9341_drawpixel_3(x+73,y+15,PINK);
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	61 5f       	subi	r22, 0xF1	; 241
    1ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eda:	ce 01       	movw	r24, r28
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	58 eb       	ldi	r21, 0xB8	; 184
    1ee0:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
		
}
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	ff 90       	pop	r15
    1eee:	ef 90       	pop	r14
    1ef0:	df 90       	pop	r13
    1ef2:	cf 90       	pop	r12
    1ef4:	bf 90       	pop	r11
    1ef6:	af 90       	pop	r10
    1ef8:	08 95       	ret
		drawchar_21(x+18, y, tm_b, PINK);
		drawchar_21(x+36, y, tm_c, PINK);
	}
	if(tm_a==1)
	{
		drawchar_21(x, y, tm_a, PINK);
    1efa:	c6 01       	movw	r24, r12
    1efc:	b7 01       	movw	r22, r14
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	38 eb       	ldi	r19, 0xB8	; 184
    1f04:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+18, y, tm_b, PINK);
    1f08:	c8 01       	movw	r24, r16
    1f0a:	b7 01       	movw	r22, r14
    1f0c:	4a 2d       	mov	r20, r10
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	38 eb       	ldi	r19, 0xB8	; 184
    1f12:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+36, y, tm_c, PINK);
    1f16:	ce 01       	movw	r24, r28
    1f18:	b7 01       	movw	r22, r14
    1f1a:	4b 2d       	mov	r20, r11
    1f1c:	a0 cf       	rjmp	.-192    	; 0x1e5e <PrintOil+0x136>

00001f1e <Printl100km>:
		}		
	}
}

Printl100km(int x, int y)
{
    1f1e:	6f 92       	push	r6
    1f20:	7f 92       	push	r7
    1f22:	8f 92       	push	r8
    1f24:	9f 92       	push	r9
    1f26:	af 92       	push	r10
    1f28:	bf 92       	push	r11
    1f2a:	cf 92       	push	r12
    1f2c:	df 92       	push	r13
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	5c 01       	movw	r10, r24
    1f3c:	6b 01       	movw	r12, r22
	ili9341_fillrect(x, y, 110, 50, RED);
    1f3e:	4e e6       	ldi	r20, 0x6E	; 110
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	22 e3       	ldi	r18, 0x32	; 50
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	00 e0       	ldi	r16, 0x00	; 0
    1f48:	10 e0       	ldi	r17, 0x00	; 0
    1f4a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	if(modeLcd == 0) {
    1f4e:	80 91 a0 01 	lds	r24, 0x01A0
    1f52:	88 23       	and	r24, r24
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <Printl100km+0x3a>
    1f56:	4c c0       	rjmp	.+152    	; 0x1ff0 <Printl100km+0xd2>
		drawchar_21(x+39, y, 10, PINK);
    1f58:	c5 01       	movw	r24, r10
    1f5a:	87 96       	adiw	r24, 0x27	; 39
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	4a e0       	ldi	r20, 0x0A	; 10
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	38 eb       	ldi	r19, 0xB8	; 184
    1f64:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y, 11, PINK);	
    1f68:	85 01       	movw	r16, r10
    1f6a:	0a 5c       	subi	r16, 0xCA	; 202
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	c8 01       	movw	r24, r16
    1f70:	b6 01       	movw	r22, r12
    1f72:	4b e0       	ldi	r20, 0x0B	; 11
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	38 eb       	ldi	r19, 0xB8	; 184
    1f78:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+20, y+22, 1, PINK);
    1f7c:	e6 01       	movw	r28, r12
    1f7e:	66 96       	adiw	r28, 0x16	; 22
    1f80:	c5 01       	movw	r24, r10
    1f82:	44 96       	adiw	r24, 0x14	; 20
    1f84:	be 01       	movw	r22, r28
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	38 eb       	ldi	r19, 0xB8	; 184
    1f8c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+11, y+22, 13, PINK);
    1f90:	c5 01       	movw	r24, r10
    1f92:	0b 96       	adiw	r24, 0x0b	; 11
    1f94:	be 01       	movw	r22, r28
    1f96:	4d e0       	ldi	r20, 0x0D	; 13
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	38 eb       	ldi	r19, 0xB8	; 184
    1f9c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x, y+22, 12, PINK);	
    1fa0:	c5 01       	movw	r24, r10
    1fa2:	be 01       	movw	r22, r28
    1fa4:	4c e0       	ldi	r20, 0x0C	; 12
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	38 eb       	ldi	r19, 0xB8	; 184
    1faa:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+37, y+22, 0, PINK);
    1fae:	c5 01       	movw	r24, r10
    1fb0:	85 96       	adiw	r24, 0x25	; 37
    1fb2:	be 01       	movw	r22, r28
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	38 eb       	ldi	r19, 0xB8	; 184
    1fba:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y+22, 0, PINK);
    1fbe:	c8 01       	movw	r24, r16
    1fc0:	be 01       	movw	r22, r28
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	38 eb       	ldi	r19, 0xB8	; 184
    1fc8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+71, y+22, 14, PINK);
    1fcc:	c5 01       	movw	r24, r10
    1fce:	89 5b       	subi	r24, 0xB9	; 185
    1fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd2:	be 01       	movw	r22, r28
    1fd4:	4e e0       	ldi	r20, 0x0E	; 14
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	38 eb       	ldi	r19, 0xB8	; 184
    1fda:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+88, y+22, 15, PINK);
    1fde:	c5 01       	movw	r24, r10
    1fe0:	88 5a       	subi	r24, 0xA8	; 168
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	be 01       	movw	r22, r28
    1fe6:	4f e0       	ldi	r20, 0x0F	; 15
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	38 eb       	ldi	r19, 0xB8	; 184
    1fec:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
	x+=20;
    1ff0:	a4 e1       	ldi	r26, 0x14	; 20
    1ff2:	ea 2e       	mov	r14, r26
    1ff4:	f1 2c       	mov	r15, r1
    1ff6:	ea 0c       	add	r14, r10
    1ff8:	fb 1c       	adc	r15, r11
	if(modeLcd == 1) {
    1ffa:	80 91 a0 01 	lds	r24, 0x01A0
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	49 f5       	brne	.+82     	; 0x2054 <Printl100km+0x136>
		drawchar_21(x, y, 18, PINK);
    2002:	c7 01       	movw	r24, r14
    2004:	b6 01       	movw	r22, r12
    2006:	42 e1       	ldi	r20, 0x12	; 18
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	38 eb       	ldi	r19, 0xB8	; 184
    200c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+17, y, 19, PINK);	
    2010:	c5 01       	movw	r24, r10
    2012:	85 96       	adiw	r24, 0x25	; 37
    2014:	b6 01       	movw	r22, r12
    2016:	43 e1       	ldi	r20, 0x13	; 19
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	38 eb       	ldi	r19, 0xB8	; 184
    201c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+34, y, 20, PINK);
    2020:	c5 01       	movw	r24, r10
    2022:	c6 96       	adiw	r24, 0x36	; 54
    2024:	b6 01       	movw	r22, r12
    2026:	44 e1       	ldi	r20, 0x14	; 20
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	38 eb       	ldi	r19, 0xB8	; 184
    202c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+37, y+22, 15, PINK);	
    2030:	e6 01       	movw	r28, r12
    2032:	66 96       	adiw	r28, 0x16	; 22
    2034:	c5 01       	movw	r24, r10
    2036:	c9 96       	adiw	r24, 0x39	; 57
    2038:	be 01       	movw	r22, r28
    203a:	4f e0       	ldi	r20, 0x0F	; 15
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	38 eb       	ldi	r19, 0xB8	; 184
    2040:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y+22, 21, PINK);
    2044:	c7 01       	movw	r24, r14
    2046:	c6 96       	adiw	r24, 0x36	; 54
    2048:	be 01       	movw	r22, r28
    204a:	45 e1       	ldi	r20, 0x15	; 21
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	38 eb       	ldi	r19, 0xB8	; 184
    2050:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
	if(modeLcd == 2) {
    2054:	80 91 a0 01 	lds	r24, 0x01A0
    2058:	82 30       	cpi	r24, 0x02	; 2
    205a:	d1 f4       	brne	.+52     	; 0x2090 <Printl100km+0x172>
		drawchar_21(x+20, y+22, 22, PINK);
    205c:	e6 01       	movw	r28, r12
    205e:	66 96       	adiw	r28, 0x16	; 22
    2060:	c7 01       	movw	r24, r14
    2062:	44 96       	adiw	r24, 0x14	; 20
    2064:	be 01       	movw	r22, r28
    2066:	46 e1       	ldi	r20, 0x16	; 22
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	38 eb       	ldi	r19, 0xB8	; 184
    206c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+37, y+22, 33, PINK);
    2070:	c7 01       	movw	r24, r14
    2072:	85 96       	adiw	r24, 0x25	; 37
    2074:	be 01       	movw	r22, r28
    2076:	41 e2       	ldi	r20, 0x21	; 33
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	38 eb       	ldi	r19, 0xB8	; 184
    207c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y+22, 23, PINK);
    2080:	c7 01       	movw	r24, r14
    2082:	c6 96       	adiw	r24, 0x36	; 54
    2084:	be 01       	movw	r22, r28
    2086:	47 e1       	ldi	r20, 0x17	; 23
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	38 eb       	ldi	r19, 0xB8	; 184
    208c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
	if(modeLcd == 3) {
    2090:	80 91 a0 01 	lds	r24, 0x01A0
    2094:	83 30       	cpi	r24, 0x03	; 3
    2096:	d1 f4       	brne	.+52     	; 0x20cc <Printl100km+0x1ae>
		drawchar_21(x+20, y+22, 24, PINK);
    2098:	e6 01       	movw	r28, r12
    209a:	66 96       	adiw	r28, 0x16	; 22
    209c:	c7 01       	movw	r24, r14
    209e:	44 96       	adiw	r24, 0x14	; 20
    20a0:	be 01       	movw	r22, r28
    20a2:	48 e1       	ldi	r20, 0x18	; 24
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	38 eb       	ldi	r19, 0xB8	; 184
    20a8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+37, y+22, 33, PINK);
    20ac:	c7 01       	movw	r24, r14
    20ae:	85 96       	adiw	r24, 0x25	; 37
    20b0:	be 01       	movw	r22, r28
    20b2:	41 e2       	ldi	r20, 0x21	; 33
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	38 eb       	ldi	r19, 0xB8	; 184
    20b8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y+22, 25, PINK);
    20bc:	c7 01       	movw	r24, r14
    20be:	c6 96       	adiw	r24, 0x36	; 54
    20c0:	be 01       	movw	r22, r28
    20c2:	49 e1       	ldi	r20, 0x19	; 25
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	38 eb       	ldi	r19, 0xB8	; 184
    20c8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
	if(modeLcd == 4) {
    20cc:	80 91 a0 01 	lds	r24, 0x01A0
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	d1 f4       	brne	.+52     	; 0x2108 <Printl100km+0x1ea>
		drawchar_21(x+20, y+22, 25, PINK);
    20d4:	e6 01       	movw	r28, r12
    20d6:	66 96       	adiw	r28, 0x16	; 22
    20d8:	c7 01       	movw	r24, r14
    20da:	44 96       	adiw	r24, 0x14	; 20
    20dc:	be 01       	movw	r22, r28
    20de:	49 e1       	ldi	r20, 0x19	; 25
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	38 eb       	ldi	r19, 0xB8	; 184
    20e4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+37, y+22, 26, PINK);
    20e8:	c7 01       	movw	r24, r14
    20ea:	85 96       	adiw	r24, 0x25	; 37
    20ec:	be 01       	movw	r22, r28
    20ee:	4a e1       	ldi	r20, 0x1A	; 26
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	38 eb       	ldi	r19, 0xB8	; 184
    20f4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y+22, 26, PINK);
    20f8:	c7 01       	movw	r24, r14
    20fa:	c6 96       	adiw	r24, 0x36	; 54
    20fc:	be 01       	movw	r22, r28
    20fe:	4a e1       	ldi	r20, 0x1A	; 26
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	38 eb       	ldi	r19, 0xB8	; 184
    2104:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
	if(modeLcd == 5) {
    2108:	80 91 a0 01 	lds	r24, 0x01A0
    210c:	85 30       	cpi	r24, 0x05	; 5
    210e:	d1 f4       	brne	.+52     	; 0x2144 <Printl100km+0x226>
		drawchar_21(x+20, y+22, 25, PINK);
    2110:	e6 01       	movw	r28, r12
    2112:	66 96       	adiw	r28, 0x16	; 22
    2114:	c7 01       	movw	r24, r14
    2116:	44 96       	adiw	r24, 0x14	; 20
    2118:	be 01       	movw	r22, r28
    211a:	49 e1       	ldi	r20, 0x19	; 25
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	38 eb       	ldi	r19, 0xB8	; 184
    2120:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+37, y+22, 27, PINK);
    2124:	c7 01       	movw	r24, r14
    2126:	85 96       	adiw	r24, 0x25	; 37
    2128:	be 01       	movw	r22, r28
    212a:	4b e1       	ldi	r20, 0x1B	; 27
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	38 eb       	ldi	r19, 0xB8	; 184
    2130:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y+22, 15, PINK);
    2134:	c7 01       	movw	r24, r14
    2136:	c6 96       	adiw	r24, 0x36	; 54
    2138:	be 01       	movw	r22, r28
    213a:	4f e0       	ldi	r20, 0x0F	; 15
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	38 eb       	ldi	r19, 0xB8	; 184
    2140:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
	if(modeLcd == 6) {
    2144:	80 91 a0 01 	lds	r24, 0x01A0
    2148:	86 30       	cpi	r24, 0x06	; 6
    214a:	49 f5       	brne	.+82     	; 0x219e <Printl100km+0x280>
		drawchar_21(x, y, 28, PINK);
    214c:	c7 01       	movw	r24, r14
    214e:	b6 01       	movw	r22, r12
    2150:	4c e1       	ldi	r20, 0x1C	; 28
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	38 eb       	ldi	r19, 0xB8	; 184
    2156:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+17, y, 29, PINK);	
    215a:	c7 01       	movw	r24, r14
    215c:	41 96       	adiw	r24, 0x11	; 17
    215e:	b6 01       	movw	r22, r12
    2160:	4d e1       	ldi	r20, 0x1D	; 29
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	38 eb       	ldi	r19, 0xB8	; 184
    2166:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+34, y, 25, PINK);
    216a:	c7 01       	movw	r24, r14
    216c:	82 96       	adiw	r24, 0x22	; 34
    216e:	b6 01       	movw	r22, r12
    2170:	49 e1       	ldi	r20, 0x19	; 25
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	38 eb       	ldi	r19, 0xB8	; 184
    2176:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+37, y+22, 27, PINK);	
    217a:	e6 01       	movw	r28, r12
    217c:	66 96       	adiw	r28, 0x16	; 22
    217e:	c7 01       	movw	r24, r14
    2180:	85 96       	adiw	r24, 0x25	; 37
    2182:	be 01       	movw	r22, r28
    2184:	4b e1       	ldi	r20, 0x1B	; 27
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	38 eb       	ldi	r19, 0xB8	; 184
    218a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y+22, 33, PINK);
    218e:	c7 01       	movw	r24, r14
    2190:	c6 96       	adiw	r24, 0x36	; 54
    2192:	be 01       	movw	r22, r28
    2194:	41 e2       	ldi	r20, 0x21	; 33
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	38 eb       	ldi	r19, 0xB8	; 184
    219a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
	if(modeLcd == 7) {
    219e:	80 91 a0 01 	lds	r24, 0x01A0
    21a2:	87 30       	cpi	r24, 0x07	; 7
    21a4:	d1 f4       	brne	.+52     	; 0x21da <Printl100km+0x2bc>
		drawchar_21(x+20, y+22, 28, PINK);
    21a6:	e6 01       	movw	r28, r12
    21a8:	66 96       	adiw	r28, 0x16	; 22
    21aa:	c7 01       	movw	r24, r14
    21ac:	44 96       	adiw	r24, 0x14	; 20
    21ae:	be 01       	movw	r22, r28
    21b0:	4c e1       	ldi	r20, 0x1C	; 28
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	38 eb       	ldi	r19, 0xB8	; 184
    21b6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+37, y+22, 13, PINK);
    21ba:	c7 01       	movw	r24, r14
    21bc:	85 96       	adiw	r24, 0x25	; 37
    21be:	be 01       	movw	r22, r28
    21c0:	4d e0       	ldi	r20, 0x0D	; 13
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	38 eb       	ldi	r19, 0xB8	; 184
    21c6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y+22, 31, PINK);
    21ca:	c7 01       	movw	r24, r14
    21cc:	c6 96       	adiw	r24, 0x36	; 54
    21ce:	be 01       	movw	r22, r28
    21d0:	4f e1       	ldi	r20, 0x1F	; 31
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	38 eb       	ldi	r19, 0xB8	; 184
    21d6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
	if(modeLcd == 8) {
    21da:	80 91 a0 01 	lds	r24, 0x01A0
    21de:	88 30       	cpi	r24, 0x08	; 8
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <Printl100km+0x2c6>
    21e2:	4b c0       	rjmp	.+150    	; 0x227a <Printl100km+0x35c>
		drawchar_21(x+20, y+22, 28, PINK);
    21e4:	e6 01       	movw	r28, r12
    21e6:	66 96       	adiw	r28, 0x16	; 22
    21e8:	c7 01       	movw	r24, r14
    21ea:	44 96       	adiw	r24, 0x14	; 20
    21ec:	be 01       	movw	r22, r28
    21ee:	4c e1       	ldi	r20, 0x1C	; 28
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	38 eb       	ldi	r19, 0xB8	; 184
    21f4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>

		ili9341_fillrect_3(x+54, y+22, 2, 2, PINK);
    21f8:	c7 01       	movw	r24, r14
    21fa:	c6 96       	adiw	r24, 0x36	; 54
    21fc:	be 01       	movw	r22, r28
    21fe:	42 e0       	ldi	r20, 0x02	; 2
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	22 e0       	ldi	r18, 0x02	; 2
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	00 e0       	ldi	r16, 0x00	; 0
    2208:	18 eb       	ldi	r17, 0xB8	; 184
    220a:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
	
		ili9341_fillrect_3(x+61, y+25, 1, 5, PINK);
    220e:	f9 e1       	ldi	r31, 0x19	; 25
    2210:	8f 2e       	mov	r8, r31
    2212:	91 2c       	mov	r9, r1
    2214:	8c 0c       	add	r8, r12
    2216:	9d 1c       	adc	r9, r13
    2218:	c7 01       	movw	r24, r14
    221a:	cd 96       	adiw	r24, 0x3d	; 61
    221c:	b4 01       	movw	r22, r8
    221e:	41 e0       	ldi	r20, 0x01	; 1
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	25 e0       	ldi	r18, 0x05	; 5
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
		ili9341_fillrect_3(x+64, y+22, 3, 1, PINK);
    222a:	e0 e4       	ldi	r30, 0x40	; 64
    222c:	ae 2e       	mov	r10, r30
    222e:	b1 2c       	mov	r11, r1
    2230:	ae 0c       	add	r10, r14
    2232:	bf 1c       	adc	r11, r15
    2234:	c5 01       	movw	r24, r10
    2236:	be 01       	movw	r22, r28
    2238:	43 e0       	ldi	r20, 0x03	; 3
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	21 e0       	ldi	r18, 0x01	; 1
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
		ili9341_fillrect_3(x+64, y+40, 3, 1, PINK);
    2244:	b6 01       	movw	r22, r12
    2246:	68 5d       	subi	r22, 0xD8	; 216
    2248:	7f 4f       	sbci	r23, 0xFF	; 255
    224a:	c5 01       	movw	r24, r10
    224c:	43 e0       	ldi	r20, 0x03	; 3
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	21 e0       	ldi	r18, 0x01	; 1
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	0e 94 b0 06 	call	0xd60	; 0xd60 <ili9341_fillrect_3>
		ili9341_drawpixel_3(x+73,y+25,PINK);
    2258:	e7 01       	movw	r28, r14
    225a:	c7 5b       	subi	r28, 0xB7	; 183
    225c:	df 4f       	sbci	r29, 0xFF	; 255
    225e:	ce 01       	movw	r24, r28
    2260:	b4 01       	movw	r22, r8
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	58 eb       	ldi	r21, 0xB8	; 184
    2266:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
		ili9341_drawpixel_3(x+73,y+37,PINK);
    226a:	b6 01       	movw	r22, r12
    226c:	6b 5d       	subi	r22, 0xDB	; 219
    226e:	7f 4f       	sbci	r23, 0xFF	; 255
    2270:	ce 01       	movw	r24, r28
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	58 eb       	ldi	r21, 0xB8	; 184
    2276:	0e 94 1b 07 	call	0xe36	; 0xe36 <ili9341_drawpixel_3>
	}
	if(modeLcd == 9) {
    227a:	80 91 a0 01 	lds	r24, 0x01A0
    227e:	89 30       	cpi	r24, 0x09	; 9
    2280:	d1 f4       	brne	.+52     	; 0x22b6 <Printl100km+0x398>
		drawchar_21(x+20, y+22, 32, PINK);
    2282:	e6 01       	movw	r28, r12
    2284:	66 96       	adiw	r28, 0x16	; 22
    2286:	c7 01       	movw	r24, r14
    2288:	44 96       	adiw	r24, 0x14	; 20
    228a:	be 01       	movw	r22, r28
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	38 eb       	ldi	r19, 0xB8	; 184
    2292:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+37, y+22, 31, PINK);
    2296:	c7 01       	movw	r24, r14
    2298:	85 96       	adiw	r24, 0x25	; 37
    229a:	be 01       	movw	r22, r28
    229c:	4f e1       	ldi	r20, 0x1F	; 31
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	38 eb       	ldi	r19, 0xB8	; 184
    22a2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
		drawchar_21(x+54, y+22, 21, PINK);
    22a6:	c7 01       	movw	r24, r14
    22a8:	c6 96       	adiw	r24, 0x36	; 54
    22aa:	be 01       	movw	r22, r28
    22ac:	45 e1       	ldi	r20, 0x15	; 21
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	38 eb       	ldi	r19, 0xB8	; 184
    22b2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <drawchar_21>
	}
}
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	cf 90       	pop	r12
    22c6:	bf 90       	pop	r11
    22c8:	af 90       	pop	r10
    22ca:	9f 90       	pop	r9
    22cc:	8f 90       	pop	r8
    22ce:	7f 90       	pop	r7
    22d0:	6f 90       	pop	r6
    22d2:	08 95       	ret

000022d4 <Error>:
}

void Error(void)
{

	for(int i = pred_err; i < 2; i++)
    22d4:	80 91 a5 01 	lds	r24, 0x01A5
    22d8:	90 e0       	ldi	r25, 0x00	; 0
	{
		switch(i)
		{
			case 0:
			{
				if(lowLevelAntifreezePicture)
    22da:	30 91 87 01 	lds	r19, 0x0187
				}
				break;
			}
			case 1:
			{
				if(lowBrakeFluidPicture)
    22de:	20 91 89 01 	lds	r18, 0x0189
}

void Error(void)
{

	for(int i = pred_err; i < 2; i++)
    22e2:	20 c0       	rjmp	.+64     	; 0x2324 <Error+0x50>
	{
		switch(i)
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	91 05       	cpc	r25, r1
    22e8:	81 f0       	breq	.+32     	; 0x230a <Error+0x36>
		{
			case 0:
			{
				if(lowLevelAntifreezePicture)
    22ea:	33 23       	and	r19, r19
    22ec:	d1 f0       	breq	.+52     	; 0x2322 <Error+0x4e>
				{
					if(viv_err!=0)
    22ee:	80 91 6a 00 	lds	r24, 0x006A
    22f2:	88 23       	and	r24, r24
    22f4:	21 f0       	breq	.+8      	; 0x22fe <Error+0x2a>
					PrintError(kar_TEMP);
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	93 e0       	ldi	r25, 0x03	; 3
    22fa:	0e 94 ee 07 	call	0xfdc	; 0xfdc <PrintError>
					viv_err = 0;
    22fe:	10 92 6a 00 	sts	0x006A, r1
					pred_err=1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	80 93 a5 01 	sts	0x01A5, r24
					return;
    2308:	08 95       	ret
				}
				break;
			}
			case 1:
			{
				if(lowBrakeFluidPicture)
    230a:	22 23       	and	r18, r18
    230c:	51 f0       	breq	.+20     	; 0x2322 <Error+0x4e>
				{
					if(viv_err!=1)
    230e:	80 91 6a 00 	lds	r24, 0x006A
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	21 f0       	breq	.+8      	; 0x231e <Error+0x4a>
					PrintError(kar_TORM);
    2316:	83 e6       	ldi	r24, 0x63	; 99
    2318:	93 e0       	ldi	r25, 0x03	; 3
    231a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <PrintError>
					viv_err = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	1b c0       	rjmp	.+54     	; 0x2358 <Error+0x84>
}

void Error(void)
{

	for(int i = pred_err; i < 2; i++)
    2322:	01 96       	adiw	r24, 0x01	; 1
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	91 05       	cpc	r25, r1
    2328:	ec f2       	brlt	.-70     	; 0x22e4 <Error+0x10>
				}
				break;
			}			
		}
	}
	if(!lowLevelAntifreezePicture && !lowBrakeFluidPicture && viv_err !=55)
    232a:	33 23       	and	r19, r19
    232c:	b9 f4       	brne	.+46     	; 0x235c <Error+0x88>
    232e:	22 23       	and	r18, r18
    2330:	a9 f4       	brne	.+42     	; 0x235c <Error+0x88>
    2332:	80 91 6a 00 	lds	r24, 0x006A
    2336:	87 33       	cpi	r24, 0x37	; 55
    2338:	89 f0       	breq	.+34     	; 0x235c <Error+0x88>
	{
	DelError();
    233a:	0e 94 c1 07 	call	0xf82	; 0xf82 <DelError>
	PrintTemp(20, 220);
    233e:	84 e1       	ldi	r24, 0x14	; 20
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	6c ed       	ldi	r22, 0xDC	; 220
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	0e 94 06 0c 	call	0x180c	; 0x180c <PrintTemp>
	//PrintRas(10, 137);
	Printl100km(130, 124);
    234a:	82 e8       	ldi	r24, 0x82	; 130
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	6c e7       	ldi	r22, 0x7C	; 124
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Printl100km>
	viv_err=55;
    2356:	87 e3       	ldi	r24, 0x37	; 55
    2358:	80 93 6a 00 	sts	0x006A, r24
	}
pred_err = 0;
    235c:	10 92 a5 01 	sts	0x01A5, r1
    2360:	08 95       	ret

00002362 <PrintAkk>:
		}
	}
}

PrintAkk(int x, int y)
{
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	7c 01       	movw	r14, r24
    2374:	6b 01       	movw	r12, r22
	//корпус
	ili9341_fillrect(x, y + 2, 28, 2, PINK);
    2376:	6e 5f       	subi	r22, 0xFE	; 254
    2378:	7f 4f       	sbci	r23, 0xFF	; 255
    237a:	4c e1       	ldi	r20, 0x1C	; 28
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	22 e0       	ldi	r18, 0x02	; 2
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	00 e0       	ldi	r16, 0x00	; 0
    2384:	18 eb       	ldi	r17, 0xB8	; 184
    2386:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x, y+17, 28, 2, PINK);
    238a:	b6 01       	movw	r22, r12
    238c:	6f 5e       	subi	r22, 0xEF	; 239
    238e:	7f 4f       	sbci	r23, 0xFF	; 255
    2390:	c7 01       	movw	r24, r14
    2392:	4c e1       	ldi	r20, 0x1C	; 28
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	22 e0       	ldi	r18, 0x02	; 2
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x, y + 4, 2, 13, PINK);
    239e:	e6 01       	movw	r28, r12
    23a0:	24 96       	adiw	r28, 0x04	; 4
    23a2:	c7 01       	movw	r24, r14
    23a4:	be 01       	movw	r22, r28
    23a6:	42 e0       	ldi	r20, 0x02	; 2
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	2d e0       	ldi	r18, 0x0D	; 13
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x + 26, y + 4, 2, 13, PINK);
    23b2:	c7 01       	movw	r24, r14
    23b4:	4a 96       	adiw	r24, 0x1a	; 26
    23b6:	be 01       	movw	r22, r28
    23b8:	42 e0       	ldi	r20, 0x02	; 2
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	2d e0       	ldi	r18, 0x0D	; 13
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	//клеммы
	ili9341_fillrect(x+4, y, 4, 2, PINK);
    23c4:	c7 01       	movw	r24, r14
    23c6:	04 96       	adiw	r24, 0x04	; 4
    23c8:	b6 01       	movw	r22, r12
    23ca:	44 e0       	ldi	r20, 0x04	; 4
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	22 e0       	ldi	r18, 0x02	; 2
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x+20, y, 4, 2, PINK);
    23d6:	c7 01       	movw	r24, r14
    23d8:	44 96       	adiw	r24, 0x14	; 20
    23da:	b6 01       	movw	r22, r12
    23dc:	44 e0       	ldi	r20, 0x04	; 4
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	22 e0       	ldi	r18, 0x02	; 2
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	//минус
	ili9341_fillrect(x+3, y+7, 6, 2, PINK);
    23e8:	e6 01       	movw	r28, r12
    23ea:	27 96       	adiw	r28, 0x07	; 7
    23ec:	c7 01       	movw	r24, r14
    23ee:	03 96       	adiw	r24, 0x03	; 3
    23f0:	be 01       	movw	r22, r28
    23f2:	46 e0       	ldi	r20, 0x06	; 6
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	22 e0       	ldi	r18, 0x02	; 2
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	//плюс
	ili9341_fillrect(x+19, y+7, 6, 2, PINK);
    23fe:	c7 01       	movw	r24, r14
    2400:	43 96       	adiw	r24, 0x13	; 19
    2402:	be 01       	movw	r22, r28
    2404:	46 e0       	ldi	r20, 0x06	; 6
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	22 e0       	ldi	r18, 0x02	; 2
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x+21, y+5, 2, 6, PINK);
    2410:	b6 01       	movw	r22, r12
    2412:	6b 5f       	subi	r22, 0xFB	; 251
    2414:	7f 4f       	sbci	r23, 0xFF	; 255
    2416:	c7 01       	movw	r24, r14
    2418:	45 96       	adiw	r24, 0x15	; 21
    241a:	42 e0       	ldi	r20, 0x02	; 2
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	26 e0       	ldi	r18, 0x06	; 6
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
}
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	cf 90       	pop	r12
    2436:	08 95       	ret

00002438 <PrintMasl>:

PrintMasl(int x, int y)
{
    2438:	2f 92       	push	r2
    243a:	3f 92       	push	r3
    243c:	4f 92       	push	r4
    243e:	5f 92       	push	r5
    2440:	6f 92       	push	r6
    2442:	7f 92       	push	r7
    2444:	8f 92       	push	r8
    2446:	9f 92       	push	r9
    2448:	af 92       	push	r10
    244a:	bf 92       	push	r11
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	2a 97       	sbiw	r28, 0x0a	; 10
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	7c 01       	movw	r14, r24
    246e:	6b 01       	movw	r12, r22
	//ручка
	ili9341_fillrect(x + 1, y, 3, 2, PINK);
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	43 e0       	ldi	r20, 0x03	; 3
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	22 e0       	ldi	r18, 0x02	; 2
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	00 e0       	ldi	r16, 0x00	; 0
    247c:	18 eb       	ldi	r17, 0xB8	; 184
    247e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x, y + 2, 2, 3, PINK);
    2482:	72 e0       	ldi	r23, 0x02	; 2
    2484:	87 2e       	mov	r8, r23
    2486:	91 2c       	mov	r9, r1
    2488:	8c 0c       	add	r8, r12
    248a:	9d 1c       	adc	r9, r13
    248c:	c7 01       	movw	r24, r14
    248e:	b4 01       	movw	r22, r8
    2490:	42 e0       	ldi	r20, 0x02	; 2
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	23 e0       	ldi	r18, 0x03	; 3
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x + 2, y + 4, 2, 2, PINK);
    249c:	64 e0       	ldi	r22, 0x04	; 4
    249e:	a6 2e       	mov	r10, r22
    24a0:	b1 2c       	mov	r11, r1
    24a2:	ac 0c       	add	r10, r12
    24a4:	bd 1c       	adc	r11, r13
    24a6:	c7 01       	movw	r24, r14
    24a8:	02 96       	adiw	r24, 0x02	; 2
    24aa:	b5 01       	movw	r22, r10
    24ac:	42 e0       	ldi	r20, 0x02	; 2
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	22 e0       	ldi	r18, 0x02	; 2
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_drawpixel(x + 4,y + 1,PINK);
    24b8:	54 e0       	ldi	r21, 0x04	; 4
    24ba:	65 2e       	mov	r6, r21
    24bc:	71 2c       	mov	r7, r1
    24be:	6e 0c       	add	r6, r14
    24c0:	7f 1c       	adc	r7, r15
    24c2:	b6 01       	movw	r22, r12
    24c4:	6f 5f       	subi	r22, 0xFF	; 255
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	c3 01       	movw	r24, r6
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	58 eb       	ldi	r21, 0xB8	; 184
    24ce:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 4,y + 2,PINK);
    24d2:	c3 01       	movw	r24, r6
    24d4:	b4 01       	movw	r22, r8
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	58 eb       	ldi	r21, 0xB8	; 184
    24da:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 5,y + 2,PINK);
    24de:	87 01       	movw	r16, r14
    24e0:	0b 5f       	subi	r16, 0xFB	; 251
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	c8 01       	movw	r24, r16
    24e6:	b4 01       	movw	r22, r8
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	58 eb       	ldi	r21, 0xB8	; 184
    24ec:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	//корпус
	ili9341_fillrect(x + 5, y+3, 9, 2, PINK);
    24f0:	43 e0       	ldi	r20, 0x03	; 3
    24f2:	24 2e       	mov	r2, r20
    24f4:	31 2c       	mov	r3, r1
    24f6:	2c 0c       	add	r2, r12
    24f8:	3d 1c       	adc	r3, r13
    24fa:	c8 01       	movw	r24, r16
    24fc:	b1 01       	movw	r22, r2
    24fe:	49 e0       	ldi	r20, 0x09	; 9
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	22 e0       	ldi	r18, 0x02	; 2
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	00 e0       	ldi	r16, 0x00	; 0
    2508:	18 eb       	ldi	r17, 0xB8	; 184
    250a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x + 4, y+4, 2, 8, PINK);
    250e:	c3 01       	movw	r24, r6
    2510:	b5 01       	movw	r22, r10
    2512:	42 e0       	ldi	r20, 0x02	; 2
    2514:	50 e0       	ldi	r21, 0x00	; 0
    2516:	28 e0       	ldi	r18, 0x08	; 8
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x + 6, y+10, 11, 2, PINK);
    251e:	3a e0       	ldi	r19, 0x0A	; 10
    2520:	63 2e       	mov	r6, r19
    2522:	71 2c       	mov	r7, r1
    2524:	6c 0c       	add	r6, r12
    2526:	7d 1c       	adc	r7, r13
    2528:	c7 01       	movw	r24, r14
    252a:	06 96       	adiw	r24, 0x06	; 6
    252c:	b3 01       	movw	r22, r6
    252e:	4b e0       	ldi	r20, 0x0B	; 11
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	22 e0       	ldi	r18, 0x02	; 2
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>

	ili9341_drawpixel(x + 17,y + 10,PINK);
    253a:	21 e1       	ldi	r18, 0x11	; 17
    253c:	42 2e       	mov	r4, r18
    253e:	51 2c       	mov	r5, r1
    2540:	4e 0c       	add	r4, r14
    2542:	5f 1c       	adc	r5, r15
    2544:	c2 01       	movw	r24, r4
    2546:	b3 01       	movw	r22, r6
    2548:	40 e0       	ldi	r20, 0x00	; 0
    254a:	58 eb       	ldi	r21, 0xB8	; 184
    254c:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 17,y + 9,PINK);
    2550:	86 01       	movw	r16, r12
    2552:	07 5f       	subi	r16, 0xF7	; 247
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
    2556:	c2 01       	movw	r24, r4
    2558:	b8 01       	movw	r22, r16
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	58 eb       	ldi	r21, 0xB8	; 184
    255e:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 18,y + 9,PINK);
    2562:	c7 01       	movw	r24, r14
    2564:	42 96       	adiw	r24, 0x12	; 18
    2566:	9c 83       	std	Y+4, r25	; 0x04
    2568:	8b 83       	std	Y+3, r24	; 0x03
    256a:	b8 01       	movw	r22, r16
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	58 eb       	ldi	r21, 0xB8	; 184
    2570:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 18,y + 8,PINK);
    2574:	f6 01       	movw	r30, r12
    2576:	38 96       	adiw	r30, 0x08	; 8
    2578:	fa 83       	std	Y+2, r31	; 0x02
    257a:	e9 83       	std	Y+1, r30	; 0x01
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	bf 01       	movw	r22, r30
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	58 eb       	ldi	r21, 0xB8	; 184
    2586:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 19,y + 8,PINK);
    258a:	87 01       	movw	r16, r14
    258c:	0d 5e       	subi	r16, 0xED	; 237
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	c8 01       	movw	r24, r16
    2592:	69 81       	ldd	r22, Y+1	; 0x01
    2594:	7a 81       	ldd	r23, Y+2	; 0x02
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	58 eb       	ldi	r21, 0xB8	; 184
    259a:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 19,y + 7,PINK);
    259e:	c6 01       	movw	r24, r12
    25a0:	07 96       	adiw	r24, 0x07	; 7
    25a2:	9e 83       	std	Y+6, r25	; 0x06
    25a4:	8d 83       	std	Y+5, r24	; 0x05
    25a6:	c8 01       	movw	r24, r16
    25a8:	6d 81       	ldd	r22, Y+5	; 0x05
    25aa:	7e 81       	ldd	r23, Y+6	; 0x06
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	58 eb       	ldi	r21, 0xB8	; 184
    25b0:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 20,y + 7,PINK);
    25b4:	94 e1       	ldi	r25, 0x14	; 20
    25b6:	69 2e       	mov	r6, r25
    25b8:	71 2c       	mov	r7, r1
    25ba:	6e 0c       	add	r6, r14
    25bc:	7f 1c       	adc	r7, r15
    25be:	c3 01       	movw	r24, r6
    25c0:	6d 81       	ldd	r22, Y+5	; 0x05
    25c2:	7e 81       	ldd	r23, Y+6	; 0x06
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	58 eb       	ldi	r21, 0xB8	; 184
    25c8:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 20,y + 6,PINK);
    25cc:	86 01       	movw	r16, r12
    25ce:	0a 5f       	subi	r16, 0xFA	; 250
    25d0:	1f 4f       	sbci	r17, 0xFF	; 255
    25d2:	c3 01       	movw	r24, r6
    25d4:	b8 01       	movw	r22, r16
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	58 eb       	ldi	r21, 0xB8	; 184
    25da:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 21,y + 6,PINK);
    25de:	85 e1       	ldi	r24, 0x15	; 21
    25e0:	68 2e       	mov	r6, r24
    25e2:	71 2c       	mov	r7, r1
    25e4:	6e 0c       	add	r6, r14
    25e6:	7f 1c       	adc	r7, r15
    25e8:	c3 01       	movw	r24, r6
    25ea:	b8 01       	movw	r22, r16
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	58 eb       	ldi	r21, 0xB8	; 184
    25f0:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 21,y + 5,PINK);
    25f4:	f6 01       	movw	r30, r12
    25f6:	35 96       	adiw	r30, 0x05	; 5
    25f8:	f8 87       	std	Y+8, r31	; 0x08
    25fa:	ef 83       	std	Y+7, r30	; 0x07
    25fc:	c3 01       	movw	r24, r6
    25fe:	bf 01       	movw	r22, r30
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	58 eb       	ldi	r21, 0xB8	; 184
    2604:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 22,y + 5,PINK);
    2608:	87 01       	movw	r16, r14
    260a:	0a 5e       	subi	r16, 0xEA	; 234
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	c8 01       	movw	r24, r16
    2610:	6f 81       	ldd	r22, Y+7	; 0x07
    2612:	78 85       	ldd	r23, Y+8	; 0x08
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	58 eb       	ldi	r21, 0xB8	; 184
    2618:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 22,y + 4,PINK);
    261c:	c8 01       	movw	r24, r16
    261e:	b5 01       	movw	r22, r10
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	58 eb       	ldi	r21, 0xB8	; 184
    2624:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 23,y + 4,PINK);
    2628:	87 01       	movw	r16, r14
    262a:	09 5e       	subi	r16, 0xE9	; 233
    262c:	1f 4f       	sbci	r17, 0xFF	; 255
    262e:	c8 01       	movw	r24, r16
    2630:	b5 01       	movw	r22, r10
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	58 eb       	ldi	r21, 0xB8	; 184
    2636:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 23,y + 3,PINK);
    263a:	c8 01       	movw	r24, r16
    263c:	b1 01       	movw	r22, r2
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	58 eb       	ldi	r21, 0xB8	; 184
    2642:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 24,y + 3,PINK);
    2646:	18 e1       	ldi	r17, 0x18	; 24
    2648:	41 2e       	mov	r4, r17
    264a:	51 2c       	mov	r5, r1
    264c:	4e 0c       	add	r4, r14
    264e:	5f 1c       	adc	r5, r15
    2650:	c2 01       	movw	r24, r4
    2652:	b1 01       	movw	r22, r2
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	58 eb       	ldi	r21, 0xB8	; 184
    2658:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 24,y + 2,PINK);
    265c:	c2 01       	movw	r24, r4
    265e:	b4 01       	movw	r22, r8
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	58 eb       	ldi	r21, 0xB8	; 184
    2664:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 25,y + 2,PINK);
    2668:	b9 e1       	ldi	r27, 0x19	; 25
    266a:	6b 2e       	mov	r6, r27
    266c:	71 2c       	mov	r7, r1
    266e:	6e 0c       	add	r6, r14
    2670:	7f 1c       	adc	r7, r15
    2672:	c3 01       	movw	r24, r6
    2674:	b4 01       	movw	r22, r8
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	58 eb       	ldi	r21, 0xB8	; 184
    267a:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 25,y + 3,PINK);
    267e:	c3 01       	movw	r24, r6
    2680:	b1 01       	movw	r22, r2
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	58 eb       	ldi	r21, 0xB8	; 184
    2686:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 26,y + 3,PINK);
    268a:	c7 01       	movw	r24, r14
    268c:	4a 96       	adiw	r24, 0x1a	; 26
    268e:	9a 87       	std	Y+10, r25	; 0x0a
    2690:	89 87       	std	Y+9, r24	; 0x09
    2692:	b1 01       	movw	r22, r2
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	58 eb       	ldi	r21, 0xB8	; 184
    2698:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 26,y + 4,PINK);
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	b5 01       	movw	r22, r10
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	58 eb       	ldi	r21, 0xB8	; 184
    26a6:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>

	ili9341_fillrect(x + 14, y+4, 1, 2, PINK);
    26aa:	c7 01       	movw	r24, r14
    26ac:	0e 96       	adiw	r24, 0x0e	; 14
    26ae:	b5 01       	movw	r22, r10
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	22 e0       	ldi	r18, 0x02	; 2
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	00 e0       	ldi	r16, 0x00	; 0
    26ba:	18 eb       	ldi	r17, 0xB8	; 184
    26bc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x + 15, y+5, 3, 2, PINK);
    26c0:	c7 01       	movw	r24, r14
    26c2:	0f 96       	adiw	r24, 0x0f	; 15
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	43 e0       	ldi	r20, 0x03	; 3
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	22 e0       	ldi	r18, 0x02	; 2
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_fillrect(x + 18, y+4, 4, 2, PINK);
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	b5 01       	movw	r22, r10
    26da:	44 e0       	ldi	r20, 0x04	; 4
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	22 e0       	ldi	r18, 0x02	; 2
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	//крышка
	ili9341_fillrect(x + 8, y, 5, 2, PINK);
    26e6:	c7 01       	movw	r24, r14
    26e8:	08 96       	adiw	r24, 0x08	; 8
    26ea:	b6 01       	movw	r22, r12
    26ec:	45 e0       	ldi	r20, 0x05	; 5
    26ee:	50 e0       	ldi	r21, 0x00	; 0
    26f0:	22 e0       	ldi	r18, 0x02	; 2
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
	ili9341_drawpixel(x + 10,y + 2,PINK);
    26f8:	c7 01       	movw	r24, r14
    26fa:	0a 96       	adiw	r24, 0x0a	; 10
    26fc:	b4 01       	movw	r22, r8
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	58 eb       	ldi	r21, 0xB8	; 184
    2702:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	//жижа
	ili9341_drawpixel(x + 26,y + 7,PINK);
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	6d 81       	ldd	r22, Y+5	; 0x05
    270c:	7e 81       	ldd	r23, Y+6	; 0x06
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	58 eb       	ldi	r21, 0xB8	; 184
    2712:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 26,y + 8,PINK);
    2716:	89 85       	ldd	r24, Y+9	; 0x09
    2718:	9a 85       	ldd	r25, Y+10	; 0x0a
    271a:	69 81       	ldd	r22, Y+1	; 0x01
    271c:	7a 81       	ldd	r23, Y+2	; 0x02
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	58 eb       	ldi	r21, 0xB8	; 184
    2722:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_drawpixel(x + 25,y + 8,PINK);
    2726:	c3 01       	movw	r24, r6
    2728:	69 81       	ldd	r22, Y+1	; 0x01
    272a:	7a 81       	ldd	r23, Y+2	; 0x02
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	58 eb       	ldi	r21, 0xB8	; 184
    2730:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>

	ili9341_drawpixel(x + 26,y + 12,PINK);
    2734:	b6 01       	movw	r22, r12
    2736:	64 5f       	subi	r22, 0xF4	; 244
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	58 eb       	ldi	r21, 0xB8	; 184
    2742:	0e 94 44 07 	call	0xe88	; 0xe88 <ili9341_drawpixel>
	ili9341_fillrect(x + 24, y+13, 5, 1, PINK);
    2746:	b6 01       	movw	r22, r12
    2748:	63 5f       	subi	r22, 0xF3	; 243
    274a:	7f 4f       	sbci	r23, 0xFF	; 255
    274c:	c2 01       	movw	r24, r4
    274e:	45 e0       	ldi	r20, 0x05	; 5
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	21 e0       	ldi	r18, 0x01	; 1
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ili9341_fillrect>
}
    275a:	2a 96       	adiw	r28, 0x0a	; 10
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	1f 91       	pop	r17
    276c:	0f 91       	pop	r16
    276e:	ff 90       	pop	r15
    2770:	ef 90       	pop	r14
    2772:	df 90       	pop	r13
    2774:	cf 90       	pop	r12
    2776:	bf 90       	pop	r11
    2778:	af 90       	pop	r10
    277a:	9f 90       	pop	r9
    277c:	8f 90       	pop	r8
    277e:	7f 90       	pop	r7
    2780:	6f 90       	pop	r6
    2782:	5f 90       	pop	r5
    2784:	4f 90       	pop	r4
    2786:	3f 90       	pop	r3
    2788:	2f 90       	pop	r2
    278a:	08 95       	ret

0000278c <initLCD>:
unsigned char pred_kar=0, pred_err=0;
unsigned char viv_kar=55, viv_err=55;

initLCD(void){

	ili9341_init(); //initial driver setup to drive ili9341
    278c:	0e 94 91 05 	call	0xb22	; 0xb22 <ili9341_init>
    2790:	8f ef       	ldi	r24, 0xFF	; 255
    2792:	99 e6       	ldi	r25, 0x69	; 105
    2794:	a8 e1       	ldi	r26, 0x18	; 24
    2796:	81 50       	subi	r24, 0x01	; 1
    2798:	90 40       	sbci	r25, 0x00	; 0
    279a:	a0 40       	sbci	r26, 0x00	; 0
    279c:	e1 f7       	brne	.-8      	; 0x2796 <initLCD+0xa>
    279e:	00 c0       	rjmp	.+0      	; 0x27a0 <initLCD+0x14>
    27a0:	00 00       	nop

	_delay_ms(1000);
	
	
	ili9341_clear(RED); //fill screen with black colour
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	0e 94 67 07 	call	0xece	; 0xece <ili9341_clear>
	
	PrintAkk(2, 284);
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	6c e1       	ldi	r22, 0x1C	; 28
    27b0:	71 e0       	ldi	r23, 0x01	; 1
    27b2:	0e 94 b1 11 	call	0x2362	; 0x2362 <PrintAkk>
	PrintVolt(30, 283, 0);
    27b6:	8e e1       	ldi	r24, 0x1E	; 30
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	6b e1       	ldi	r22, 0x1B	; 27
    27bc:	71 e0       	ldi	r23, 0x01	; 1
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <PrintVolt>

	PrintMasl(132, 287);
    27c4:	84 e8       	ldi	r24, 0x84	; 132
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	6f e1       	ldi	r22, 0x1F	; 31
    27ca:	71 e0       	ldi	r23, 0x01	; 1
    27cc:	0e 94 1c 12 	call	0x2438	; 0x2438 <PrintMasl>
	PrintOil(162, 283, 333);
    27d0:	82 ea       	ldi	r24, 0xA2	; 162
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	6b e1       	ldi	r22, 0x1B	; 27
    27d6:	71 e0       	ldi	r23, 0x01	; 1
    27d8:	4d e4       	ldi	r20, 0x4D	; 77
    27da:	51 e0       	ldi	r21, 0x01	; 1
    27dc:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <PrintOil>
	
	

	PrintTemp(20, 220);
    27e0:	84 e1       	ldi	r24, 0x14	; 20
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	6c ed       	ldi	r22, 0xDC	; 220
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	0e 94 06 0c 	call	0x180c	; 0x180c <PrintTemp>
	//PrintRas(10, 137);
	Printl100km(130, 124);
    27ec:	82 e8       	ldi	r24, 0x82	; 130
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	6c e7       	ldi	r22, 0x7C	; 124
    27f2:	70 e0       	ldi	r23, 0x00	; 0
    27f4:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Printl100km>
	//DelKar();

	//PrintError(kar_TORM);
	//DelError();

}
    27f8:	08 95       	ret

000027fa <ADC_Init>:
    27fa:	86 b1       	in	r24, 0x06	; 6
    27fc:	87 68       	ori	r24, 0x87	; 135
    27fe:	86 b9       	out	0x06, r24	; 6
    2800:	87 b1       	in	r24, 0x07	; 7
    2802:	80 6e       	ori	r24, 0xE0	; 224
    2804:	87 b9       	out	0x07, r24	; 7
    2806:	08 95       	ret

00002808 <ADC_b>:
    2808:	f8 94       	cli
    280a:	83 30       	cpi	r24, 0x03	; 3
    280c:	b1 f0       	breq	.+44     	; 0x283a <ADC_b+0x32>
    280e:	84 30       	cpi	r24, 0x04	; 4
    2810:	28 f4       	brcc	.+10     	; 0x281c <ADC_b+0x14>
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	71 f0       	breq	.+28     	; 0x2832 <ADC_b+0x2a>
    2816:	82 30       	cpi	r24, 0x02	; 2
    2818:	70 f4       	brcc	.+28     	; 0x2836 <ADC_b+0x2e>
    281a:	09 c0       	rjmp	.+18     	; 0x282e <ADC_b+0x26>
    281c:	85 30       	cpi	r24, 0x05	; 5
    281e:	89 f0       	breq	.+34     	; 0x2842 <ADC_b+0x3a>
    2820:	85 30       	cpi	r24, 0x05	; 5
    2822:	68 f0       	brcs	.+26     	; 0x283e <ADC_b+0x36>
    2824:	86 30       	cpi	r24, 0x06	; 6
    2826:	79 f0       	breq	.+30     	; 0x2846 <ADC_b+0x3e>
    2828:	87 30       	cpi	r24, 0x07	; 7
    282a:	89 f4       	brne	.+34     	; 0x284e <ADC_b+0x46>
    282c:	0e c0       	rjmp	.+28     	; 0x284a <ADC_b+0x42>
    282e:	80 ee       	ldi	r24, 0xE0	; 224
    2830:	0d c0       	rjmp	.+26     	; 0x284c <ADC_b+0x44>
    2832:	81 ee       	ldi	r24, 0xE1	; 225
    2834:	0b c0       	rjmp	.+22     	; 0x284c <ADC_b+0x44>
    2836:	82 ee       	ldi	r24, 0xE2	; 226
    2838:	09 c0       	rjmp	.+18     	; 0x284c <ADC_b+0x44>
    283a:	83 ee       	ldi	r24, 0xE3	; 227
    283c:	07 c0       	rjmp	.+14     	; 0x284c <ADC_b+0x44>
    283e:	8e ee       	ldi	r24, 0xEE	; 238
    2840:	05 c0       	rjmp	.+10     	; 0x284c <ADC_b+0x44>
    2842:	85 ee       	ldi	r24, 0xE5	; 229
    2844:	03 c0       	rjmp	.+6      	; 0x284c <ADC_b+0x44>
    2846:	86 ee       	ldi	r24, 0xE6	; 230
    2848:	01 c0       	rjmp	.+2      	; 0x284c <ADC_b+0x44>
    284a:	87 ee       	ldi	r24, 0xE7	; 231
    284c:	87 b9       	out	0x07, r24	; 7
    284e:	36 9a       	sbi	0x06, 6	; 6
    2850:	36 99       	sbic	0x06, 6	; 6
    2852:	fe cf       	rjmp	.-4      	; 0x2850 <ADC_b+0x48>
    2854:	85 b1       	in	r24, 0x05	; 5
    2856:	78 94       	sei
    2858:	08 95       	ret

0000285a <OWI_ReadBit>:
    285a:	3f b7       	in	r19, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	94 b3       	in	r25, 0x14	; 20
    2860:	98 2b       	or	r25, r24
    2862:	94 bb       	out	0x14, r25	; 20
    2864:	95 b3       	in	r25, 0x15	; 21
    2866:	28 2f       	mov	r18, r24
    2868:	20 95       	com	r18
    286a:	92 23       	and	r25, r18
    286c:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    286e:	9a e1       	ldi	r25, 0x1A	; 26
    2870:	9a 95       	dec	r25
    2872:	f1 f7       	brne	.-4      	; 0x2870 <OWI_ReadBit+0x16>
    2874:	00 c0       	rjmp	.+0      	; 0x2876 <OWI_ReadBit+0x1c>
    2876:	94 b3       	in	r25, 0x14	; 20
    2878:	92 23       	and	r25, r18
    287a:	94 bb       	out	0x14, r25	; 20
    287c:	95 b3       	in	r25, 0x15	; 21
    287e:	92 23       	and	r25, r18
    2880:	95 bb       	out	0x15, r25	; 21
    2882:	ea e2       	ldi	r30, 0x2A	; 42
    2884:	ea 95       	dec	r30
    2886:	f1 f7       	brne	.-4      	; 0x2884 <OWI_ReadBit+0x2a>
    2888:	00 c0       	rjmp	.+0      	; 0x288a <OWI_ReadBit+0x30>
    288a:	93 b3       	in	r25, 0x13	; 19
    288c:	e7 ed       	ldi	r30, 0xD7	; 215
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	31 97       	sbiw	r30, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <OWI_ReadBit+0x36>
    2894:	00 c0       	rjmp	.+0      	; 0x2896 <OWI_ReadBit+0x3c>
    2896:	00 00       	nop
    2898:	3f bf       	out	0x3f, r19	; 63
    289a:	89 23       	and	r24, r25
    289c:	08 95       	ret

0000289e <OWI_ReceiveByte>:
    289e:	ff 92       	push	r15
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	f8 2e       	mov	r15, r24
    28a6:	08 e0       	ldi	r16, 0x08	; 8
    28a8:	10 e0       	ldi	r17, 0x00	; 0
    28aa:	16 95       	lsr	r17
    28ac:	8f 2d       	mov	r24, r15
    28ae:	0e 94 2d 14 	call	0x285a	; 0x285a <OWI_ReadBit>
    28b2:	81 11       	cpse	r24, r1
    28b4:	10 68       	ori	r17, 0x80	; 128
    28b6:	01 50       	subi	r16, 0x01	; 1
    28b8:	c1 f7       	brne	.-16     	; 0x28aa <OWI_ReceiveByte+0xc>
    28ba:	81 2f       	mov	r24, r17
    28bc:	1f 91       	pop	r17
    28be:	0f 91       	pop	r16
    28c0:	ff 90       	pop	r15
    28c2:	08 95       	ret

000028c4 <OWI_Init>:
    28c4:	94 b3       	in	r25, 0x14	; 20
    28c6:	80 95       	com	r24
    28c8:	98 23       	and	r25, r24
    28ca:	94 bb       	out	0x14, r25	; 20
    28cc:	95 b3       	in	r25, 0x15	; 21
    28ce:	98 23       	and	r25, r24
    28d0:	95 bb       	out	0x15, r25	; 21
    28d2:	8b e7       	ldi	r24, 0x7B	; 123
    28d4:	97 e0       	ldi	r25, 0x07	; 7
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <OWI_Init+0x12>
    28da:	00 c0       	rjmp	.+0      	; 0x28dc <OWI_Init+0x18>
    28dc:	00 00       	nop
    28de:	08 95       	ret

000028e0 <OWI_WriteBit1>:
    28e0:	2f b7       	in	r18, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	94 b3       	in	r25, 0x14	; 20
    28e6:	98 2b       	or	r25, r24
    28e8:	94 bb       	out	0x14, r25	; 20
    28ea:	95 b3       	in	r25, 0x15	; 21
    28ec:	80 95       	com	r24
    28ee:	98 23       	and	r25, r24
    28f0:	95 bb       	out	0x15, r25	; 21
    28f2:	9a e1       	ldi	r25, 0x1A	; 26
    28f4:	9a 95       	dec	r25
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <OWI_WriteBit1+0x14>
    28f8:	00 c0       	rjmp	.+0      	; 0x28fa <OWI_WriteBit1+0x1a>
    28fa:	94 b3       	in	r25, 0x14	; 20
    28fc:	98 23       	and	r25, r24
    28fe:	94 bb       	out	0x14, r25	; 20
    2900:	95 b3       	in	r25, 0x15	; 21
    2902:	98 23       	and	r25, r24
    2904:	95 bb       	out	0x15, r25	; 21
    2906:	8b ef       	ldi	r24, 0xFB	; 251
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <OWI_WriteBit1+0x2a>
    290e:	00 c0       	rjmp	.+0      	; 0x2910 <OWI_WriteBit1+0x30>
    2910:	00 00       	nop
    2912:	2f bf       	out	0x3f, r18	; 63
    2914:	08 95       	ret

00002916 <OWI_WriteBit0>:
    2916:	2f b7       	in	r18, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	94 b3       	in	r25, 0x14	; 20
    291c:	98 2b       	or	r25, r24
    291e:	94 bb       	out	0x14, r25	; 20
    2920:	95 b3       	in	r25, 0x15	; 21
    2922:	80 95       	com	r24
    2924:	98 23       	and	r25, r24
    2926:	95 bb       	out	0x15, r25	; 21
    2928:	eb ee       	ldi	r30, 0xEB	; 235
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	31 97       	sbiw	r30, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <OWI_WriteBit0+0x16>
    2930:	00 c0       	rjmp	.+0      	; 0x2932 <OWI_WriteBit0+0x1c>
    2932:	00 00       	nop
    2934:	94 b3       	in	r25, 0x14	; 20
    2936:	98 23       	and	r25, r24
    2938:	94 bb       	out	0x14, r25	; 20
    293a:	95 b3       	in	r25, 0x15	; 21
    293c:	98 23       	and	r25, r24
    293e:	95 bb       	out	0x15, r25	; 21
    2940:	f0 e3       	ldi	r31, 0x30	; 48
    2942:	fa 95       	dec	r31
    2944:	f1 f7       	brne	.-4      	; 0x2942 <OWI_WriteBit0+0x2c>
    2946:	2f bf       	out	0x3f, r18	; 63
    2948:	08 95       	ret

0000294a <OWI_SendByte>:
    294a:	ff 92       	push	r15
    294c:	0f 93       	push	r16
    294e:	1f 93       	push	r17
    2950:	18 2f       	mov	r17, r24
    2952:	f6 2e       	mov	r15, r22
    2954:	08 e0       	ldi	r16, 0x08	; 8
    2956:	10 ff       	sbrs	r17, 0
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <OWI_SendByte+0x18>
    295a:	8f 2d       	mov	r24, r15
    295c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <OWI_WriteBit1>
    2960:	03 c0       	rjmp	.+6      	; 0x2968 <OWI_SendByte+0x1e>
    2962:	8f 2d       	mov	r24, r15
    2964:	0e 94 8b 14 	call	0x2916	; 0x2916 <OWI_WriteBit0>
    2968:	01 50       	subi	r16, 0x01	; 1
    296a:	11 f0       	breq	.+4      	; 0x2970 <OWI_SendByte+0x26>
    296c:	16 95       	lsr	r17
    296e:	f3 cf       	rjmp	.-26     	; 0x2956 <OWI_SendByte+0xc>
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	ff 90       	pop	r15
    2976:	08 95       	ret

00002978 <OWI_SkipRom>:
    2978:	68 2f       	mov	r22, r24
    297a:	8c ec       	ldi	r24, 0xCC	; 204
    297c:	0e 94 a5 14 	call	0x294a	; 0x294a <OWI_SendByte>
    2980:	08 95       	ret

00002982 <OWI_DetectPresence>:
    2982:	3f b7       	in	r19, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	94 b3       	in	r25, 0x14	; 20
    2988:	98 2b       	or	r25, r24
    298a:	94 bb       	out	0x14, r25	; 20
    298c:	95 b3       	in	r25, 0x15	; 21
    298e:	28 2f       	mov	r18, r24
    2990:	20 95       	com	r18
    2992:	92 23       	and	r25, r18
    2994:	95 bb       	out	0x15, r25	; 21
    2996:	eb e7       	ldi	r30, 0x7B	; 123
    2998:	f7 e0       	ldi	r31, 0x07	; 7
    299a:	31 97       	sbiw	r30, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <OWI_DetectPresence+0x18>
    299e:	00 c0       	rjmp	.+0      	; 0x29a0 <OWI_DetectPresence+0x1e>
    29a0:	00 00       	nop
    29a2:	94 b3       	in	r25, 0x14	; 20
    29a4:	92 23       	and	r25, r18
    29a6:	94 bb       	out	0x14, r25	; 20
    29a8:	95 b3       	in	r25, 0x15	; 21
    29aa:	92 23       	and	r25, r18
    29ac:	95 bb       	out	0x15, r25	; 21
    29ae:	e3 e1       	ldi	r30, 0x13	; 19
    29b0:	f1 e0       	ldi	r31, 0x01	; 1
    29b2:	31 97       	sbiw	r30, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <OWI_DetectPresence+0x30>
    29b6:	00 c0       	rjmp	.+0      	; 0x29b8 <OWI_DetectPresence+0x36>
    29b8:	00 00       	nop
    29ba:	93 b3       	in	r25, 0x13	; 19
    29bc:	e3 e6       	ldi	r30, 0x63	; 99
    29be:	f6 e0       	ldi	r31, 0x06	; 6
    29c0:	31 97       	sbiw	r30, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <OWI_DetectPresence+0x3e>
    29c4:	00 c0       	rjmp	.+0      	; 0x29c6 <OWI_DetectPresence+0x44>
    29c6:	00 00       	nop
    29c8:	3f bf       	out	0x3f, r19	; 63
    29ca:	90 95       	com	r25
    29cc:	89 23       	and	r24, r25
    29ce:	08 95       	ret

000029d0 <Volt>:
	lowVoltagePictureOff();
}

//отображение напряжения
void Volt(void)
{
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
	unsigned int res1, res2, res3;
	unsigned char res;
	res1 =  ADC_b(6);
    29d8:	86 e0       	ldi	r24, 0x06	; 6
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>
    29e0:	ec 01       	movw	r28, r24
    29e2:	85 ed       	ldi	r24, 0xD5	; 213
    29e4:	8a 95       	dec	r24
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <Volt+0x14>
    29e8:	00 00       	nop
	_delay_us(80);
	res2 =  ADC_b(6);
    29ea:	86 e0       	ldi	r24, 0x06	; 6
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>
    29f2:	8c 01       	movw	r16, r24
    29f4:	85 ed       	ldi	r24, 0xD5	; 213
    29f6:	8a 95       	dec	r24
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <Volt+0x26>
    29fa:	00 00       	nop
	_delay_us(80);
	res3 =  ADC_b(6);; 
    29fc:	86 e0       	ldi	r24, 0x06	; 6
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>

	res1 = (res1 + res2 + res3)/3;
    2a04:	c0 0f       	add	r28, r16
    2a06:	d1 1f       	adc	r29, r17
    2a08:	c8 0f       	add	r28, r24
    2a0a:	d9 1f       	adc	r29, r25
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	63 e0       	ldi	r22, 0x03	; 3
    2a10:	70 e0       	ldi	r23, 0x00	; 0
    2a12:	0e 94 42 24 	call	0x4884	; 0x4884 <__udivmodhi4>
	res1 *= 0.758;
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__floatunsisf>
    2a1e:	2a e4       	ldi	r18, 0x4A	; 74
    2a20:	3c e0       	ldi	r19, 0x0C	; 12
    2a22:	42 e4       	ldi	r20, 0x42	; 66
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
    2a2a:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__fixunssfsi>
    2a2e:	06 2f       	mov	r16, r22
	res = res1;

	PrintVolt(30, 283, res);
    2a30:	8e e1       	ldi	r24, 0x1E	; 30
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	6b e1       	ldi	r22, 0x1B	; 27
    2a36:	71 e0       	ldi	r23, 0x01	; 1
    2a38:	40 2f       	mov	r20, r16
    2a3a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <PrintVolt>
	voltage = res1;
    2a3e:	00 93 80 01 	sts	0x0180, r16

	if(ignitionOn()) //если зажигание вкл
    2a42:	0e 94 a7 1c 	call	0x394e	; 0x394e <ignitionOn>
    2a46:	20 91 80 01 	lds	r18, 0x0180
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	d9 f0       	breq	.+54     	; 0x2a84 <Volt+0xb4>
	{
		if(voltage < 124) //сильная просадка при работающем двигателе
    2a4e:	2c 37       	cpi	r18, 0x7C	; 124
    2a50:	10 f4       	brcc	.+4      	; 0x2a56 <Volt+0x86>
		{
			lowVoltagePictureOn();			
    2a52:	0e 94 ab 1c 	call	0x3956	; 0x3956 <lowVoltagePictureOn>
		}
		if(voltage < 128) //длительная просадка
    2a56:	80 91 80 01 	lds	r24, 0x0180
    2a5a:	87 fd       	sbrc	r24, 7
    2a5c:	0c c0       	rjmp	.+24     	; 0x2a76 <Volt+0xa6>
		{
			countError++;
    2a5e:	80 91 a6 01 	lds	r24, 0x01A6
    2a62:	8f 5f       	subi	r24, 0xFF	; 255
    2a64:	80 93 a6 01 	sts	0x01A6, r24
			if(countError >= 3)
    2a68:	83 30       	cpi	r24, 0x03	; 3
    2a6a:	38 f0       	brcs	.+14     	; 0x2a7a <Volt+0xaa>
			{
				countError=0;
    2a6c:	10 92 a6 01 	sts	0x01A6, r1
				lowVoltagePictureOn();				
    2a70:	0e 94 ab 1c 	call	0x3956	; 0x3956 <lowVoltagePictureOn>
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <Volt+0xaa>
			}
		}
		else
		{
			countError=0;
    2a76:	10 92 a6 01 	sts	0x01A6, r1
		}
		if(voltage > 131)
    2a7a:	80 91 80 01 	lds	r24, 0x0180
    2a7e:	84 38       	cpi	r24, 0x84	; 132
    2a80:	b8 f0       	brcs	.+46     	; 0x2ab0 <Volt+0xe0>
    2a82:	14 c0       	rjmp	.+40     	; 0x2aac <Volt+0xdc>
			lowVoltagePictureOff();
		}
	}
	else
	{
		if(voltage < 119) //длительная просадка
    2a84:	27 37       	cpi	r18, 0x77	; 119
    2a86:	60 f4       	brcc	.+24     	; 0x2aa0 <Volt+0xd0>
		{
			countError++;
    2a88:	80 91 a6 01 	lds	r24, 0x01A6
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	80 93 a6 01 	sts	0x01A6, r24
			if(countError >= 6)
    2a92:	86 30       	cpi	r24, 0x06	; 6
    2a94:	38 f0       	brcs	.+14     	; 0x2aa4 <Volt+0xd4>
			{
				countError=0;
    2a96:	10 92 a6 01 	sts	0x01A6, r1
				lowVoltagePictureOn();
    2a9a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <lowVoltagePictureOn>
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <Volt+0xd4>
			}
		}
		else
		{
			countError=0;
    2aa0:	10 92 a6 01 	sts	0x01A6, r1
		}
		if(voltage > 121)
    2aa4:	80 91 80 01 	lds	r24, 0x0180
    2aa8:	8a 37       	cpi	r24, 0x7A	; 122
    2aaa:	10 f0       	brcs	.+4      	; 0x2ab0 <Volt+0xe0>
		{
			lowVoltagePictureOff();		
    2aac:	0e 94 af 1c 	call	0x395e	; 0x395e <lowVoltagePictureOff>
		}
	}
	 
	AddTask (Volt, 50);
    2ab0:	88 ee       	ldi	r24, 0xE8	; 232
    2ab2:	94 e1       	ldi	r25, 0x14	; 20
    2ab4:	62 e3       	ldi	r22, 0x32	; 50
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	08 95       	ret

00002ac6 <offPictureVoltage>:

char error = 0;

void offPictureVoltage(void)
{
	lowVoltagePictureOff();
    2ac6:	0e 94 af 1c 	call	0x395e	; 0x395e <lowVoltagePictureOff>
}
    2aca:	08 95       	ret

00002acc <Temp_out_b>:

}

//обработка ответа внешней температуры
void Temp_out_b(void)
{
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
	OWI_DetectPresence(BUS);
    2ad0:	82 e0       	ldi	r24, 0x02	; 2
    2ad2:	0e 94 c1 14 	call	0x2982	; 0x2982 <OWI_DetectPresence>
    OWI_SendByte(DS18B20_SKIP_ROM, BUS);
    2ad6:	8c ec       	ldi	r24, 0xCC	; 204
    2ad8:	62 e0       	ldi	r22, 0x02	; 2
    2ada:	0e 94 a5 14 	call	0x294a	; 0x294a <OWI_SendByte>
    OWI_SendByte(DS18B20_READ_SCRATCHPAD, BUS);
    2ade:	8e eb       	ldi	r24, 0xBE	; 190
    2ae0:	62 e0       	ldi	r22, 0x02	; 2
    2ae2:	0e 94 a5 14 	call	0x294a	; 0x294a <OWI_SendByte>
    2ae6:	cc e4       	ldi	r28, 0x4C	; 76
    2ae8:	d2 e0       	ldi	r29, 0x02	; 2

	for(unsigned char i = 0; i<9; i++){
      scratchpad[i] = OWI_ReceiveByte(BUS);
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	0e 94 4f 14 	call	0x289e	; 0x289e <OWI_ReceiveByte>
    2af0:	89 93       	st	Y+, r24
{
	OWI_DetectPresence(BUS);
    OWI_SendByte(DS18B20_SKIP_ROM, BUS);
    OWI_SendByte(DS18B20_READ_SCRATCHPAD, BUS);

	for(unsigned char i = 0; i<9; i++){
    2af2:	82 e0       	ldi	r24, 0x02	; 2
    2af4:	c5 35       	cpi	r28, 0x55	; 85
    2af6:	d8 07       	cpc	r29, r24
    2af8:	c1 f7       	brne	.-16     	; 0x2aea <Temp_out_b+0x1e>
      scratchpad[i] = OWI_ReceiveByte(BUS);
    }

	if ((scratchpad[1]&128) == 0)
    2afa:	80 91 4d 02 	lds	r24, 0x024D
    2afe:	90 91 aa 01 	lds	r25, 0x01AA
    2b02:	87 fd       	sbrc	r24, 7
    2b04:	04 c0       	rjmp	.+8      	; 0x2b0e <Temp_out_b+0x42>
	{ 
		if(fl_d_t==1)
    2b06:	91 30       	cpi	r25, 0x01	; 1
    2b08:	c9 f4       	brne	.+50     	; 0x2b3c <Temp_out_b+0x70>
		{  
      		t_r=2;
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	18 c0       	rjmp	.+48     	; 0x2b3e <Temp_out_b+0x72>
			t_r=3;
		}
    }
    else
	{
		if(fl_d_t==1)
    2b0e:	91 30       	cpi	r25, 0x01	; 1
    2b10:	a9 f4       	brne	.+42     	; 0x2b3c <Temp_out_b+0x70>
		{
		      t_r=0;
    2b12:	10 92 62 00 	sts	0x0062, r1
			  tmp = ((unsigned int)scratchpad[1]<<8)|scratchpad[0];
    2b16:	38 2f       	mov	r19, r24
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	80 91 4c 02 	lds	r24, 0x024C
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	82 2b       	or	r24, r18
    2b22:	93 2b       	or	r25, r19
		      tmp = ~tmp + 1;
    2b24:	90 95       	com	r25
    2b26:	81 95       	neg	r24
    2b28:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2a:	90 93 a9 01 	sts	0x01A9, r25
    2b2e:	80 93 a8 01 	sts	0x01A8, r24
		      scratchpad[0] = tmp;
    2b32:	80 93 4c 02 	sts	0x024C, r24
		      scratchpad[1] = tmp>>8;
    2b36:	90 93 4d 02 	sts	0x024D, r25
    2b3a:	03 c0       	rjmp	.+6      	; 0x2b42 <Temp_out_b+0x76>
	  	}
		else
		{
			t_r=3;
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	80 93 62 00 	sts	0x0062, r24
		}
    }
t_c = scratchpad[0] & 0b00001111;
    2b42:	80 91 4c 02 	lds	r24, 0x024C
    2b46:	48 2f       	mov	r20, r24
    2b48:	4f 70       	andi	r20, 0x0F	; 15
temperature = (scratchpad[0]>>4)|((scratchpad[1]&7)<<4);
    2b4a:	20 91 4d 02 	lds	r18, 0x024D
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	27 70       	andi	r18, 0x07	; 7
    2b52:	30 70       	andi	r19, 0x00	; 0
    2b54:	94 e0       	ldi	r25, 0x04	; 4
    2b56:	22 0f       	add	r18, r18
    2b58:	33 1f       	adc	r19, r19
    2b5a:	9a 95       	dec	r25
    2b5c:	e1 f7       	brne	.-8      	; 0x2b56 <Temp_out_b+0x8a>
    2b5e:	82 95       	swap	r24
    2b60:	8f 70       	andi	r24, 0x0F	; 15
    2b62:	82 2b       	or	r24, r18
    2b64:	80 93 55 02 	sts	0x0255, r24
t_a = temperature/10;
    2b68:	6a e0       	ldi	r22, 0x0A	; 10
    2b6a:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    2b6e:	80 93 63 00 	sts	0x0063, r24
t_b= temperature%10;
    2b72:	90 93 64 00 	sts	0x0064, r25
if(t_b<2 && t_r==2 && t_a == 0) t_r = 1;
    2b76:	92 30       	cpi	r25, 0x02	; 2
    2b78:	48 f4       	brcc	.+18     	; 0x2b8c <Temp_out_b+0xc0>
    2b7a:	90 91 62 00 	lds	r25, 0x0062
    2b7e:	92 30       	cpi	r25, 0x02	; 2
    2b80:	29 f4       	brne	.+10     	; 0x2b8c <Temp_out_b+0xc0>
    2b82:	88 23       	and	r24, r24
    2b84:	19 f4       	brne	.+6      	; 0x2b8c <Temp_out_b+0xc0>
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	80 93 62 00 	sts	0x0062, r24
t_c /= 1.66666666;
    2b8c:	64 2f       	mov	r22, r20
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	88 27       	eor	r24, r24
    2b92:	77 fd       	sbrc	r23, 7
    2b94:	80 95       	com	r24
    2b96:	98 2f       	mov	r25, r24
    2b98:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
    2b9c:	25 e5       	ldi	r18, 0x55	; 85
    2b9e:	35 e5       	ldi	r19, 0x55	; 85
    2ba0:	45 ed       	ldi	r20, 0xD5	; 213
    2ba2:	5f e3       	ldi	r21, 0x3F	; 63
    2ba4:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__divsf3>
    2ba8:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__fixunssfsi>
    2bac:	60 93 65 00 	sts	0x0065, r22

if(lowLevelAntifreezePicture==0 && lowBrakeFluidPicture == 0) PrintTemp(20, 220);
    2bb0:	80 91 87 01 	lds	r24, 0x0187
    2bb4:	88 23       	and	r24, r24
    2bb6:	51 f4       	brne	.+20     	; 0x2bcc <Temp_out_b+0x100>
    2bb8:	80 91 89 01 	lds	r24, 0x0189
    2bbc:	88 23       	and	r24, r24
    2bbe:	31 f4       	brne	.+12     	; 0x2bcc <Temp_out_b+0x100>
    2bc0:	84 e1       	ldi	r24, 0x14	; 20
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	6c ed       	ldi	r22, 0xDC	; 220
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	0e 94 06 0c 	call	0x180c	; 0x180c <PrintTemp>



	AddTask (Temp_out_a, 700);
    2bcc:	8f ee       	ldi	r24, 0xEF	; 239
    2bce:	95 e1       	ldi	r25, 0x15	; 21
    2bd0:	6c eb       	ldi	r22, 0xBC	; 188
    2bd2:	72 e0       	ldi	r23, 0x02	; 2
    2bd4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	08 95       	ret

00002bde <Temp_out_a>:
unsigned char fl_d_t=0; //флаг присутствия датчика температуры

//запрос на измерение внешней температуры
void Temp_out_a(void)
{
	if(!OWI_DetectPresence(BUS))
    2bde:	82 e0       	ldi	r24, 0x02	; 2
    2be0:	0e 94 c1 14 	call	0x2982	; 0x2982 <OWI_DetectPresence>
    2be4:	88 23       	and	r24, r24
    2be6:	19 f4       	brne	.+6      	; 0x2bee <Temp_out_a+0x10>
	{
		fl_d_t=0;
    2be8:	10 92 aa 01 	sts	0x01AA, r1
    2bec:	03 c0       	rjmp	.+6      	; 0x2bf4 <Temp_out_a+0x16>
	}
	else
	{
		fl_d_t=1;
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	80 93 aa 01 	sts	0x01AA, r24
	}
    OWI_SkipRom(BUS);
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	0e 94 bc 14 	call	0x2978	; 0x2978 <OWI_SkipRom>
    OWI_SendByte(DS18B20_CONVERT_T ,BUS);
    2bfa:	84 e4       	ldi	r24, 0x44	; 68
    2bfc:	62 e0       	ldi	r22, 0x02	; 2
    2bfe:	0e 94 a5 14 	call	0x294a	; 0x294a <OWI_SendByte>

    AddTask (Temp_out_b, 100);
    2c02:	86 e6       	ldi	r24, 0x66	; 102
    2c04:	95 e1       	ldi	r25, 0x15	; 21
    2c06:	64 e6       	ldi	r22, 0x64	; 100
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>

}
    2c0e:	08 95       	ret

00002c10 <adcToTempure>:
#include "prototype_task.h"
#include "tempure_sensor.h"


float adcToTempure (float adcTempure, float adcVoltage)
{
    2c10:	6f 92       	push	r6
    2c12:	7f 92       	push	r7
    2c14:	8f 92       	push	r8
    2c16:	9f 92       	push	r9
    2c18:	af 92       	push	r10
    2c1a:	bf 92       	push	r11
    2c1c:	cf 92       	push	r12
    2c1e:	df 92       	push	r13
    2c20:	ef 92       	push	r14
    2c22:	ff 92       	push	r15
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	7b 01       	movw	r14, r22
    2c2a:	8c 01       	movw	r16, r24
    2c2c:	ca 01       	movw	r24, r20
    2c2e:	b9 01       	movw	r22, r18
	float result;
	adcVoltage = adcVoltage / 159;
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	4f e1       	ldi	r20, 0x1F	; 31
    2c36:	53 e4       	ldi	r21, 0x43	; 67
    2c38:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__divsf3>
    2c3c:	96 2e       	mov	r9, r22
    2c3e:	87 2e       	mov	r8, r23
    2c40:	78 2e       	mov	r7, r24
    2c42:	69 2e       	mov	r6, r25
	adcTempure *= 0.957;
    2c44:	c8 01       	movw	r24, r16
    2c46:	b7 01       	movw	r22, r14
    2c48:	24 ef       	ldi	r18, 0xF4	; 244
    2c4a:	3d ef       	ldi	r19, 0xFD	; 253
    2c4c:	44 e7       	ldi	r20, 0x74	; 116
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
    2c54:	7b 01       	movw	r14, r22
    2c56:	8c 01       	movw	r16, r24
	if(adcTempure<122 && adcTempure > 75)
    2c58:	7f 2d       	mov	r23, r15
    2c5a:	91 2f       	mov	r25, r17
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	44 ef       	ldi	r20, 0xF4	; 244
    2c62:	52 e4       	ldi	r21, 0x42	; 66
    2c64:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <__ltsf2>
    2c68:	87 ff       	sbrs	r24, 7
    2c6a:	23 c0       	rjmp	.+70     	; 0x2cb2 <adcToTempure+0xa2>
    2c6c:	6e 2d       	mov	r22, r14
    2c6e:	7f 2d       	mov	r23, r15
    2c70:	80 2f       	mov	r24, r16
    2c72:	91 2f       	mov	r25, r17
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	46 e9       	ldi	r20, 0x96	; 150
    2c7a:	52 e4       	ldi	r21, 0x42	; 66
    2c7c:	0e 94 92 20 	call	0x4124	; 0x4124 <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	bc f4       	brge	.+46     	; 0x2cb2 <adcToTempure+0xa2>
	{
		adcTempure=(844-(4*adcTempure))/9;
    2c84:	6e 2d       	mov	r22, r14
    2c86:	7f 2d       	mov	r23, r15
    2c88:	80 2f       	mov	r24, r16
    2c8a:	91 2f       	mov	r25, r17
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	50 e4       	ldi	r21, 0x40	; 64
    2c94:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
    2c98:	9b 01       	movw	r18, r22
    2c9a:	ac 01       	movw	r20, r24
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	83 e5       	ldi	r24, 0x53	; 83
    2ca2:	94 e4       	ldi	r25, 0x44	; 68
    2ca4:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__subsf3>
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e1       	ldi	r20, 0x10	; 16
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	2e c0       	rjmp	.+92     	; 0x2d0e <adcToTempure+0xfe>
		result= adcTempure*adcVoltage;
	}
	else
	if(adcTempure<77 && adcTempure > 48)
    2cb2:	6e 2d       	mov	r22, r14
    2cb4:	7f 2d       	mov	r23, r15
    2cb6:	80 2f       	mov	r24, r16
    2cb8:	91 2f       	mov	r25, r17
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	4a e9       	ldi	r20, 0x9A	; 154
    2cc0:	52 e4       	ldi	r21, 0x42	; 66
    2cc2:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <__ltsf2>
    2cc6:	87 ff       	sbrs	r24, 7
    2cc8:	31 c0       	rjmp	.+98     	; 0x2d2c <adcToTempure+0x11c>
    2cca:	6e 2d       	mov	r22, r14
    2ccc:	7f 2d       	mov	r23, r15
    2cce:	80 2f       	mov	r24, r16
    2cd0:	91 2f       	mov	r25, r17
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e4       	ldi	r20, 0x40	; 64
    2cd8:	52 e4       	ldi	r21, 0x42	; 66
    2cda:	0e 94 92 20 	call	0x4124	; 0x4124 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	2c f5       	brge	.+74     	; 0x2d2c <adcToTempure+0x11c>
	{
		adcTempure=(3140-20*adcTempure)/27;
    2ce2:	6e 2d       	mov	r22, r14
    2ce4:	7f 2d       	mov	r23, r15
    2ce6:	80 2f       	mov	r24, r16
    2ce8:	91 2f       	mov	r25, r17
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 ea       	ldi	r20, 0xA0	; 160
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
    2cf6:	9b 01       	movw	r18, r22
    2cf8:	ac 01       	movw	r20, r24
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	70 e4       	ldi	r23, 0x40	; 64
    2cfe:	84 e4       	ldi	r24, 0x44	; 68
    2d00:	95 e4       	ldi	r25, 0x45	; 69
    2d02:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__subsf3>
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	48 ed       	ldi	r20, 0xD8	; 216
    2d0c:	51 e4       	ldi	r21, 0x41	; 65
    2d0e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__divsf3>
		result= adcTempure*adcVoltage;
    2d12:	d4 01       	movw	r26, r8
    2d14:	f3 01       	movw	r30, r6
    2d16:	2b 2f       	mov	r18, r27
    2d18:	38 2d       	mov	r19, r8
    2d1a:	4f 2f       	mov	r20, r31
    2d1c:	56 2d       	mov	r21, r6
    2d1e:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
    2d22:	d6 2e       	mov	r13, r22
    2d24:	c7 2e       	mov	r12, r23
    2d26:	b8 2e       	mov	r11, r24
    2d28:	a9 2e       	mov	r10, r25
    2d2a:	84 c0       	rjmp	.+264    	; 0x2e34 <adcToTempure+0x224>
	}
	else
	if(adcTempure<50 && adcTempure > 23)
    2d2c:	6e 2d       	mov	r22, r14
    2d2e:	7f 2d       	mov	r23, r15
    2d30:	80 2f       	mov	r24, r16
    2d32:	91 2f       	mov	r25, r17
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	48 e4       	ldi	r20, 0x48	; 72
    2d3a:	52 e4       	ldi	r21, 0x42	; 66
    2d3c:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <__ltsf2>
    2d40:	87 ff       	sbrs	r24, 7
    2d42:	23 c0       	rjmp	.+70     	; 0x2d8a <adcToTempure+0x17a>
    2d44:	6e 2d       	mov	r22, r14
    2d46:	7f 2d       	mov	r23, r15
    2d48:	80 2f       	mov	r24, r16
    2d4a:	91 2f       	mov	r25, r17
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	48 eb       	ldi	r20, 0xB8	; 184
    2d52:	51 e4       	ldi	r21, 0x41	; 65
    2d54:	0e 94 92 20 	call	0x4124	; 0x4124 <__gtsf2>
    2d58:	18 16       	cp	r1, r24
    2d5a:	bc f4       	brge	.+46     	; 0x2d8a <adcToTempure+0x17a>
	{
		adcTempure=(792-8*adcTempure)/5;
    2d5c:	6e 2d       	mov	r22, r14
    2d5e:	7f 2d       	mov	r23, r15
    2d60:	80 2f       	mov	r24, r16
    2d62:	91 2f       	mov	r25, r17
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	51 e4       	ldi	r21, 0x41	; 65
    2d6c:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
    2d70:	9b 01       	movw	r18, r22
    2d72:	ac 01       	movw	r20, r24
    2d74:	60 e0       	ldi	r22, 0x00	; 0
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	86 e4       	ldi	r24, 0x46	; 70
    2d7a:	94 e4       	ldi	r25, 0x44	; 68
    2d7c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__subsf3>
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 ea       	ldi	r20, 0xA0	; 160
    2d86:	50 e4       	ldi	r21, 0x40	; 64
    2d88:	c2 cf       	rjmp	.-124    	; 0x2d0e <adcToTempure+0xfe>
		result= adcTempure*adcVoltage;
	}
	else
	if(adcTempure<25 && adcTempure > 11)
    2d8a:	6e 2d       	mov	r22, r14
    2d8c:	7f 2d       	mov	r23, r15
    2d8e:	80 2f       	mov	r24, r16
    2d90:	91 2f       	mov	r25, r17
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	48 ec       	ldi	r20, 0xC8	; 200
    2d98:	51 e4       	ldi	r21, 0x41	; 65
    2d9a:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <__ltsf2>
    2d9e:	87 ff       	sbrs	r24, 7
    2da0:	23 c0       	rjmp	.+70     	; 0x2de8 <adcToTempure+0x1d8>
    2da2:	6e 2d       	mov	r22, r14
    2da4:	7f 2d       	mov	r23, r15
    2da6:	80 2f       	mov	r24, r16
    2da8:	91 2f       	mov	r25, r17
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e3       	ldi	r20, 0x30	; 48
    2db0:	51 e4       	ldi	r21, 0x41	; 65
    2db2:	0e 94 92 20 	call	0x4124	; 0x4124 <__gtsf2>
    2db6:	18 16       	cp	r1, r24
    2db8:	bc f4       	brge	.+46     	; 0x2de8 <adcToTempure+0x1d8>
	{
		adcTempure=(1320-25*adcTempure)/6;
    2dba:	6e 2d       	mov	r22, r14
    2dbc:	7f 2d       	mov	r23, r15
    2dbe:	80 2f       	mov	r24, r16
    2dc0:	91 2f       	mov	r25, r17
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	48 ec       	ldi	r20, 0xC8	; 200
    2dc8:	51 e4       	ldi	r21, 0x41	; 65
    2dca:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
    2dce:	9b 01       	movw	r18, r22
    2dd0:	ac 01       	movw	r20, r24
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	70 e0       	ldi	r23, 0x00	; 0
    2dd6:	85 ea       	ldi	r24, 0xA5	; 165
    2dd8:	94 e4       	ldi	r25, 0x44	; 68
    2dda:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__subsf3>
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 ec       	ldi	r20, 0xC0	; 192
    2de4:	50 e4       	ldi	r21, 0x40	; 64
    2de6:	93 cf       	rjmp	.-218    	; 0x2d0e <adcToTempure+0xfe>
		result= adcTempure*adcVoltage;
	}
	else
	if(adcTempure<12)
    2de8:	6e 2d       	mov	r22, r14
    2dea:	7f 2d       	mov	r23, r15
    2dec:	80 2f       	mov	r24, r16
    2dee:	91 2f       	mov	r25, r17
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e4       	ldi	r20, 0x40	; 64
    2df6:	51 e4       	ldi	r21, 0x41	; 65
    2df8:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <__ltsf2>
    2dfc:	87 fd       	sbrc	r24, 7
    2dfe:	0d c0       	rjmp	.+26     	; 0x2e1a <adcToTempure+0x20a>
	{
		result= 200;
	}
	else
	if(adcTempure > 121)
    2e00:	6e 2d       	mov	r22, r14
    2e02:	7f 2d       	mov	r23, r15
    2e04:	80 2f       	mov	r24, r16
    2e06:	91 2f       	mov	r25, r17
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	42 ef       	ldi	r20, 0xF2	; 242
    2e0e:	52 e4       	ldi	r21, 0x42	; 66
    2e10:	0e 94 92 20 	call	0x4124	; 0x4124 <__gtsf2>
    2e14:	18 16       	cp	r1, r24
    2e16:	44 f0       	brlt	.+16     	; 0x2e28 <adcToTempure+0x218>
    2e18:	0d c0       	rjmp	.+26     	; 0x2e34 <adcToTempure+0x224>
		result= adcTempure*adcVoltage;
	}
	else
	if(adcTempure<12)
	{
		result= 200;
    2e1a:	dd 24       	eor	r13, r13
    2e1c:	cc 24       	eor	r12, r12
    2e1e:	38 e4       	ldi	r19, 0x48	; 72
    2e20:	b3 2e       	mov	r11, r19
    2e22:	23 e4       	ldi	r18, 0x43	; 67
    2e24:	a2 2e       	mov	r10, r18
    2e26:	06 c0       	rjmp	.+12     	; 0x2e34 <adcToTempure+0x224>
	}
	else
	if(adcTempure > 121)
	{
		result= 39;
    2e28:	dd 24       	eor	r13, r13
    2e2a:	cc 24       	eor	r12, r12
    2e2c:	9c e1       	ldi	r25, 0x1C	; 28
    2e2e:	b9 2e       	mov	r11, r25
    2e30:	82 e4       	ldi	r24, 0x42	; 66
    2e32:	a8 2e       	mov	r10, r24
	}
	return result;
}
    2e34:	a6 01       	movw	r20, r12
    2e36:	95 01       	movw	r18, r10
    2e38:	65 2f       	mov	r22, r21
    2e3a:	7c 2d       	mov	r23, r12
    2e3c:	83 2f       	mov	r24, r19
    2e3e:	9a 2d       	mov	r25, r10
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	df 90       	pop	r13
    2e4a:	cf 90       	pop	r12
    2e4c:	bf 90       	pop	r11
    2e4e:	af 90       	pop	r10
    2e50:	9f 90       	pop	r9
    2e52:	8f 90       	pop	r8
    2e54:	7f 90       	pop	r7
    2e56:	6f 90       	pop	r6
    2e58:	08 95       	ret

00002e5a <Temp_oila>:


void Temp_oila(void)
{
    2e5a:	2f 92       	push	r2
    2e5c:	3f 92       	push	r3
    2e5e:	4f 92       	push	r4
    2e60:	5f 92       	push	r5
    2e62:	6f 92       	push	r6
    2e64:	7f 92       	push	r7
    2e66:	8f 92       	push	r8
    2e68:	9f 92       	push	r9
    2e6a:	af 92       	push	r10
    2e6c:	bf 92       	push	r11
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
	float adcTempure = ADC_b(7);
    2e7a:	87 e0       	ldi	r24, 0x07	; 7
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>
    2e82:	5c 01       	movw	r10, r24
	float adcVoltage = ADC_b(6);
    2e84:	86 e0       	ldi	r24, 0x06	; 6
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>
    2e8c:	7c 01       	movw	r14, r24
}


void Temp_oila(void)
{
	float adcTempure = ADC_b(7);
    2e8e:	b5 01       	movw	r22, r10
    2e90:	88 27       	eor	r24, r24
    2e92:	77 fd       	sbrc	r23, 7
    2e94:	80 95       	com	r24
    2e96:	98 2f       	mov	r25, r24
    2e98:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
    2e9c:	5b 01       	movw	r10, r22
    2e9e:	6c 01       	movw	r12, r24
	float adcVoltage = ADC_b(6);
    2ea0:	b7 01       	movw	r22, r14
    2ea2:	88 27       	eor	r24, r24
    2ea4:	77 fd       	sbrc	r23, 7
    2ea6:	80 95       	com	r24
    2ea8:	98 2f       	mov	r25, r24
    2eaa:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
    2eae:	9b 01       	movw	r18, r22
    2eb0:	ac 01       	movw	r20, r24
	float res1 = adcToTempure(adcTempure, adcVoltage);
    2eb2:	c6 01       	movw	r24, r12
    2eb4:	b5 01       	movw	r22, r10
    2eb6:	0e 94 08 16 	call	0x2c10	; 0x2c10 <adcToTempure>
    2eba:	1b 01       	movw	r2, r22
    2ebc:	2c 01       	movw	r4, r24
    2ebe:	85 ed       	ldi	r24, 0xD5	; 213
    2ec0:	8a 95       	dec	r24
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <Temp_oila+0x66>
    2ec4:	00 00       	nop
	_delay_us(80);
	adcTempure = ADC_b(7);
    2ec6:	87 e0       	ldi	r24, 0x07	; 7
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>
    2ece:	5c 01       	movw	r10, r24
	adcVoltage = ADC_b(6);
    2ed0:	86 e0       	ldi	r24, 0x06	; 6
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>
    2ed8:	7c 01       	movw	r14, r24
{
	float adcTempure = ADC_b(7);
	float adcVoltage = ADC_b(6);
	float res1 = adcToTempure(adcTempure, adcVoltage);
	_delay_us(80);
	adcTempure = ADC_b(7);
    2eda:	b5 01       	movw	r22, r10
    2edc:	88 27       	eor	r24, r24
    2ede:	77 fd       	sbrc	r23, 7
    2ee0:	80 95       	com	r24
    2ee2:	98 2f       	mov	r25, r24
    2ee4:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
    2ee8:	5b 01       	movw	r10, r22
    2eea:	6c 01       	movw	r12, r24
	adcVoltage = ADC_b(6);
    2eec:	b7 01       	movw	r22, r14
    2eee:	88 27       	eor	r24, r24
    2ef0:	77 fd       	sbrc	r23, 7
    2ef2:	80 95       	com	r24
    2ef4:	98 2f       	mov	r25, r24
    2ef6:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
    2efa:	9b 01       	movw	r18, r22
    2efc:	ac 01       	movw	r20, r24
	float res2 = adcToTempure(adcTempure, adcVoltage);
    2efe:	c6 01       	movw	r24, r12
    2f00:	b5 01       	movw	r22, r10
    2f02:	0e 94 08 16 	call	0x2c10	; 0x2c10 <adcToTempure>
    2f06:	3b 01       	movw	r6, r22
    2f08:	4c 01       	movw	r8, r24
    2f0a:	85 ed       	ldi	r24, 0xD5	; 213
    2f0c:	8a 95       	dec	r24
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <Temp_oila+0xb2>
    2f10:	00 00       	nop
	_delay_us(80);
	adcTempure = ADC_b(7);
    2f12:	87 e0       	ldi	r24, 0x07	; 7
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>
    2f1a:	5c 01       	movw	r10, r24
	adcVoltage = ADC_b(6);
    2f1c:	86 e0       	ldi	r24, 0x06	; 6
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>
    2f24:	7c 01       	movw	r14, r24
	_delay_us(80);
	adcTempure = ADC_b(7);
	adcVoltage = ADC_b(6);
	float res2 = adcToTempure(adcTempure, adcVoltage);
	_delay_us(80);
	adcTempure = ADC_b(7);
    2f26:	b5 01       	movw	r22, r10
    2f28:	88 27       	eor	r24, r24
    2f2a:	77 fd       	sbrc	r23, 7
    2f2c:	80 95       	com	r24
    2f2e:	98 2f       	mov	r25, r24
    2f30:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
    2f34:	5b 01       	movw	r10, r22
    2f36:	6c 01       	movw	r12, r24
	adcVoltage = ADC_b(6);
    2f38:	b7 01       	movw	r22, r14
    2f3a:	88 27       	eor	r24, r24
    2f3c:	77 fd       	sbrc	r23, 7
    2f3e:	80 95       	com	r24
    2f40:	98 2f       	mov	r25, r24
    2f42:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
    2f46:	9b 01       	movw	r18, r22
    2f48:	ac 01       	movw	r20, r24
	float res3 = adcToTempure(adcTempure, adcVoltage);
    2f4a:	c6 01       	movw	r24, r12
    2f4c:	b5 01       	movw	r22, r10
    2f4e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <adcToTempure>
    2f52:	7b 01       	movw	r14, r22
    2f54:	8c 01       	movw	r16, r24

    float res = (res1 + res2 + res3)/3;
    2f56:	c2 01       	movw	r24, r4
    2f58:	b1 01       	movw	r22, r2
    2f5a:	a4 01       	movw	r20, r8
    2f5c:	93 01       	movw	r18, r6
    2f5e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__addsf3>
    2f62:	a8 01       	movw	r20, r16
    2f64:	97 01       	movw	r18, r14
    2f66:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__addsf3>
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e4       	ldi	r20, 0x40	; 64
    2f70:	50 e4       	ldi	r21, 0x40	; 64
    2f72:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__divsf3>
    res=res-5;
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 ea       	ldi	r20, 0xA0	; 160
    2f7c:	50 e4       	ldi	r21, 0x40	; 64
    2f7e:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__subsf3>
	int resint = res;
    2f82:	0e 94 82 21 	call	0x4304	; 0x4304 <__fixsfsi>
    2f86:	9b 01       	movw	r18, r22
    2f88:	ac 01       	movw	r20, r24

	PrintOil(162, 283, resint);
    2f8a:	82 ea       	ldi	r24, 0xA2	; 162
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	6b e1       	ldi	r22, 0x1B	; 27
    2f90:	71 e0       	ldi	r23, 0x01	; 1
    2f92:	a9 01       	movw	r20, r18
    2f94:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <PrintOil>
	AddTask (Temp_oila, 1000);
    2f98:	8d e2       	ldi	r24, 0x2D	; 45
    2f9a:	97 e1       	ldi	r25, 0x17	; 23
    2f9c:	68 ee       	ldi	r22, 0xE8	; 232
    2f9e:	73 e0       	ldi	r23, 0x03	; 3
    2fa0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>

}
    2fa4:	1f 91       	pop	r17
    2fa6:	0f 91       	pop	r16
    2fa8:	ff 90       	pop	r15
    2faa:	ef 90       	pop	r14
    2fac:	df 90       	pop	r13
    2fae:	cf 90       	pop	r12
    2fb0:	bf 90       	pop	r11
    2fb2:	af 90       	pop	r10
    2fb4:	9f 90       	pop	r9
    2fb6:	8f 90       	pop	r8
    2fb8:	7f 90       	pop	r7
    2fba:	6f 90       	pop	r6
    2fbc:	5f 90       	pop	r5
    2fbe:	4f 90       	pop	r4
    2fc0:	3f 90       	pop	r3
    2fc2:	2f 90       	pop	r2
    2fc4:	08 95       	ret

00002fc6 <TaskError>:



void TaskError(void)
{
	if(!(PIND&0b00000100)) if(PIND&0b00010000) lowBrakeFluidPicture=1;
    2fc6:	82 99       	sbic	0x10, 2	; 16
    2fc8:	05 c0       	rjmp	.+10     	; 0x2fd4 <TaskError+0xe>
    2fca:	84 9b       	sbis	0x10, 4	; 16
    2fcc:	03 c0       	rjmp	.+6      	; 0x2fd4 <TaskError+0xe>
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	80 93 89 01 	sts	0x0189, r24
	if(!(PINB&0b01000000)) 
    2fd4:	b6 99       	sbic	0x16, 6	; 22
    2fd6:	06 c0       	rjmp	.+12     	; 0x2fe4 <TaskError+0x1e>
	{
		if(PIND&0b00010000) lowLevelAntifreezePicture=1; 
    2fd8:	84 9b       	sbis	0x10, 4	; 16
    2fda:	06 c0       	rjmp	.+12     	; 0x2fe8 <TaskError+0x22>
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	80 93 87 01 	sts	0x0187, r24
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <TaskError+0x22>
	}
	else 
	{
		lowLevelAntifreezePicture = 0;
    2fe4:	10 92 87 01 	sts	0x0187, r1
	}
	if(!(PIND&0b00010000))
    2fe8:	84 99       	sbic	0x10, 4	; 16
    2fea:	04 c0       	rjmp	.+8      	; 0x2ff4 <TaskError+0x2e>
	{
		lowLevelAntifreezePicture = 0;
    2fec:	10 92 87 01 	sts	0x0187, r1
		lowBrakeFluidPicture=0;
    2ff0:	10 92 89 01 	sts	0x0189, r1
	}	
	
	AddTask (TaskError, 100);
    2ff4:	83 ee       	ldi	r24, 0xE3	; 227
    2ff6:	97 e1       	ldi	r25, 0x17	; 23
    2ff8:	64 e6       	ldi	r22, 0x64	; 100
    2ffa:	70 e0       	ldi	r23, 0x00	; 0
    2ffc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    3000:	08 95       	ret

00003002 <printKartinki>:
}


void printKartinki(void)
{
	Kartinki();
    3002:	0e 94 37 09 	call	0x126e	; 0x126e <Kartinki>
	Error();
    3006:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <Error>
	AddTask (printKartinki, 100);	
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	98 e1       	ldi	r25, 0x18	; 24
    300e:	64 e6       	ldi	r22, 0x64	; 100
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    3016:	08 95       	ret

00003018 <TaskJanuaryData>:
	}	
	AddTask (TaskJanuaryConnect, 100);
}

void TaskJanuaryData(void)
{
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	00 d0       	rcall	.+0      	; 0x301e <TaskJanuaryData+0x6>
    301e:	00 d0       	rcall	.+0      	; 0x3020 <TaskJanuaryData+0x8>
    3020:	00 d0       	rcall	.+0      	; 0x3022 <TaskJanuaryData+0xa>
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
	unsigned char readDataByLocalIdentifier_RLI_ASS[]  = {0x82,0x10,0xF1,0x21,0x01,0xA5};
    3026:	de 01       	movw	r26, r28
    3028:	11 96       	adiw	r26, 0x01	; 1
    302a:	ec e6       	ldi	r30, 0x6C	; 108
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	86 e0       	ldi	r24, 0x06	; 6
    3030:	01 90       	ld	r0, Z+
    3032:	0d 92       	st	X+, r0
    3034:	81 50       	subi	r24, 0x01	; 1
    3036:	e1 f7       	brne	.-8      	; 0x3030 <TaskJanuaryData+0x18>
	if(mode >= connectTrue)
    3038:	80 91 9e 01 	lds	r24, 0x019E
    303c:	90 91 9f 01 	lds	r25, 0x019F
    3040:	85 30       	cpi	r24, 0x05	; 5
    3042:	91 05       	cpc	r25, r1
    3044:	64 f0       	brlt	.+24     	; 0x305e <TaskJanuaryData+0x46>
	{
		SendCommand(readDataByLocalIdentifier_RLI_ASS,6);
    3046:	ce 01       	movw	r24, r28
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	66 e0       	ldi	r22, 0x06	; 6
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	0e 94 b3 03 	call	0x766	; 0x766 <SendCommand>
		mode = connectTrue;
    3052:	85 e0       	ldi	r24, 0x05	; 5
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	90 93 9f 01 	sts	0x019F, r25
    305a:	80 93 9e 01 	sts	0x019E, r24
		
	}
	AddTask (TaskJanuaryData, 60);
    305e:	8c e0       	ldi	r24, 0x0C	; 12
    3060:	98 e1       	ldi	r25, 0x18	; 24
    3062:	6c e3       	ldi	r22, 0x3C	; 60
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    306a:	26 96       	adiw	r28, 0x06	; 6
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <TaskJanuaryConnect>:
		
	AddTask (TaskIgnition, 50);
}

void TaskJanuaryConnect(void)
{
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	00 d0       	rcall	.+0      	; 0x3082 <TaskJanuaryConnect+0x6>
    3082:	00 d0       	rcall	.+0      	; 0x3084 <TaskJanuaryConnect+0x8>
    3084:	0f 92       	push	r0
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62

	unsigned char startCommunication[] = {0x81,0x10,0xf1,0x81,0x03};
    308a:	de 01       	movw	r26, r28
    308c:	11 96       	adiw	r26, 0x01	; 1
    308e:	e2 e7       	ldi	r30, 0x72	; 114
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	85 e0       	ldi	r24, 0x05	; 5
    3094:	01 90       	ld	r0, Z+
    3096:	0d 92       	st	X+, r0
    3098:	81 50       	subi	r24, 0x01	; 1
    309a:	e1 f7       	brne	.-8      	; 0x3094 <TaskJanuaryConnect+0x18>

	if(mode == connectNew)
    309c:	80 91 9e 01 	lds	r24, 0x019E
    30a0:	90 91 9f 01 	lds	r25, 0x019F
    30a4:	82 30       	cpi	r24, 0x02	; 2
    30a6:	91 05       	cpc	r25, r1
    30a8:	31 f4       	brne	.+12     	; 0x30b6 <TaskJanuaryConnect+0x3a>
	{
		SendCommand(startCommunication,5);		
    30aa:	ce 01       	movw	r24, r28
    30ac:	01 96       	adiw	r24, 0x01	; 1
    30ae:	65 e0       	ldi	r22, 0x05	; 5
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	0e 94 b3 03 	call	0x766	; 0x766 <SendCommand>
	}	
	AddTask (TaskJanuaryConnect, 100);
    30b6:	8e e3       	ldi	r24, 0x3E	; 62
    30b8:	98 e1       	ldi	r25, 0x18	; 24
    30ba:	64 e6       	ldi	r22, 0x64	; 100
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <TaskIgnition>:

unsigned char ignitionOld=3;

void TaskIgnition(void)
{
	if(ignitionOld==3)
    30d2:	80 91 6b 00 	lds	r24, 0x006B
    30d6:	83 30       	cpi	r24, 0x03	; 3
    30d8:	b1 f4       	brne	.+44     	; 0x3106 <TaskIgnition+0x34>
	{
		if(ignitionOn())
    30da:	0e 94 a7 1c 	call	0x394e	; 0x394e <ignitionOn>
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	81 f0       	breq	.+32     	; 0x3102 <TaskIgnition+0x30>
		{
			ignitionOld = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	80 93 6b 00 	sts	0x006B, r24
			if(mode != offMode)
    30e8:	80 91 9e 01 	lds	r24, 0x019E
    30ec:	90 91 9f 01 	lds	r25, 0x019F
    30f0:	00 97       	sbiw	r24, 0x00	; 0
    30f2:	49 f0       	breq	.+18     	; 0x3106 <TaskIgnition+0x34>
			{
				mode = connectNew;
    30f4:	82 e0       	ldi	r24, 0x02	; 2
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	90 93 9f 01 	sts	0x019F, r25
    30fc:	80 93 9e 01 	sts	0x019E, r24
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <TaskIgnition+0x34>
			}
		}
		else ignitionOld = 0;
    3102:	10 92 6b 00 	sts	0x006B, r1
	}
	if(ignitionOld==0 && ignitionOn())
    3106:	80 91 6b 00 	lds	r24, 0x006B
    310a:	88 23       	and	r24, r24
    310c:	99 f4       	brne	.+38     	; 0x3134 <TaskIgnition+0x62>
    310e:	0e 94 a7 1c 	call	0x394e	; 0x394e <ignitionOn>
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	79 f0       	breq	.+30     	; 0x3134 <TaskIgnition+0x62>
	{
		ignitionOld=1;
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	80 93 6b 00 	sts	0x006B, r24
		if(mode != offMode)
    311c:	80 91 9e 01 	lds	r24, 0x019E
    3120:	90 91 9f 01 	lds	r25, 0x019F
    3124:	00 97       	sbiw	r24, 0x00	; 0
    3126:	31 f0       	breq	.+12     	; 0x3134 <TaskIgnition+0x62>
		{
			mode = connectNew;
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	90 93 9f 01 	sts	0x019F, r25
    3130:	80 93 9e 01 	sts	0x019E, r24
		}
	}
	if(ignitionOld==1 && !ignitionOn())
    3134:	80 91 6b 00 	lds	r24, 0x006B
    3138:	81 30       	cpi	r24, 0x01	; 1
    313a:	91 f4       	brne	.+36     	; 0x3160 <TaskIgnition+0x8e>
    313c:	0e 94 a7 1c 	call	0x394e	; 0x394e <ignitionOn>
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	71 f4       	brne	.+28     	; 0x3160 <TaskIgnition+0x8e>
	{
		ignitionOld=0;
    3144:	10 92 6b 00 	sts	0x006B, r1
		if(mode != offMode)
    3148:	80 91 9e 01 	lds	r24, 0x019E
    314c:	90 91 9f 01 	lds	r25, 0x019F
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	31 f0       	breq	.+12     	; 0x3160 <TaskIgnition+0x8e>
		{
			mode = onMode;
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	90 93 9f 01 	sts	0x019F, r25
    315c:	80 93 9e 01 	sts	0x019E, r24
		}
	}
		
	AddTask (TaskIgnition, 50);
    3160:	89 e6       	ldi	r24, 0x69	; 105
    3162:	98 e1       	ldi	r25, 0x18	; 24
    3164:	62 e3       	ldi	r22, 0x32	; 50
    3166:	70 e0       	ldi	r23, 0x00	; 0
    3168:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    316c:	08 95       	ret

0000316e <TaskPrintSred>:
}

int dataVr;

void TaskPrintSred(void)
{
    316e:	ef 92       	push	r14
    3170:	ff 92       	push	r15
    3172:	0f 93       	push	r16
    3174:	1f 93       	push	r17
    3176:	cf 93       	push	r28
    3178:	df 93       	push	r29
	//fuelConsumption = mode;//////////////////////////
	if(mode>= connectTrue && ignitionOn())
    317a:	80 91 9e 01 	lds	r24, 0x019E
    317e:	90 91 9f 01 	lds	r25, 0x019F
    3182:	85 30       	cpi	r24, 0x05	; 5
    3184:	91 05       	cpc	r25, r1
    3186:	8c f1       	brlt	.+98     	; 0x31ea <TaskPrintSred+0x7c>
    3188:	0e 94 a7 1c 	call	0x394e	; 0x394e <ignitionOn>
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	69 f1       	breq	.+90     	; 0x31ea <TaskPrintSred+0x7c>
	{
		if(coolendTemperature<0) TERM = 1;
    3190:	80 91 8c 01 	lds	r24, 0x018C
    3194:	90 91 8d 01 	lds	r25, 0x018D
    3198:	97 fd       	sbrc	r25, 7
    319a:	23 c0       	rjmp	.+70     	; 0x31e2 <TaskPrintSred+0x74>
		else if(coolendTemperature<40 && rpm > 2400)
    319c:	88 32       	cpi	r24, 0x28	; 40
    319e:	91 05       	cpc	r25, r1
    31a0:	4c f4       	brge	.+18     	; 0x31b4 <TaskPrintSred+0x46>
    31a2:	80 91 92 01 	lds	r24, 0x0192
    31a6:	90 91 93 01 	lds	r25, 0x0193
    31aa:	29 e0       	ldi	r18, 0x09	; 9
    31ac:	81 36       	cpi	r24, 0x61	; 97
    31ae:	92 07       	cpc	r25, r18
    31b0:	24 f0       	brlt	.+8      	; 0x31ba <TaskPrintSred+0x4c>
    31b2:	17 c0       	rjmp	.+46     	; 0x31e2 <TaskPrintSred+0x74>
		{ 
			TERM = 1;
		}
		else if(coolendTemperature<60 && rpm > 3400)
    31b4:	8c 33       	cpi	r24, 0x3C	; 60
    31b6:	91 05       	cpc	r25, r1
    31b8:	4c f4       	brge	.+18     	; 0x31cc <TaskPrintSred+0x5e>
    31ba:	80 91 92 01 	lds	r24, 0x0192
    31be:	90 91 93 01 	lds	r25, 0x0193
    31c2:	2d e0       	ldi	r18, 0x0D	; 13
    31c4:	89 34       	cpi	r24, 0x49	; 73
    31c6:	92 07       	cpc	r25, r18
    31c8:	24 f0       	brlt	.+8      	; 0x31d2 <TaskPrintSred+0x64>
    31ca:	0b c0       	rjmp	.+22     	; 0x31e2 <TaskPrintSred+0x74>
		{ 
			TERM = 1;
		}
		else if(coolendTemperature<80 && rpm >4200)
    31cc:	80 35       	cpi	r24, 0x50	; 80
    31ce:	91 05       	cpc	r25, r1
    31d0:	64 f4       	brge	.+24     	; 0x31ea <TaskPrintSred+0x7c>
    31d2:	80 91 92 01 	lds	r24, 0x0192
    31d6:	90 91 93 01 	lds	r25, 0x0193
    31da:	20 e1       	ldi	r18, 0x10	; 16
    31dc:	89 36       	cpi	r24, 0x69	; 105
    31de:	92 07       	cpc	r25, r18
    31e0:	24 f0       	brlt	.+8      	; 0x31ea <TaskPrintSred+0x7c>
		{ 
			TERM = 1;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	80 93 8a 01 	sts	0x018A, r24
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <TaskPrintSred+0x80>
		else TERM = 0;

	}
	else
	{
		TERM = 0;
    31ea:	10 92 8a 01 	sts	0x018A, r1
	}



	if(!lowLevelAntifreezePicture && !lowBrakeFluidPicture)
    31ee:	80 91 87 01 	lds	r24, 0x0187
    31f2:	88 23       	and	r24, r24
    31f4:	09 f0       	breq	.+2      	; 0x31f8 <TaskPrintSred+0x8a>
    31f6:	7d c3       	rjmp	.+1786   	; 0x38f2 <TaskPrintSred+0x784>
    31f8:	80 91 89 01 	lds	r24, 0x0189
    31fc:	88 23       	and	r24, r24
    31fe:	09 f0       	breq	.+2      	; 0x3202 <TaskPrintSred+0x94>
    3200:	78 c3       	rjmp	.+1776   	; 0x38f2 <TaskPrintSred+0x784>
	{
		if(modeLcd == 0)
    3202:	80 91 a0 01 	lds	r24, 0x01A0
    3206:	88 23       	and	r24, r24
    3208:	d1 f5       	brne	.+116    	; 0x327e <TaskPrintSred+0x110>
		{
			if(fuelConsumption > 99) {
    320a:	20 91 9c 01 	lds	r18, 0x019C
    320e:	30 91 9d 01 	lds	r19, 0x019D
    3212:	24 36       	cpi	r18, 0x64	; 100
    3214:	31 05       	cpc	r19, r1
    3216:	e4 f0       	brlt	.+56     	; 0x3250 <TaskPrintSred+0xe2>
			PrintJan((fuelConsumption%1000)/100,(fuelConsumption%100)/10,14,fuelConsumption%10);
    3218:	c9 01       	movw	r24, r18
    321a:	68 ee       	ldi	r22, 0xE8	; 232
    321c:	73 e0       	ldi	r23, 0x03	; 3
    321e:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3222:	e4 e6       	ldi	r30, 0x64	; 100
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	bf 01       	movw	r22, r30
    3228:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    322c:	8b 01       	movw	r16, r22
    322e:	c9 01       	movw	r24, r18
    3230:	bf 01       	movw	r22, r30
    3232:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3236:	ea e0       	ldi	r30, 0x0A	; 10
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	bf 01       	movw	r22, r30
    323c:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3240:	eb 01       	movw	r28, r22
    3242:	c9 01       	movw	r24, r18
    3244:	bf 01       	movw	r22, r30
    3246:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    324a:	9c 01       	movw	r18, r24
    324c:	c8 01       	movw	r24, r16
    324e:	12 c0       	rjmp	.+36     	; 0x3274 <TaskPrintSred+0x106>
			} else {
			PrintJan(13,(fuelConsumption%100)/10,14,fuelConsumption%10);
    3250:	c9 01       	movw	r24, r18
    3252:	64 e6       	ldi	r22, 0x64	; 100
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    325a:	ea e0       	ldi	r30, 0x0A	; 10
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	bf 01       	movw	r22, r30
    3260:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3264:	eb 01       	movw	r28, r22
    3266:	c9 01       	movw	r24, r18
    3268:	bf 01       	movw	r22, r30
    326a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    326e:	9c 01       	movw	r18, r24
    3270:	8d e0       	ldi	r24, 0x0D	; 13
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	be 01       	movw	r22, r28
    3276:	4e e0       	ldi	r20, 0x0E	; 14
    3278:	50 e0       	ldi	r21, 0x00	; 0
    327a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			}
		}
		if(modeLcd == 1)
    327e:	80 91 a0 01 	lds	r24, 0x01A0
    3282:	81 30       	cpi	r24, 0x01	; 1
    3284:	d1 f5       	brne	.+116    	; 0x32fa <TaskPrintSred+0x18c>
		{
			if(injectionPulseTime > 99) {
    3286:	20 91 9a 01 	lds	r18, 0x019A
    328a:	30 91 9b 01 	lds	r19, 0x019B
    328e:	24 36       	cpi	r18, 0x64	; 100
    3290:	31 05       	cpc	r19, r1
    3292:	e4 f0       	brlt	.+56     	; 0x32cc <TaskPrintSred+0x15e>
			PrintJan((injectionPulseTime%1000)/100,(injectionPulseTime%100)/10, 14, injectionPulseTime%10);
    3294:	c9 01       	movw	r24, r18
    3296:	68 ee       	ldi	r22, 0xE8	; 232
    3298:	73 e0       	ldi	r23, 0x03	; 3
    329a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    329e:	e4 e6       	ldi	r30, 0x64	; 100
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	bf 01       	movw	r22, r30
    32a4:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    32a8:	8b 01       	movw	r16, r22
    32aa:	c9 01       	movw	r24, r18
    32ac:	bf 01       	movw	r22, r30
    32ae:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    32b2:	ea e0       	ldi	r30, 0x0A	; 10
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	bf 01       	movw	r22, r30
    32b8:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    32bc:	eb 01       	movw	r28, r22
    32be:	c9 01       	movw	r24, r18
    32c0:	bf 01       	movw	r22, r30
    32c2:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    32c6:	9c 01       	movw	r18, r24
    32c8:	c8 01       	movw	r24, r16
    32ca:	12 c0       	rjmp	.+36     	; 0x32f0 <TaskPrintSred+0x182>
			} else {
			PrintJan(13,(injectionPulseTime%100)/10, 14, injectionPulseTime%10);
    32cc:	c9 01       	movw	r24, r18
    32ce:	64 e6       	ldi	r22, 0x64	; 100
    32d0:	70 e0       	ldi	r23, 0x00	; 0
    32d2:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    32d6:	ea e0       	ldi	r30, 0x0A	; 10
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	bf 01       	movw	r22, r30
    32dc:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    32e0:	eb 01       	movw	r28, r22
    32e2:	c9 01       	movw	r24, r18
    32e4:	bf 01       	movw	r22, r30
    32e6:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    32ea:	9c 01       	movw	r18, r24
    32ec:	8d e0       	ldi	r24, 0x0D	; 13
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	be 01       	movw	r22, r28
    32f2:	4e e0       	ldi	r20, 0x0E	; 14
    32f4:	50 e0       	ldi	r21, 0x00	; 0
    32f6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			}

		}
		if(modeLcd == 2)
    32fa:	80 91 a0 01 	lds	r24, 0x01A0
    32fe:	82 30       	cpi	r24, 0x02	; 2
    3300:	09 f0       	breq	.+2      	; 0x3304 <TaskPrintSred+0x196>
    3302:	7a c0       	rjmp	.+244    	; 0x33f8 <TaskPrintSred+0x28a>
		{
			char b;
			if(ignitionTiming == 0) PrintJan(13, 13, 13, 0);
    3304:	80 91 98 01 	lds	r24, 0x0198
    3308:	90 91 99 01 	lds	r25, 0x0199
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	51 f4       	brne	.+20     	; 0x3324 <TaskPrintSred+0x1b6>
    3310:	8d e0       	ldi	r24, 0x0D	; 13
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	6d e0       	ldi	r22, 0x0D	; 13
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	4d e0       	ldi	r20, 0x0D	; 13
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			dataVr = ignitionTiming;
    3324:	20 91 98 01 	lds	r18, 0x0198
    3328:	30 91 99 01 	lds	r19, 0x0199
    332c:	30 93 57 02 	sts	0x0257, r19
    3330:	20 93 56 02 	sts	0x0256, r18
			if(ignitionTiming<0)
    3334:	37 ff       	sbrs	r19, 7
    3336:	33 c0       	rjmp	.+102    	; 0x339e <TaskPrintSred+0x230>
			{
				dataVr *= -1;
    3338:	30 95       	com	r19
    333a:	21 95       	neg	r18
    333c:	3f 4f       	sbci	r19, 0xFF	; 255
    333e:	30 93 57 02 	sts	0x0257, r19
    3342:	20 93 56 02 	sts	0x0256, r18
				if(dataVr>=1 && dataVr <= 9) PrintJan(13, 13, 12, dataVr);
    3346:	c9 01       	movw	r24, r18
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	89 30       	cpi	r24, 0x09	; 9
    334c:	91 05       	cpc	r25, r1
    334e:	40 f4       	brcc	.+16     	; 0x3360 <TaskPrintSred+0x1f2>
    3350:	8d e0       	ldi	r24, 0x0D	; 13
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	6d e0       	ldi	r22, 0x0D	; 13
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	4c e0       	ldi	r20, 0x0C	; 12
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
				if(dataVr>=10 && dataVr <= 99) PrintJan(13, 12, (dataVr%100)/10, dataVr%10);
    3360:	20 91 56 02 	lds	r18, 0x0256
    3364:	30 91 57 02 	lds	r19, 0x0257
    3368:	c9 01       	movw	r24, r18
    336a:	0a 97       	sbiw	r24, 0x0a	; 10
    336c:	8a 35       	cpi	r24, 0x5A	; 90
    336e:	91 05       	cpc	r25, r1
    3370:	08 f0       	brcs	.+2      	; 0x3374 <TaskPrintSred+0x206>
    3372:	42 c0       	rjmp	.+132    	; 0x33f8 <TaskPrintSred+0x28a>
    3374:	c9 01       	movw	r24, r18
    3376:	64 e6       	ldi	r22, 0x64	; 100
    3378:	70 e0       	ldi	r23, 0x00	; 0
    337a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    337e:	ea e0       	ldi	r30, 0x0A	; 10
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	bf 01       	movw	r22, r30
    3384:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3388:	eb 01       	movw	r28, r22
    338a:	c9 01       	movw	r24, r18
    338c:	bf 01       	movw	r22, r30
    338e:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3392:	9c 01       	movw	r18, r24
    3394:	8d e0       	ldi	r24, 0x0D	; 13
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	6c e0       	ldi	r22, 0x0C	; 12
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	2a c0       	rjmp	.+84     	; 0x33f2 <TaskPrintSred+0x284>
			}
			else
			{
				if(dataVr>=1 && dataVr <= 9) PrintJan(13, 13, 13, dataVr);
    339e:	c9 01       	movw	r24, r18
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	89 30       	cpi	r24, 0x09	; 9
    33a4:	91 05       	cpc	r25, r1
    33a6:	40 f4       	brcc	.+16     	; 0x33b8 <TaskPrintSred+0x24a>
    33a8:	8d e0       	ldi	r24, 0x0D	; 13
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	6d e0       	ldi	r22, 0x0D	; 13
    33ae:	70 e0       	ldi	r23, 0x00	; 0
    33b0:	4d e0       	ldi	r20, 0x0D	; 13
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
				if(dataVr>=10 && dataVr <= 99) PrintJan(13, 13, (dataVr%100)/10, dataVr%10);
    33b8:	20 91 56 02 	lds	r18, 0x0256
    33bc:	30 91 57 02 	lds	r19, 0x0257
    33c0:	c9 01       	movw	r24, r18
    33c2:	0a 97       	sbiw	r24, 0x0a	; 10
    33c4:	8a 35       	cpi	r24, 0x5A	; 90
    33c6:	91 05       	cpc	r25, r1
    33c8:	b8 f4       	brcc	.+46     	; 0x33f8 <TaskPrintSred+0x28a>
    33ca:	c9 01       	movw	r24, r18
    33cc:	64 e6       	ldi	r22, 0x64	; 100
    33ce:	70 e0       	ldi	r23, 0x00	; 0
    33d0:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    33d4:	ea e0       	ldi	r30, 0x0A	; 10
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	bf 01       	movw	r22, r30
    33da:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    33de:	eb 01       	movw	r28, r22
    33e0:	c9 01       	movw	r24, r18
    33e2:	bf 01       	movw	r22, r30
    33e4:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    33e8:	9c 01       	movw	r18, r24
    33ea:	8d e0       	ldi	r24, 0x0D	; 13
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	6d e0       	ldi	r22, 0x0D	; 13
    33f0:	70 e0       	ldi	r23, 0x00	; 0
    33f2:	ae 01       	movw	r20, r28
    33f4:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			}
		}
		if(modeLcd == 3)
    33f8:	80 91 a0 01 	lds	r24, 0x01A0
    33fc:	83 30       	cpi	r24, 0x03	; 3
    33fe:	21 f5       	brne	.+72     	; 0x3448 <TaskPrintSred+0x2da>
		{
			PrintJan((injectionTimeCorrection%1000)/100, 14,(injectionTimeCorrection%100)/10, injectionTimeCorrection%10);
    3400:	20 91 96 01 	lds	r18, 0x0196
    3404:	30 91 97 01 	lds	r19, 0x0197
    3408:	c9 01       	movw	r24, r18
    340a:	68 ee       	ldi	r22, 0xE8	; 232
    340c:	73 e0       	ldi	r23, 0x03	; 3
    340e:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3412:	e4 e6       	ldi	r30, 0x64	; 100
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	bf 01       	movw	r22, r30
    3418:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    341c:	8b 01       	movw	r16, r22
    341e:	c9 01       	movw	r24, r18
    3420:	bf 01       	movw	r22, r30
    3422:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3426:	ea e0       	ldi	r30, 0x0A	; 10
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	bf 01       	movw	r22, r30
    342c:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3430:	eb 01       	movw	r28, r22
    3432:	c9 01       	movw	r24, r18
    3434:	bf 01       	movw	r22, r30
    3436:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    343a:	9c 01       	movw	r18, r24
    343c:	c8 01       	movw	r24, r16
    343e:	6e e0       	ldi	r22, 0x0E	; 14
    3440:	70 e0       	ldi	r23, 0x00	; 0
    3442:	ae 01       	movw	r20, r28
    3444:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
		}
		if(modeLcd == 4)
    3448:	80 91 a0 01 	lds	r24, 0x01A0
    344c:	84 30       	cpi	r24, 0x04	; 4
    344e:	09 f0       	breq	.+2      	; 0x3452 <TaskPrintSred+0x2e4>
    3450:	4d c0       	rjmp	.+154    	; 0x34ec <TaskPrintSred+0x37e>
		{
			if(positionRhh > 99) {
    3452:	20 91 94 01 	lds	r18, 0x0194
    3456:	30 91 95 01 	lds	r19, 0x0195
    345a:	24 36       	cpi	r18, 0x64	; 100
    345c:	31 05       	cpc	r19, r1
    345e:	fc f0       	brlt	.+62     	; 0x349e <TaskPrintSred+0x330>
			PrintJan(13, (positionRhh%1000)/100,(positionRhh%100)/10, positionRhh%10);
    3460:	c9 01       	movw	r24, r18
    3462:	68 ee       	ldi	r22, 0xE8	; 232
    3464:	73 e0       	ldi	r23, 0x03	; 3
    3466:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    346a:	e4 e6       	ldi	r30, 0x64	; 100
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	bf 01       	movw	r22, r30
    3470:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3474:	eb 01       	movw	r28, r22
    3476:	c9 01       	movw	r24, r18
    3478:	bf 01       	movw	r22, r30
    347a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    347e:	ea e0       	ldi	r30, 0x0A	; 10
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	bf 01       	movw	r22, r30
    3484:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3488:	8b 01       	movw	r16, r22
    348a:	c9 01       	movw	r24, r18
    348c:	bf 01       	movw	r22, r30
    348e:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3492:	9c 01       	movw	r18, r24
    3494:	8d e0       	ldi	r24, 0x0D	; 13
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	be 01       	movw	r22, r28
    349a:	a8 01       	movw	r20, r16
    349c:	25 c0       	rjmp	.+74     	; 0x34e8 <TaskPrintSred+0x37a>
			}
			else if(positionRhh >9) {
    349e:	2a 30       	cpi	r18, 0x0A	; 10
    34a0:	31 05       	cpc	r19, r1
    34a2:	b4 f0       	brlt	.+44     	; 0x34d0 <TaskPrintSred+0x362>
			PrintJan(13, 13,(positionRhh%100)/10, positionRhh%10); 
    34a4:	c9 01       	movw	r24, r18
    34a6:	64 e6       	ldi	r22, 0x64	; 100
    34a8:	70 e0       	ldi	r23, 0x00	; 0
    34aa:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    34ae:	ea e0       	ldi	r30, 0x0A	; 10
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	bf 01       	movw	r22, r30
    34b4:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    34b8:	eb 01       	movw	r28, r22
    34ba:	c9 01       	movw	r24, r18
    34bc:	bf 01       	movw	r22, r30
    34be:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    34c2:	9c 01       	movw	r18, r24
    34c4:	8d e0       	ldi	r24, 0x0D	; 13
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	6d e0       	ldi	r22, 0x0D	; 13
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	ae 01       	movw	r20, r28
    34ce:	0c c0       	rjmp	.+24     	; 0x34e8 <TaskPrintSred+0x37a>
			}
			else {
			PrintJan(13, 13,13, positionRhh%10); 
    34d0:	c9 01       	movw	r24, r18
    34d2:	6a e0       	ldi	r22, 0x0A	; 10
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    34da:	9c 01       	movw	r18, r24
    34dc:	8d e0       	ldi	r24, 0x0D	; 13
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	6d e0       	ldi	r22, 0x0D	; 13
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	4d e0       	ldi	r20, 0x0D	; 13
    34e6:	50 e0       	ldi	r21, 0x00	; 0
    34e8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			}
		}
		if(modeLcd == 5)
    34ec:	80 91 a0 01 	lds	r24, 0x01A0
    34f0:	85 30       	cpi	r24, 0x05	; 5
    34f2:	09 f0       	breq	.+2      	; 0x34f6 <TaskPrintSred+0x388>
    34f4:	67 c0       	rjmp	.+206    	; 0x35c4 <TaskPrintSred+0x456>
		{
			if(rpm > 999) {
    34f6:	20 91 92 01 	lds	r18, 0x0192
    34fa:	30 91 93 01 	lds	r19, 0x0193
    34fe:	83 e0       	ldi	r24, 0x03	; 3
    3500:	28 3e       	cpi	r18, 0xE8	; 232
    3502:	38 07       	cpc	r19, r24
    3504:	34 f1       	brlt	.+76     	; 0x3552 <TaskPrintSred+0x3e4>
			PrintJan((rpm%10000)/1000, (rpm%1000)/100,(rpm%100)/10, rpm%10);
    3506:	c9 01       	movw	r24, r18
    3508:	60 e1       	ldi	r22, 0x10	; 16
    350a:	77 e2       	ldi	r23, 0x27	; 39
    350c:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3510:	e8 ee       	ldi	r30, 0xE8	; 232
    3512:	f3 e0       	ldi	r31, 0x03	; 3
    3514:	bf 01       	movw	r22, r30
    3516:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    351a:	7b 01       	movw	r14, r22
    351c:	c9 01       	movw	r24, r18
    351e:	bf 01       	movw	r22, r30
    3520:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3524:	e4 e6       	ldi	r30, 0x64	; 100
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	bf 01       	movw	r22, r30
    352a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    352e:	eb 01       	movw	r28, r22
    3530:	c9 01       	movw	r24, r18
    3532:	bf 01       	movw	r22, r30
    3534:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3538:	ea e0       	ldi	r30, 0x0A	; 10
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	bf 01       	movw	r22, r30
    353e:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3542:	8b 01       	movw	r16, r22
    3544:	c9 01       	movw	r24, r18
    3546:	bf 01       	movw	r22, r30
    3548:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    354c:	9c 01       	movw	r18, r24
    354e:	c7 01       	movw	r24, r14
    3550:	1f c0       	rjmp	.+62     	; 0x3590 <TaskPrintSred+0x422>
			} else if(rpm > 99) {
    3552:	24 36       	cpi	r18, 0x64	; 100
    3554:	31 05       	cpc	r19, r1
    3556:	fc f0       	brlt	.+62     	; 0x3596 <TaskPrintSred+0x428>
			PrintJan(13, (rpm%1000)/100,(rpm%100)/10, rpm%10);
    3558:	c9 01       	movw	r24, r18
    355a:	68 ee       	ldi	r22, 0xE8	; 232
    355c:	73 e0       	ldi	r23, 0x03	; 3
    355e:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3562:	e4 e6       	ldi	r30, 0x64	; 100
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	bf 01       	movw	r22, r30
    3568:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    356c:	eb 01       	movw	r28, r22
    356e:	c9 01       	movw	r24, r18
    3570:	bf 01       	movw	r22, r30
    3572:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3576:	ea e0       	ldi	r30, 0x0A	; 10
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	bf 01       	movw	r22, r30
    357c:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3580:	8b 01       	movw	r16, r22
    3582:	c9 01       	movw	r24, r18
    3584:	bf 01       	movw	r22, r30
    3586:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    358a:	9c 01       	movw	r18, r24
    358c:	8d e0       	ldi	r24, 0x0D	; 13
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	be 01       	movw	r22, r28
    3592:	a8 01       	movw	r20, r16
    3594:	15 c0       	rjmp	.+42     	; 0x35c0 <TaskPrintSred+0x452>
			} else {
			PrintJan(13, 13,(rpm%100)/10, rpm%10);
    3596:	c9 01       	movw	r24, r18
    3598:	64 e6       	ldi	r22, 0x64	; 100
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    35a0:	ea e0       	ldi	r30, 0x0A	; 10
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	bf 01       	movw	r22, r30
    35a6:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    35aa:	eb 01       	movw	r28, r22
    35ac:	c9 01       	movw	r24, r18
    35ae:	bf 01       	movw	r22, r30
    35b0:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    35b4:	9c 01       	movw	r18, r24
    35b6:	8d e0       	ldi	r24, 0x0D	; 13
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	6d e0       	ldi	r22, 0x0D	; 13
    35bc:	70 e0       	ldi	r23, 0x00	; 0
    35be:	ae 01       	movw	r20, r28
    35c0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			}

		}
		if(modeLcd == 6)
    35c4:	80 91 a0 01 	lds	r24, 0x01A0
    35c8:	86 30       	cpi	r24, 0x06	; 6
    35ca:	09 f0       	breq	.+2      	; 0x35ce <TaskPrintSred+0x460>
    35cc:	4d c0       	rjmp	.+154    	; 0x3668 <TaskPrintSred+0x4fa>
		{
			if(throttlePosition >99) {
    35ce:	20 91 90 01 	lds	r18, 0x0190
    35d2:	30 91 91 01 	lds	r19, 0x0191
    35d6:	24 36       	cpi	r18, 0x64	; 100
    35d8:	31 05       	cpc	r19, r1
    35da:	fc f0       	brlt	.+62     	; 0x361a <TaskPrintSred+0x4ac>
			PrintJan(13, (throttlePosition%1000)/100,(throttlePosition%100)/10, throttlePosition%10);
    35dc:	c9 01       	movw	r24, r18
    35de:	68 ee       	ldi	r22, 0xE8	; 232
    35e0:	73 e0       	ldi	r23, 0x03	; 3
    35e2:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    35e6:	e4 e6       	ldi	r30, 0x64	; 100
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	bf 01       	movw	r22, r30
    35ec:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    35f0:	eb 01       	movw	r28, r22
    35f2:	c9 01       	movw	r24, r18
    35f4:	bf 01       	movw	r22, r30
    35f6:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    35fa:	ea e0       	ldi	r30, 0x0A	; 10
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	bf 01       	movw	r22, r30
    3600:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3604:	8b 01       	movw	r16, r22
    3606:	c9 01       	movw	r24, r18
    3608:	bf 01       	movw	r22, r30
    360a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    360e:	9c 01       	movw	r18, r24
    3610:	8d e0       	ldi	r24, 0x0D	; 13
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	be 01       	movw	r22, r28
    3616:	a8 01       	movw	r20, r16
    3618:	25 c0       	rjmp	.+74     	; 0x3664 <TaskPrintSred+0x4f6>
			} else if(throttlePosition > 9) {
    361a:	2a 30       	cpi	r18, 0x0A	; 10
    361c:	31 05       	cpc	r19, r1
    361e:	b4 f0       	brlt	.+44     	; 0x364c <TaskPrintSred+0x4de>
			PrintJan(13, 13,(throttlePosition%100)/10, throttlePosition%10);
    3620:	c9 01       	movw	r24, r18
    3622:	64 e6       	ldi	r22, 0x64	; 100
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    362a:	ea e0       	ldi	r30, 0x0A	; 10
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	bf 01       	movw	r22, r30
    3630:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3634:	eb 01       	movw	r28, r22
    3636:	c9 01       	movw	r24, r18
    3638:	bf 01       	movw	r22, r30
    363a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    363e:	9c 01       	movw	r18, r24
    3640:	8d e0       	ldi	r24, 0x0D	; 13
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	6d e0       	ldi	r22, 0x0D	; 13
    3646:	70 e0       	ldi	r23, 0x00	; 0
    3648:	ae 01       	movw	r20, r28
    364a:	0c c0       	rjmp	.+24     	; 0x3664 <TaskPrintSred+0x4f6>
			} else {
			PrintJan(13, 13,13, throttlePosition%10);
    364c:	c9 01       	movw	r24, r18
    364e:	6a e0       	ldi	r22, 0x0A	; 10
    3650:	70 e0       	ldi	r23, 0x00	; 0
    3652:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3656:	9c 01       	movw	r18, r24
    3658:	8d e0       	ldi	r24, 0x0D	; 13
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	6d e0       	ldi	r22, 0x0D	; 13
    365e:	70 e0       	ldi	r23, 0x00	; 0
    3660:	4d e0       	ldi	r20, 0x0D	; 13
    3662:	50 e0       	ldi	r21, 0x00	; 0
    3664:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			}
		}
		if(modeLcd == 7)
    3668:	80 91 a0 01 	lds	r24, 0x01A0
    366c:	87 30       	cpi	r24, 0x07	; 7
    366e:	d1 f5       	brne	.+116    	; 0x36e4 <TaskPrintSred+0x576>
		{
			if(fuelAir > 99) {
    3670:	20 91 8e 01 	lds	r18, 0x018E
    3674:	30 91 8f 01 	lds	r19, 0x018F
    3678:	24 36       	cpi	r18, 0x64	; 100
    367a:	31 05       	cpc	r19, r1
    367c:	e4 f0       	brlt	.+56     	; 0x36b6 <TaskPrintSred+0x548>
			PrintJan((fuelAir%1000)/100,(fuelAir%100)/10,14,fuelAir%10);
    367e:	c9 01       	movw	r24, r18
    3680:	68 ee       	ldi	r22, 0xE8	; 232
    3682:	73 e0       	ldi	r23, 0x03	; 3
    3684:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3688:	e4 e6       	ldi	r30, 0x64	; 100
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	bf 01       	movw	r22, r30
    368e:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3692:	8b 01       	movw	r16, r22
    3694:	c9 01       	movw	r24, r18
    3696:	bf 01       	movw	r22, r30
    3698:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    369c:	ea e0       	ldi	r30, 0x0A	; 10
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	bf 01       	movw	r22, r30
    36a2:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    36a6:	eb 01       	movw	r28, r22
    36a8:	c9 01       	movw	r24, r18
    36aa:	bf 01       	movw	r22, r30
    36ac:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    36b0:	9c 01       	movw	r18, r24
    36b2:	c8 01       	movw	r24, r16
    36b4:	12 c0       	rjmp	.+36     	; 0x36da <TaskPrintSred+0x56c>
			} else {
			PrintJan(13,(fuelAir%100)/10,14,fuelAir%10);
    36b6:	c9 01       	movw	r24, r18
    36b8:	64 e6       	ldi	r22, 0x64	; 100
    36ba:	70 e0       	ldi	r23, 0x00	; 0
    36bc:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    36c0:	ea e0       	ldi	r30, 0x0A	; 10
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	bf 01       	movw	r22, r30
    36c6:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    36ca:	eb 01       	movw	r28, r22
    36cc:	c9 01       	movw	r24, r18
    36ce:	bf 01       	movw	r22, r30
    36d0:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    36d4:	9c 01       	movw	r18, r24
    36d6:	8d e0       	ldi	r24, 0x0D	; 13
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	be 01       	movw	r22, r28
    36dc:	4e e0       	ldi	r20, 0x0E	; 14
    36de:	50 e0       	ldi	r21, 0x00	; 0
    36e0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			}
		}
		if(modeLcd == 8)
    36e4:	80 91 a0 01 	lds	r24, 0x01A0
    36e8:	88 30       	cpi	r24, 0x08	; 8
    36ea:	09 f0       	breq	.+2      	; 0x36ee <TaskPrintSred+0x580>
    36ec:	c7 c0       	rjmp	.+398    	; 0x387c <TaskPrintSred+0x70e>
		{
			char a;
			if(coolendTemperature == 0) PrintJan(13, 13, 13, 0);
    36ee:	80 91 8c 01 	lds	r24, 0x018C
    36f2:	90 91 8d 01 	lds	r25, 0x018D
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	51 f4       	brne	.+20     	; 0x370e <TaskPrintSred+0x5a0>
    36fa:	8d e0       	ldi	r24, 0x0D	; 13
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	6d e0       	ldi	r22, 0x0D	; 13
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	4d e0       	ldi	r20, 0x0D	; 13
    3704:	50 e0       	ldi	r21, 0x00	; 0
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			dataVr = coolendTemperature;
    370e:	20 91 8c 01 	lds	r18, 0x018C
    3712:	30 91 8d 01 	lds	r19, 0x018D
    3716:	30 93 57 02 	sts	0x0257, r19
    371a:	20 93 56 02 	sts	0x0256, r18
			if(dataVr<0)
    371e:	37 ff       	sbrs	r19, 7
    3720:	59 c0       	rjmp	.+178    	; 0x37d4 <TaskPrintSred+0x666>
			{
				dataVr *= -1;
    3722:	30 95       	com	r19
    3724:	21 95       	neg	r18
    3726:	3f 4f       	sbci	r19, 0xFF	; 255
    3728:	30 93 57 02 	sts	0x0257, r19
    372c:	20 93 56 02 	sts	0x0256, r18
				if(dataVr>=1 && dataVr <= 9) PrintJan(13, 13, 12, dataVr);
    3730:	c9 01       	movw	r24, r18
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	89 30       	cpi	r24, 0x09	; 9
    3736:	91 05       	cpc	r25, r1
    3738:	40 f4       	brcc	.+16     	; 0x374a <TaskPrintSred+0x5dc>
    373a:	8d e0       	ldi	r24, 0x0D	; 13
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	6d e0       	ldi	r22, 0x0D	; 13
    3740:	70 e0       	ldi	r23, 0x00	; 0
    3742:	4c e0       	ldi	r20, 0x0C	; 12
    3744:	50 e0       	ldi	r21, 0x00	; 0
    3746:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
				if(dataVr>=10 && dataVr <= 99) PrintJan(13, 12, (dataVr%100)/10, dataVr%10);
    374a:	20 91 56 02 	lds	r18, 0x0256
    374e:	30 91 57 02 	lds	r19, 0x0257
    3752:	c9 01       	movw	r24, r18
    3754:	0a 97       	sbiw	r24, 0x0a	; 10
    3756:	8a 35       	cpi	r24, 0x5A	; 90
    3758:	91 05       	cpc	r25, r1
    375a:	b8 f4       	brcc	.+46     	; 0x378a <TaskPrintSred+0x61c>
    375c:	c9 01       	movw	r24, r18
    375e:	64 e6       	ldi	r22, 0x64	; 100
    3760:	70 e0       	ldi	r23, 0x00	; 0
    3762:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3766:	ea e0       	ldi	r30, 0x0A	; 10
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	bf 01       	movw	r22, r30
    376c:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3770:	eb 01       	movw	r28, r22
    3772:	c9 01       	movw	r24, r18
    3774:	bf 01       	movw	r22, r30
    3776:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    377a:	9c 01       	movw	r18, r24
    377c:	8d e0       	ldi	r24, 0x0D	; 13
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	6c e0       	ldi	r22, 0x0C	; 12
    3782:	70 e0       	ldi	r23, 0x00	; 0
    3784:	ae 01       	movw	r20, r28
    3786:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
				if(dataVr>=100) PrintJan(12, (dataVr%1000)/100,(dataVr%100)/10, dataVr%10);
    378a:	20 91 56 02 	lds	r18, 0x0256
    378e:	30 91 57 02 	lds	r19, 0x0257
    3792:	24 36       	cpi	r18, 0x64	; 100
    3794:	31 05       	cpc	r19, r1
    3796:	0c f4       	brge	.+2      	; 0x379a <TaskPrintSred+0x62c>
    3798:	71 c0       	rjmp	.+226    	; 0x387c <TaskPrintSred+0x70e>
    379a:	c9 01       	movw	r24, r18
    379c:	68 ee       	ldi	r22, 0xE8	; 232
    379e:	73 e0       	ldi	r23, 0x03	; 3
    37a0:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    37a4:	e4 e6       	ldi	r30, 0x64	; 100
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	bf 01       	movw	r22, r30
    37aa:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    37ae:	eb 01       	movw	r28, r22
    37b0:	c9 01       	movw	r24, r18
    37b2:	bf 01       	movw	r22, r30
    37b4:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    37b8:	ea e0       	ldi	r30, 0x0A	; 10
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	bf 01       	movw	r22, r30
    37be:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    37c2:	8b 01       	movw	r16, r22
    37c4:	c9 01       	movw	r24, r18
    37c6:	bf 01       	movw	r22, r30
    37c8:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    37cc:	9c 01       	movw	r18, r24
    37ce:	8c e0       	ldi	r24, 0x0C	; 12
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	50 c0       	rjmp	.+160    	; 0x3874 <TaskPrintSred+0x706>
			}
			else
			{
				if(dataVr>=1 && dataVr <= 9) PrintJan(13, 13, 13, dataVr);
    37d4:	c9 01       	movw	r24, r18
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	89 30       	cpi	r24, 0x09	; 9
    37da:	91 05       	cpc	r25, r1
    37dc:	40 f4       	brcc	.+16     	; 0x37ee <TaskPrintSred+0x680>
    37de:	8d e0       	ldi	r24, 0x0D	; 13
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	6d e0       	ldi	r22, 0x0D	; 13
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	4d e0       	ldi	r20, 0x0D	; 13
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
				if(dataVr>=10 && dataVr <= 99) PrintJan(13, 13, (dataVr%100)/10, dataVr%10);
    37ee:	20 91 56 02 	lds	r18, 0x0256
    37f2:	30 91 57 02 	lds	r19, 0x0257
    37f6:	c9 01       	movw	r24, r18
    37f8:	0a 97       	sbiw	r24, 0x0a	; 10
    37fa:	8a 35       	cpi	r24, 0x5A	; 90
    37fc:	91 05       	cpc	r25, r1
    37fe:	b8 f4       	brcc	.+46     	; 0x382e <TaskPrintSred+0x6c0>
    3800:	c9 01       	movw	r24, r18
    3802:	64 e6       	ldi	r22, 0x64	; 100
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    380a:	ea e0       	ldi	r30, 0x0A	; 10
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	bf 01       	movw	r22, r30
    3810:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3814:	eb 01       	movw	r28, r22
    3816:	c9 01       	movw	r24, r18
    3818:	bf 01       	movw	r22, r30
    381a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    381e:	9c 01       	movw	r18, r24
    3820:	8d e0       	ldi	r24, 0x0D	; 13
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	6d e0       	ldi	r22, 0x0D	; 13
    3826:	70 e0       	ldi	r23, 0x00	; 0
    3828:	ae 01       	movw	r20, r28
    382a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
				if(dataVr>=100) PrintJan(13, (dataVr%1000)/100,(dataVr%100)/10, dataVr%10);
    382e:	20 91 56 02 	lds	r18, 0x0256
    3832:	30 91 57 02 	lds	r19, 0x0257
    3836:	24 36       	cpi	r18, 0x64	; 100
    3838:	31 05       	cpc	r19, r1
    383a:	04 f1       	brlt	.+64     	; 0x387c <TaskPrintSred+0x70e>
    383c:	c9 01       	movw	r24, r18
    383e:	68 ee       	ldi	r22, 0xE8	; 232
    3840:	73 e0       	ldi	r23, 0x03	; 3
    3842:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3846:	e4 e6       	ldi	r30, 0x64	; 100
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	bf 01       	movw	r22, r30
    384c:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3850:	eb 01       	movw	r28, r22
    3852:	c9 01       	movw	r24, r18
    3854:	bf 01       	movw	r22, r30
    3856:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    385a:	ea e0       	ldi	r30, 0x0A	; 10
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	bf 01       	movw	r22, r30
    3860:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3864:	8b 01       	movw	r16, r22
    3866:	c9 01       	movw	r24, r18
    3868:	bf 01       	movw	r22, r30
    386a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    386e:	9c 01       	movw	r18, r24
    3870:	8d e0       	ldi	r24, 0x0D	; 13
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	be 01       	movw	r22, r28
    3876:	a8 01       	movw	r20, r16
    3878:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
			}
		}
		if(modeLcd == 9)
    387c:	80 91 a0 01 	lds	r24, 0x01A0
    3880:	89 30       	cpi	r24, 0x09	; 9
    3882:	b9 f5       	brne	.+110    	; 0x38f2 <TaskPrintSred+0x784>
		{
			if(gazoline > 99) {
    3884:	00 91 82 01 	lds	r16, 0x0182
    3888:	04 36       	cpi	r16, 0x64	; 100
    388a:	e8 f0       	brcs	.+58     	; 0x38c6 <TaskPrintSred+0x758>
			PrintJan(13, (gazoline%1000)/100,(gazoline%100)/10, gazoline%10);
    388c:	80 2f       	mov	r24, r16
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	68 ee       	ldi	r22, 0xE8	; 232
    3892:	73 e0       	ldi	r23, 0x03	; 3
    3894:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    3898:	64 e6       	ldi	r22, 0x64	; 100
    389a:	70 e0       	ldi	r23, 0x00	; 0
    389c:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    38a0:	fb 01       	movw	r30, r22
    38a2:	80 2f       	mov	r24, r16
    38a4:	64 e6       	ldi	r22, 0x64	; 100
    38a6:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    38aa:	89 2f       	mov	r24, r25
    38ac:	2a e0       	ldi	r18, 0x0A	; 10
    38ae:	62 2f       	mov	r22, r18
    38b0:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    38b4:	48 2f       	mov	r20, r24
    38b6:	80 2f       	mov	r24, r16
    38b8:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    38bc:	29 2f       	mov	r18, r25
    38be:	8d e0       	ldi	r24, 0x0D	; 13
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	bf 01       	movw	r22, r30
    38c4:	12 c0       	rjmp	.+36     	; 0x38ea <TaskPrintSred+0x77c>
			} else {
			PrintJan(13, 13,(gazoline%100)/10, gazoline%10); }
    38c6:	80 2f       	mov	r24, r16
    38c8:	64 e6       	ldi	r22, 0x64	; 100
    38ca:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    38ce:	89 2f       	mov	r24, r25
    38d0:	2a e0       	ldi	r18, 0x0A	; 10
    38d2:	62 2f       	mov	r22, r18
    38d4:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    38d8:	48 2f       	mov	r20, r24
    38da:	80 2f       	mov	r24, r16
    38dc:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    38e0:	29 2f       	mov	r18, r25
    38e2:	8d e0       	ldi	r24, 0x0D	; 13
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	6d e0       	ldi	r22, 0x0D	; 13
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	50 e0       	ldi	r21, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <PrintJan>
		}
	}
	AddTask (TaskPrintSred, 50);
    38f2:	87 eb       	ldi	r24, 0xB7	; 183
    38f4:	98 e1       	ldi	r25, 0x18	; 24
    38f6:	62 e3       	ldi	r22, 0x32	; 50
    38f8:	70 e0       	ldi	r23, 0x00	; 0
    38fa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    38fe:	df 91       	pop	r29
    3900:	cf 91       	pop	r28
    3902:	1f 91       	pop	r17
    3904:	0f 91       	pop	r16
    3906:	ff 90       	pop	r15
    3908:	ef 90       	pop	r14
    390a:	08 95       	ret

0000390c <TaskLongPress>:
		/*r_a = 120/100;
		r_b = (120%100)/10;
		r_c = 120%10;
		PrintRas(10, 137);*/

}
    390c:	08 95       	ret

0000390e <TestQuickPress>:


void TestQuickPress(void)
{
	if(mode!=0) modeLcd++;
    390e:	80 91 9e 01 	lds	r24, 0x019E
    3912:	90 91 9f 01 	lds	r25, 0x019F
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	29 f0       	breq	.+10     	; 0x3924 <TestQuickPress+0x16>
    391a:	80 91 a0 01 	lds	r24, 0x01A0
    391e:	8f 5f       	subi	r24, 0xFF	; 255
    3920:	80 93 a0 01 	sts	0x01A0, r24
	if(modeLcd >=10) modeLcd = 0;
    3924:	80 91 a0 01 	lds	r24, 0x01A0
    3928:	8a 30       	cpi	r24, 0x0A	; 10
    392a:	10 f0       	brcs	.+4      	; 0x3930 <TestQuickPress+0x22>
    392c:	10 92 a0 01 	sts	0x01A0, r1
	if(!lowLevelAntifreezePicture && !lowBrakeFluidPicture)
    3930:	80 91 87 01 	lds	r24, 0x0187
    3934:	88 23       	and	r24, r24
    3936:	51 f4       	brne	.+20     	; 0x394c <TestQuickPress+0x3e>
    3938:	80 91 89 01 	lds	r24, 0x0189
    393c:	88 23       	and	r24, r24
    393e:	31 f4       	brne	.+12     	; 0x394c <TestQuickPress+0x3e>
	{
	Printl100km(130, 124);
    3940:	82 e8       	ldi	r24, 0x82	; 130
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	6c e7       	ldi	r22, 0x7C	; 124
    3946:	70 e0       	ldi	r23, 0x00	; 0
    3948:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Printl100km>
    394c:	08 95       	ret

0000394e <ignitionOn>:


unsigned char ignitionOn(void) 
{
	if(PIND&0b00010000) {
		return 1;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	84 9b       	sbis	0x10, 4	; 16
    3952:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return 0;
	}
}
    3954:	08 95       	ret

00003956 <lowVoltagePictureOn>:

void lowVoltagePictureOn(void)
{
	lowVoltagePicture = 1;
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	80 93 86 01 	sts	0x0186, r24
}
    395c:	08 95       	ret

0000395e <lowVoltagePictureOff>:

void lowVoltagePictureOff(void)
{
	lowVoltagePicture = 0;
    395e:	10 92 86 01 	sts	0x0186, r1
}
    3962:	08 95       	ret

00003964 <TaskGazolineWrite>:
	AddTask (TaskGazoline, 100);
}

void TaskGazolineWrite(void)
{
	unsigned long res = 0;
    3964:	e8 e5       	ldi	r30, 0x58	; 88
    3966:	f2 e0       	ldi	r31, 0x02	; 2
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	cb 01       	movw	r24, r22
	for(int i =0; i<50; i++)
		{
			res += gazolineMass[i]; 
    396e:	21 91       	ld	r18, Z+
    3970:	62 0f       	add	r22, r18
    3972:	71 1d       	adc	r23, r1
    3974:	81 1d       	adc	r24, r1
    3976:	91 1d       	adc	r25, r1
}

void TaskGazolineWrite(void)
{
	unsigned long res = 0;
	for(int i =0; i<50; i++)
    3978:	22 e0       	ldi	r18, 0x02	; 2
    397a:	ea 38       	cpi	r30, 0x8A	; 138
    397c:	f2 07       	cpc	r31, r18
    397e:	b9 f7       	brne	.-18     	; 0x396e <TaskGazolineWrite+0xa>
		{
			res += gazolineMass[i]; 
			
		}
	res/=50;
    3980:	22 e3       	ldi	r18, 0x32	; 50
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__udivmodsi4>
	gazoline = res;
    398c:	20 93 82 01 	sts	0x0182, r18
	if(gazoline >=99)
    3990:	23 36       	cpi	r18, 0x63	; 99
    3992:	20 f0       	brcs	.+8      	; 0x399c <TaskGazolineWrite+0x38>
	{
		lowGasolinePicture = 1;
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	80 93 88 01 	sts	0x0188, r24
    399a:	02 c0       	rjmp	.+4      	; 0x39a0 <TaskGazolineWrite+0x3c>
	}
	else
	{
		lowGasolinePicture = 0;
    399c:	10 92 88 01 	sts	0x0188, r1
	}

	AddTask (TaskGazolineWrite, 1000);
    39a0:	82 eb       	ldi	r24, 0xB2	; 178
    39a2:	9c e1       	ldi	r25, 0x1C	; 28
    39a4:	68 ee       	ldi	r22, 0xE8	; 232
    39a6:	73 e0       	ldi	r23, 0x03	; 3
    39a8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    39ac:	08 95       	ret

000039ae <TaskGazoline>:
unsigned char consider=0; //учитывать показания

void TaskGazoline(void)
{
	unsigned char benz; 
	if(PIND&0b00010000) //включено зажигание
    39ae:	84 9b       	sbis	0x10, 4	; 16
    39b0:	36 c0       	rjmp	.+108    	; 0x3a1e <TaskGazoline+0x70>
	{
		benz = ADC_b(5) * 0.758;
    39b2:	85 e0       	ldi	r24, 0x05	; 5
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 04 14 	call	0x2808	; 0x2808 <ADC_b>
    39ba:	9c 01       	movw	r18, r24
    39bc:	b9 01       	movw	r22, r18
    39be:	88 27       	eor	r24, r24
    39c0:	77 fd       	sbrc	r23, 7
    39c2:	80 95       	com	r24
    39c4:	98 2f       	mov	r25, r24
    39c6:	0e 94 22 21 	call	0x4244	; 0x4244 <__floatsisf>
    39ca:	2a e4       	ldi	r18, 0x4A	; 74
    39cc:	3c e0       	ldi	r19, 0x0C	; 12
    39ce:	42 e4       	ldi	r20, 0x42	; 66
    39d0:	5f e3       	ldi	r21, 0x3F	; 63
    39d2:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsf3>
    39d6:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__fixunssfsi>

		if(pointer == 0) //вначале весь массив как первое показание
    39da:	80 91 ab 01 	lds	r24, 0x01AB
    39de:	88 23       	and	r24, r24
    39e0:	51 f4       	brne	.+20     	; 0x39f6 <TaskGazoline+0x48>
    39e2:	e8 e5       	ldi	r30, 0x58	; 88
    39e4:	f2 e0       	ldi	r31, 0x02	; 2
		{
			for(int i =0; i<50; i++)
			{
				gazolineMass[i] = benz;
    39e6:	61 93       	st	Z+, r22
	{
		benz = ADC_b(5) * 0.758;

		if(pointer == 0) //вначале весь массив как первое показание
		{
			for(int i =0; i<50; i++)
    39e8:	32 e0       	ldi	r19, 0x02	; 2
    39ea:	ea 38       	cpi	r30, 0x8A	; 138
    39ec:	f3 07       	cpc	r31, r19
    39ee:	d9 f7       	brne	.-10     	; 0x39e6 <TaskGazoline+0x38>
    39f0:	82 e3       	ldi	r24, 0x32	; 50
    39f2:	80 93 ab 01 	sts	0x01AB, r24
			{
				gazolineMass[i] = benz;
				pointer++;
			}
		}
		if(pointer > 48)  //на первом проходе начанаем учитывать
    39f6:	80 91 ab 01 	lds	r24, 0x01AB
    39fa:	81 33       	cpi	r24, 0x31	; 49
    39fc:	18 f0       	brcs	.+6      	; 0x3a04 <TaskGazoline+0x56>
		{
			consider=1;
    39fe:	91 e0       	ldi	r25, 0x01	; 1
    3a00:	90 93 ac 01 	sts	0x01AC, r25
		}		
		gazolineMass[pointer-1]=benz;
    3a04:	e8 2f       	mov	r30, r24
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	e9 5a       	subi	r30, 0xA9	; 169
    3a0a:	fd 4f       	sbci	r31, 0xFD	; 253
    3a0c:	60 83       	st	Z, r22
		pointer++;
    3a0e:	8f 5f       	subi	r24, 0xFF	; 255
    3a10:	80 93 ab 01 	sts	0x01AB, r24
		if(pointer == 51)
    3a14:	83 33       	cpi	r24, 0x33	; 51
    3a16:	19 f4       	brne	.+6      	; 0x3a1e <TaskGazoline+0x70>
		{
			pointer = 1;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	80 93 ab 01 	sts	0x01AB, r24
		}
	}
	
	AddTask (TaskGazoline, 100);
    3a1e:	87 ed       	ldi	r24, 0xD7	; 215
    3a20:	9c e1       	ldi	r25, 0x1C	; 28
    3a22:	64 e6       	ldi	r22, 0x64	; 100
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <AddTask>
}
    3a2a:	08 95       	ret

00003a2c <__fixunssfsi>:
    3a2c:	ef 92       	push	r14
    3a2e:	ff 92       	push	r15
    3a30:	0f 93       	push	r16
    3a32:	1f 93       	push	r17
    3a34:	7b 01       	movw	r14, r22
    3a36:	8c 01       	movw	r16, r24
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e0       	ldi	r20, 0x00	; 0
    3a3e:	5f e4       	ldi	r21, 0x4F	; 79
    3a40:	0e 94 c2 20 	call	0x4184	; 0x4184 <__gesf2>
    3a44:	87 fd       	sbrc	r24, 7
    3a46:	11 c0       	rjmp	.+34     	; 0x3a6a <__fixunssfsi+0x3e>
    3a48:	c8 01       	movw	r24, r16
    3a4a:	b7 01       	movw	r22, r14
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e0       	ldi	r20, 0x00	; 0
    3a52:	5f e4       	ldi	r21, 0x4F	; 79
    3a54:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__subsf3>
    3a58:	0e 94 82 21 	call	0x4304	; 0x4304 <__fixsfsi>
    3a5c:	9b 01       	movw	r18, r22
    3a5e:	ac 01       	movw	r20, r24
    3a60:	20 50       	subi	r18, 0x00	; 0
    3a62:	30 40       	sbci	r19, 0x00	; 0
    3a64:	40 40       	sbci	r20, 0x00	; 0
    3a66:	50 48       	sbci	r21, 0x80	; 128
    3a68:	06 c0       	rjmp	.+12     	; 0x3a76 <__fixunssfsi+0x4a>
    3a6a:	c8 01       	movw	r24, r16
    3a6c:	b7 01       	movw	r22, r14
    3a6e:	0e 94 82 21 	call	0x4304	; 0x4304 <__fixsfsi>
    3a72:	9b 01       	movw	r18, r22
    3a74:	ac 01       	movw	r20, r24
    3a76:	b9 01       	movw	r22, r18
    3a78:	ca 01       	movw	r24, r20
    3a7a:	1f 91       	pop	r17
    3a7c:	0f 91       	pop	r16
    3a7e:	ff 90       	pop	r15
    3a80:	ef 90       	pop	r14
    3a82:	08 95       	ret

00003a84 <_fpadd_parts>:
    3a84:	a0 e0       	ldi	r26, 0x00	; 0
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	e8 e4       	ldi	r30, 0x48	; 72
    3a8a:	fd e1       	ldi	r31, 0x1D	; 29
    3a8c:	0c 94 8f 24 	jmp	0x491e	; 0x491e <__prologue_saves__+0x8>
    3a90:	fc 01       	movw	r30, r24
    3a92:	ea 01       	movw	r28, r20
    3a94:	80 81       	ld	r24, Z
    3a96:	82 30       	cpi	r24, 0x02	; 2
    3a98:	08 f4       	brcc	.+2      	; 0x3a9c <_fpadd_parts+0x18>
    3a9a:	38 c1       	rjmp	.+624    	; 0x3d0c <_fpadd_parts+0x288>
    3a9c:	db 01       	movw	r26, r22
    3a9e:	9c 91       	ld	r25, X
    3aa0:	92 30       	cpi	r25, 0x02	; 2
    3aa2:	08 f4       	brcc	.+2      	; 0x3aa6 <_fpadd_parts+0x22>
    3aa4:	30 c1       	rjmp	.+608    	; 0x3d06 <_fpadd_parts+0x282>
    3aa6:	84 30       	cpi	r24, 0x04	; 4
    3aa8:	59 f4       	brne	.+22     	; 0x3ac0 <_fpadd_parts+0x3c>
    3aaa:	94 30       	cpi	r25, 0x04	; 4
    3aac:	09 f0       	breq	.+2      	; 0x3ab0 <_fpadd_parts+0x2c>
    3aae:	2e c1       	rjmp	.+604    	; 0x3d0c <_fpadd_parts+0x288>
    3ab0:	91 81       	ldd	r25, Z+1	; 0x01
    3ab2:	11 96       	adiw	r26, 0x01	; 1
    3ab4:	8c 91       	ld	r24, X
    3ab6:	11 97       	sbiw	r26, 0x01	; 1
    3ab8:	98 17       	cp	r25, r24
    3aba:	09 f0       	breq	.+2      	; 0x3abe <_fpadd_parts+0x3a>
    3abc:	21 c1       	rjmp	.+578    	; 0x3d00 <_fpadd_parts+0x27c>
    3abe:	26 c1       	rjmp	.+588    	; 0x3d0c <_fpadd_parts+0x288>
    3ac0:	94 30       	cpi	r25, 0x04	; 4
    3ac2:	09 f4       	brne	.+2      	; 0x3ac6 <_fpadd_parts+0x42>
    3ac4:	20 c1       	rjmp	.+576    	; 0x3d06 <_fpadd_parts+0x282>
    3ac6:	92 30       	cpi	r25, 0x02	; 2
    3ac8:	b1 f4       	brne	.+44     	; 0x3af6 <_fpadd_parts+0x72>
    3aca:	82 30       	cpi	r24, 0x02	; 2
    3acc:	09 f0       	breq	.+2      	; 0x3ad0 <_fpadd_parts+0x4c>
    3ace:	1e c1       	rjmp	.+572    	; 0x3d0c <_fpadd_parts+0x288>
    3ad0:	ca 01       	movw	r24, r20
    3ad2:	af 01       	movw	r20, r30
    3ad4:	28 e0       	ldi	r18, 0x08	; 8
    3ad6:	da 01       	movw	r26, r20
    3ad8:	0d 90       	ld	r0, X+
    3ada:	ad 01       	movw	r20, r26
    3adc:	dc 01       	movw	r26, r24
    3ade:	0d 92       	st	X+, r0
    3ae0:	cd 01       	movw	r24, r26
    3ae2:	21 50       	subi	r18, 0x01	; 1
    3ae4:	c1 f7       	brne	.-16     	; 0x3ad6 <_fpadd_parts+0x52>
    3ae6:	db 01       	movw	r26, r22
    3ae8:	11 96       	adiw	r26, 0x01	; 1
    3aea:	8c 91       	ld	r24, X
    3aec:	11 97       	sbiw	r26, 0x01	; 1
    3aee:	91 81       	ldd	r25, Z+1	; 0x01
    3af0:	89 23       	and	r24, r25
    3af2:	89 83       	std	Y+1, r24	; 0x01
    3af4:	0a c1       	rjmp	.+532    	; 0x3d0a <_fpadd_parts+0x286>
    3af6:	82 30       	cpi	r24, 0x02	; 2
    3af8:	09 f4       	brne	.+2      	; 0x3afc <_fpadd_parts+0x78>
    3afa:	05 c1       	rjmp	.+522    	; 0x3d06 <_fpadd_parts+0x282>
    3afc:	c2 80       	ldd	r12, Z+2	; 0x02
    3afe:	d3 80       	ldd	r13, Z+3	; 0x03
    3b00:	db 01       	movw	r26, r22
    3b02:	12 96       	adiw	r26, 0x02	; 2
    3b04:	6d 90       	ld	r6, X+
    3b06:	7c 90       	ld	r7, X
    3b08:	13 97       	sbiw	r26, 0x03	; 3
    3b0a:	24 81       	ldd	r18, Z+4	; 0x04
    3b0c:	35 81       	ldd	r19, Z+5	; 0x05
    3b0e:	46 81       	ldd	r20, Z+6	; 0x06
    3b10:	57 81       	ldd	r21, Z+7	; 0x07
    3b12:	14 96       	adiw	r26, 0x04	; 4
    3b14:	ed 90       	ld	r14, X+
    3b16:	fd 90       	ld	r15, X+
    3b18:	0d 91       	ld	r16, X+
    3b1a:	1c 91       	ld	r17, X
    3b1c:	17 97       	sbiw	r26, 0x07	; 7
    3b1e:	c6 01       	movw	r24, r12
    3b20:	86 19       	sub	r24, r6
    3b22:	97 09       	sbc	r25, r7
    3b24:	5c 01       	movw	r10, r24
    3b26:	97 ff       	sbrs	r25, 7
    3b28:	04 c0       	rjmp	.+8      	; 0x3b32 <_fpadd_parts+0xae>
    3b2a:	aa 24       	eor	r10, r10
    3b2c:	bb 24       	eor	r11, r11
    3b2e:	a8 1a       	sub	r10, r24
    3b30:	b9 0a       	sbc	r11, r25
    3b32:	b0 e2       	ldi	r27, 0x20	; 32
    3b34:	ab 16       	cp	r10, r27
    3b36:	b1 04       	cpc	r11, r1
    3b38:	0c f0       	brlt	.+2      	; 0x3b3c <_fpadd_parts+0xb8>
    3b3a:	61 c0       	rjmp	.+194    	; 0x3bfe <_fpadd_parts+0x17a>
    3b3c:	18 16       	cp	r1, r24
    3b3e:	19 06       	cpc	r1, r25
    3b40:	6c f5       	brge	.+90     	; 0x3b9c <_fpadd_parts+0x118>
    3b42:	37 01       	movw	r6, r14
    3b44:	48 01       	movw	r8, r16
    3b46:	0a 2c       	mov	r0, r10
    3b48:	04 c0       	rjmp	.+8      	; 0x3b52 <_fpadd_parts+0xce>
    3b4a:	96 94       	lsr	r9
    3b4c:	87 94       	ror	r8
    3b4e:	77 94       	ror	r7
    3b50:	67 94       	ror	r6
    3b52:	0a 94       	dec	r0
    3b54:	d2 f7       	brpl	.-12     	; 0x3b4a <_fpadd_parts+0xc6>
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	a0 e0       	ldi	r26, 0x00	; 0
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	0a 2c       	mov	r0, r10
    3b60:	04 c0       	rjmp	.+8      	; 0x3b6a <_fpadd_parts+0xe6>
    3b62:	88 0f       	add	r24, r24
    3b64:	99 1f       	adc	r25, r25
    3b66:	aa 1f       	adc	r26, r26
    3b68:	bb 1f       	adc	r27, r27
    3b6a:	0a 94       	dec	r0
    3b6c:	d2 f7       	brpl	.-12     	; 0x3b62 <_fpadd_parts+0xde>
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	a1 09       	sbc	r26, r1
    3b72:	b1 09       	sbc	r27, r1
    3b74:	8e 21       	and	r24, r14
    3b76:	9f 21       	and	r25, r15
    3b78:	a0 23       	and	r26, r16
    3b7a:	b1 23       	and	r27, r17
    3b7c:	ee 24       	eor	r14, r14
    3b7e:	ff 24       	eor	r15, r15
    3b80:	87 01       	movw	r16, r14
    3b82:	e3 94       	inc	r14
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	a1 05       	cpc	r26, r1
    3b88:	b1 05       	cpc	r27, r1
    3b8a:	19 f4       	brne	.+6      	; 0x3b92 <_fpadd_parts+0x10e>
    3b8c:	ee 24       	eor	r14, r14
    3b8e:	ff 24       	eor	r15, r15
    3b90:	87 01       	movw	r16, r14
    3b92:	e6 28       	or	r14, r6
    3b94:	f7 28       	or	r15, r7
    3b96:	08 29       	or	r16, r8
    3b98:	19 29       	or	r17, r9
    3b9a:	3c c0       	rjmp	.+120    	; 0x3c14 <_fpadd_parts+0x190>
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	d1 f1       	breq	.+116    	; 0x3c14 <_fpadd_parts+0x190>
    3ba0:	ca 0c       	add	r12, r10
    3ba2:	db 1c       	adc	r13, r11
    3ba4:	39 01       	movw	r6, r18
    3ba6:	4a 01       	movw	r8, r20
    3ba8:	0a 2c       	mov	r0, r10
    3baa:	04 c0       	rjmp	.+8      	; 0x3bb4 <_fpadd_parts+0x130>
    3bac:	96 94       	lsr	r9
    3bae:	87 94       	ror	r8
    3bb0:	77 94       	ror	r7
    3bb2:	67 94       	ror	r6
    3bb4:	0a 94       	dec	r0
    3bb6:	d2 f7       	brpl	.-12     	; 0x3bac <_fpadd_parts+0x128>
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	a0 e0       	ldi	r26, 0x00	; 0
    3bbe:	b0 e0       	ldi	r27, 0x00	; 0
    3bc0:	0a 2c       	mov	r0, r10
    3bc2:	04 c0       	rjmp	.+8      	; 0x3bcc <_fpadd_parts+0x148>
    3bc4:	88 0f       	add	r24, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	aa 1f       	adc	r26, r26
    3bca:	bb 1f       	adc	r27, r27
    3bcc:	0a 94       	dec	r0
    3bce:	d2 f7       	brpl	.-12     	; 0x3bc4 <_fpadd_parts+0x140>
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	a1 09       	sbc	r26, r1
    3bd4:	b1 09       	sbc	r27, r1
    3bd6:	82 23       	and	r24, r18
    3bd8:	93 23       	and	r25, r19
    3bda:	a4 23       	and	r26, r20
    3bdc:	b5 23       	and	r27, r21
    3bde:	21 e0       	ldi	r18, 0x01	; 1
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e0       	ldi	r20, 0x00	; 0
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	00 97       	sbiw	r24, 0x00	; 0
    3be8:	a1 05       	cpc	r26, r1
    3bea:	b1 05       	cpc	r27, r1
    3bec:	19 f4       	brne	.+6      	; 0x3bf4 <_fpadd_parts+0x170>
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	a9 01       	movw	r20, r18
    3bf4:	26 29       	or	r18, r6
    3bf6:	37 29       	or	r19, r7
    3bf8:	48 29       	or	r20, r8
    3bfa:	59 29       	or	r21, r9
    3bfc:	0b c0       	rjmp	.+22     	; 0x3c14 <_fpadd_parts+0x190>
    3bfe:	6c 14       	cp	r6, r12
    3c00:	7d 04       	cpc	r7, r13
    3c02:	24 f4       	brge	.+8      	; 0x3c0c <_fpadd_parts+0x188>
    3c04:	ee 24       	eor	r14, r14
    3c06:	ff 24       	eor	r15, r15
    3c08:	87 01       	movw	r16, r14
    3c0a:	04 c0       	rjmp	.+8      	; 0x3c14 <_fpadd_parts+0x190>
    3c0c:	63 01       	movw	r12, r6
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	a9 01       	movw	r20, r18
    3c14:	81 81       	ldd	r24, Z+1	; 0x01
    3c16:	fb 01       	movw	r30, r22
    3c18:	91 81       	ldd	r25, Z+1	; 0x01
    3c1a:	89 17       	cp	r24, r25
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <_fpadd_parts+0x19c>
    3c1e:	45 c0       	rjmp	.+138    	; 0x3caa <_fpadd_parts+0x226>
    3c20:	88 23       	and	r24, r24
    3c22:	49 f0       	breq	.+18     	; 0x3c36 <_fpadd_parts+0x1b2>
    3c24:	d8 01       	movw	r26, r16
    3c26:	c7 01       	movw	r24, r14
    3c28:	82 1b       	sub	r24, r18
    3c2a:	93 0b       	sbc	r25, r19
    3c2c:	a4 0b       	sbc	r26, r20
    3c2e:	b5 0b       	sbc	r27, r21
    3c30:	9c 01       	movw	r18, r24
    3c32:	ad 01       	movw	r20, r26
    3c34:	04 c0       	rjmp	.+8      	; 0x3c3e <_fpadd_parts+0x1ba>
    3c36:	2e 19       	sub	r18, r14
    3c38:	3f 09       	sbc	r19, r15
    3c3a:	40 0b       	sbc	r20, r16
    3c3c:	51 0b       	sbc	r21, r17
    3c3e:	57 fd       	sbrc	r21, 7
    3c40:	04 c0       	rjmp	.+8      	; 0x3c4a <_fpadd_parts+0x1c6>
    3c42:	19 82       	std	Y+1, r1	; 0x01
    3c44:	db 82       	std	Y+3, r13	; 0x03
    3c46:	ca 82       	std	Y+2, r12	; 0x02
    3c48:	0b c0       	rjmp	.+22     	; 0x3c60 <_fpadd_parts+0x1dc>
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	89 83       	std	Y+1, r24	; 0x01
    3c4e:	db 82       	std	Y+3, r13	; 0x03
    3c50:	ca 82       	std	Y+2, r12	; 0x02
    3c52:	50 95       	com	r21
    3c54:	40 95       	com	r20
    3c56:	30 95       	com	r19
    3c58:	21 95       	neg	r18
    3c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5c:	4f 4f       	sbci	r20, 0xFF	; 255
    3c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c60:	2c 83       	std	Y+4, r18	; 0x04
    3c62:	3d 83       	std	Y+5, r19	; 0x05
    3c64:	4e 83       	std	Y+6, r20	; 0x06
    3c66:	5f 83       	std	Y+7, r21	; 0x07
    3c68:	0d c0       	rjmp	.+26     	; 0x3c84 <_fpadd_parts+0x200>
    3c6a:	88 0f       	add	r24, r24
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	aa 1f       	adc	r26, r26
    3c70:	bb 1f       	adc	r27, r27
    3c72:	8c 83       	std	Y+4, r24	; 0x04
    3c74:	9d 83       	std	Y+5, r25	; 0x05
    3c76:	ae 83       	std	Y+6, r26	; 0x06
    3c78:	bf 83       	std	Y+7, r27	; 0x07
    3c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	9b 83       	std	Y+3, r25	; 0x03
    3c82:	8a 83       	std	Y+2, r24	; 0x02
    3c84:	8c 81       	ldd	r24, Y+4	; 0x04
    3c86:	9d 81       	ldd	r25, Y+5	; 0x05
    3c88:	ae 81       	ldd	r26, Y+6	; 0x06
    3c8a:	bf 81       	ldd	r27, Y+7	; 0x07
    3c8c:	9c 01       	movw	r18, r24
    3c8e:	ad 01       	movw	r20, r26
    3c90:	21 50       	subi	r18, 0x01	; 1
    3c92:	30 40       	sbci	r19, 0x00	; 0
    3c94:	40 40       	sbci	r20, 0x00	; 0
    3c96:	50 40       	sbci	r21, 0x00	; 0
    3c98:	2f 3f       	cpi	r18, 0xFF	; 255
    3c9a:	ef ef       	ldi	r30, 0xFF	; 255
    3c9c:	3e 07       	cpc	r19, r30
    3c9e:	ef ef       	ldi	r30, 0xFF	; 255
    3ca0:	4e 07       	cpc	r20, r30
    3ca2:	ef e3       	ldi	r30, 0x3F	; 63
    3ca4:	5e 07       	cpc	r21, r30
    3ca6:	08 f3       	brcs	.-62     	; 0x3c6a <_fpadd_parts+0x1e6>
    3ca8:	0b c0       	rjmp	.+22     	; 0x3cc0 <_fpadd_parts+0x23c>
    3caa:	89 83       	std	Y+1, r24	; 0x01
    3cac:	db 82       	std	Y+3, r13	; 0x03
    3cae:	ca 82       	std	Y+2, r12	; 0x02
    3cb0:	2e 0d       	add	r18, r14
    3cb2:	3f 1d       	adc	r19, r15
    3cb4:	40 1f       	adc	r20, r16
    3cb6:	51 1f       	adc	r21, r17
    3cb8:	2c 83       	std	Y+4, r18	; 0x04
    3cba:	3d 83       	std	Y+5, r19	; 0x05
    3cbc:	4e 83       	std	Y+6, r20	; 0x06
    3cbe:	5f 83       	std	Y+7, r21	; 0x07
    3cc0:	83 e0       	ldi	r24, 0x03	; 3
    3cc2:	88 83       	st	Y, r24
    3cc4:	2c 81       	ldd	r18, Y+4	; 0x04
    3cc6:	3d 81       	ldd	r19, Y+5	; 0x05
    3cc8:	4e 81       	ldd	r20, Y+6	; 0x06
    3cca:	5f 81       	ldd	r21, Y+7	; 0x07
    3ccc:	57 ff       	sbrs	r21, 7
    3cce:	1d c0       	rjmp	.+58     	; 0x3d0a <_fpadd_parts+0x286>
    3cd0:	da 01       	movw	r26, r20
    3cd2:	c9 01       	movw	r24, r18
    3cd4:	81 70       	andi	r24, 0x01	; 1
    3cd6:	90 70       	andi	r25, 0x00	; 0
    3cd8:	a0 70       	andi	r26, 0x00	; 0
    3cda:	b0 70       	andi	r27, 0x00	; 0
    3cdc:	56 95       	lsr	r21
    3cde:	47 95       	ror	r20
    3ce0:	37 95       	ror	r19
    3ce2:	27 95       	ror	r18
    3ce4:	82 2b       	or	r24, r18
    3ce6:	93 2b       	or	r25, r19
    3ce8:	a4 2b       	or	r26, r20
    3cea:	b5 2b       	or	r27, r21
    3cec:	8c 83       	std	Y+4, r24	; 0x04
    3cee:	9d 83       	std	Y+5, r25	; 0x05
    3cf0:	ae 83       	std	Y+6, r26	; 0x06
    3cf2:	bf 83       	std	Y+7, r27	; 0x07
    3cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf8:	01 96       	adiw	r24, 0x01	; 1
    3cfa:	9b 83       	std	Y+3, r25	; 0x03
    3cfc:	8a 83       	std	Y+2, r24	; 0x02
    3cfe:	05 c0       	rjmp	.+10     	; 0x3d0a <_fpadd_parts+0x286>
    3d00:	e7 e7       	ldi	r30, 0x77	; 119
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	03 c0       	rjmp	.+6      	; 0x3d0c <_fpadd_parts+0x288>
    3d06:	fb 01       	movw	r30, r22
    3d08:	01 c0       	rjmp	.+2      	; 0x3d0c <_fpadd_parts+0x288>
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	cf 01       	movw	r24, r30
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	ee e0       	ldi	r30, 0x0E	; 14
    3d14:	0c 94 ab 24 	jmp	0x4956	; 0x4956 <__epilogue_restores__+0x8>

00003d18 <__addsf3>:
    3d18:	a0 e2       	ldi	r26, 0x20	; 32
    3d1a:	b0 e0       	ldi	r27, 0x00	; 0
    3d1c:	e2 e9       	ldi	r30, 0x92	; 146
    3d1e:	fe e1       	ldi	r31, 0x1E	; 30
    3d20:	0c 94 97 24 	jmp	0x492e	; 0x492e <__prologue_saves__+0x18>
    3d24:	69 83       	std	Y+1, r22	; 0x01
    3d26:	7a 83       	std	Y+2, r23	; 0x02
    3d28:	8b 83       	std	Y+3, r24	; 0x03
    3d2a:	9c 83       	std	Y+4, r25	; 0x04
    3d2c:	2d 83       	std	Y+5, r18	; 0x05
    3d2e:	3e 83       	std	Y+6, r19	; 0x06
    3d30:	4f 83       	std	Y+7, r20	; 0x07
    3d32:	58 87       	std	Y+8, r21	; 0x08
    3d34:	89 e0       	ldi	r24, 0x09	; 9
    3d36:	e8 2e       	mov	r14, r24
    3d38:	f1 2c       	mov	r15, r1
    3d3a:	ec 0e       	add	r14, r28
    3d3c:	fd 1e       	adc	r15, r29
    3d3e:	ce 01       	movw	r24, r28
    3d40:	01 96       	adiw	r24, 0x01	; 1
    3d42:	b7 01       	movw	r22, r14
    3d44:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    3d48:	8e 01       	movw	r16, r28
    3d4a:	0f 5e       	subi	r16, 0xEF	; 239
    3d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4e:	ce 01       	movw	r24, r28
    3d50:	05 96       	adiw	r24, 0x05	; 5
    3d52:	b8 01       	movw	r22, r16
    3d54:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    3d58:	c7 01       	movw	r24, r14
    3d5a:	b8 01       	movw	r22, r16
    3d5c:	ae 01       	movw	r20, r28
    3d5e:	47 5e       	subi	r20, 0xE7	; 231
    3d60:	5f 4f       	sbci	r21, 0xFF	; 255
    3d62:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <_fpadd_parts>
    3d66:	0e 94 a6 22 	call	0x454c	; 0x454c <__pack_f>
    3d6a:	a0 96       	adiw	r28, 0x20	; 32
    3d6c:	e6 e0       	ldi	r30, 0x06	; 6
    3d6e:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <__epilogue_restores__+0x18>

00003d72 <__subsf3>:
    3d72:	a0 e2       	ldi	r26, 0x20	; 32
    3d74:	b0 e0       	ldi	r27, 0x00	; 0
    3d76:	ef eb       	ldi	r30, 0xBF	; 191
    3d78:	fe e1       	ldi	r31, 0x1E	; 30
    3d7a:	0c 94 97 24 	jmp	0x492e	; 0x492e <__prologue_saves__+0x18>
    3d7e:	69 83       	std	Y+1, r22	; 0x01
    3d80:	7a 83       	std	Y+2, r23	; 0x02
    3d82:	8b 83       	std	Y+3, r24	; 0x03
    3d84:	9c 83       	std	Y+4, r25	; 0x04
    3d86:	2d 83       	std	Y+5, r18	; 0x05
    3d88:	3e 83       	std	Y+6, r19	; 0x06
    3d8a:	4f 83       	std	Y+7, r20	; 0x07
    3d8c:	58 87       	std	Y+8, r21	; 0x08
    3d8e:	8e 01       	movw	r16, r28
    3d90:	07 5f       	subi	r16, 0xF7	; 247
    3d92:	1f 4f       	sbci	r17, 0xFF	; 255
    3d94:	ce 01       	movw	r24, r28
    3d96:	01 96       	adiw	r24, 0x01	; 1
    3d98:	b8 01       	movw	r22, r16
    3d9a:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    3d9e:	91 e1       	ldi	r25, 0x11	; 17
    3da0:	e9 2e       	mov	r14, r25
    3da2:	f1 2c       	mov	r15, r1
    3da4:	ec 0e       	add	r14, r28
    3da6:	fd 1e       	adc	r15, r29
    3da8:	ce 01       	movw	r24, r28
    3daa:	05 96       	adiw	r24, 0x05	; 5
    3dac:	b7 01       	movw	r22, r14
    3dae:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    3db2:	8a 89       	ldd	r24, Y+18	; 0x12
    3db4:	91 e0       	ldi	r25, 0x01	; 1
    3db6:	89 27       	eor	r24, r25
    3db8:	8a 8b       	std	Y+18, r24	; 0x12
    3dba:	c8 01       	movw	r24, r16
    3dbc:	b7 01       	movw	r22, r14
    3dbe:	ae 01       	movw	r20, r28
    3dc0:	47 5e       	subi	r20, 0xE7	; 231
    3dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc4:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <_fpadd_parts>
    3dc8:	0e 94 a6 22 	call	0x454c	; 0x454c <__pack_f>
    3dcc:	a0 96       	adiw	r28, 0x20	; 32
    3dce:	e6 e0       	ldi	r30, 0x06	; 6
    3dd0:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <__epilogue_restores__+0x18>

00003dd4 <__mulsf3>:
    3dd4:	a0 e2       	ldi	r26, 0x20	; 32
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	e0 ef       	ldi	r30, 0xF0	; 240
    3dda:	fe e1       	ldi	r31, 0x1E	; 30
    3ddc:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <__prologue_saves__>
    3de0:	69 83       	std	Y+1, r22	; 0x01
    3de2:	7a 83       	std	Y+2, r23	; 0x02
    3de4:	8b 83       	std	Y+3, r24	; 0x03
    3de6:	9c 83       	std	Y+4, r25	; 0x04
    3de8:	2d 83       	std	Y+5, r18	; 0x05
    3dea:	3e 83       	std	Y+6, r19	; 0x06
    3dec:	4f 83       	std	Y+7, r20	; 0x07
    3dee:	58 87       	std	Y+8, r21	; 0x08
    3df0:	ce 01       	movw	r24, r28
    3df2:	01 96       	adiw	r24, 0x01	; 1
    3df4:	be 01       	movw	r22, r28
    3df6:	67 5f       	subi	r22, 0xF7	; 247
    3df8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfa:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    3dfe:	ce 01       	movw	r24, r28
    3e00:	05 96       	adiw	r24, 0x05	; 5
    3e02:	be 01       	movw	r22, r28
    3e04:	6f 5e       	subi	r22, 0xEF	; 239
    3e06:	7f 4f       	sbci	r23, 0xFF	; 255
    3e08:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    3e0c:	99 85       	ldd	r25, Y+9	; 0x09
    3e0e:	92 30       	cpi	r25, 0x02	; 2
    3e10:	78 f0       	brcs	.+30     	; 0x3e30 <__mulsf3+0x5c>
    3e12:	89 89       	ldd	r24, Y+17	; 0x11
    3e14:	82 30       	cpi	r24, 0x02	; 2
    3e16:	c0 f0       	brcs	.+48     	; 0x3e48 <__mulsf3+0x74>
    3e18:	94 30       	cpi	r25, 0x04	; 4
    3e1a:	19 f4       	brne	.+6      	; 0x3e22 <__mulsf3+0x4e>
    3e1c:	82 30       	cpi	r24, 0x02	; 2
    3e1e:	41 f4       	brne	.+16     	; 0x3e30 <__mulsf3+0x5c>
    3e20:	cb c0       	rjmp	.+406    	; 0x3fb8 <__mulsf3+0x1e4>
    3e22:	84 30       	cpi	r24, 0x04	; 4
    3e24:	19 f4       	brne	.+6      	; 0x3e2c <__mulsf3+0x58>
    3e26:	92 30       	cpi	r25, 0x02	; 2
    3e28:	79 f4       	brne	.+30     	; 0x3e48 <__mulsf3+0x74>
    3e2a:	c6 c0       	rjmp	.+396    	; 0x3fb8 <__mulsf3+0x1e4>
    3e2c:	92 30       	cpi	r25, 0x02	; 2
    3e2e:	51 f4       	brne	.+20     	; 0x3e44 <__mulsf3+0x70>
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	2a 85       	ldd	r18, Y+10	; 0x0a
    3e34:	9a 89       	ldd	r25, Y+18	; 0x12
    3e36:	29 17       	cp	r18, r25
    3e38:	09 f4       	brne	.+2      	; 0x3e3c <__mulsf3+0x68>
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	8a 87       	std	Y+10, r24	; 0x0a
    3e3e:	ce 01       	movw	r24, r28
    3e40:	09 96       	adiw	r24, 0x09	; 9
    3e42:	bc c0       	rjmp	.+376    	; 0x3fbc <__mulsf3+0x1e8>
    3e44:	82 30       	cpi	r24, 0x02	; 2
    3e46:	51 f4       	brne	.+20     	; 0x3e5c <__mulsf3+0x88>
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	2a 85       	ldd	r18, Y+10	; 0x0a
    3e4c:	9a 89       	ldd	r25, Y+18	; 0x12
    3e4e:	29 17       	cp	r18, r25
    3e50:	09 f4       	brne	.+2      	; 0x3e54 <__mulsf3+0x80>
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	8a 8b       	std	Y+18, r24	; 0x12
    3e56:	ce 01       	movw	r24, r28
    3e58:	41 96       	adiw	r24, 0x11	; 17
    3e5a:	b0 c0       	rjmp	.+352    	; 0x3fbc <__mulsf3+0x1e8>
    3e5c:	6d 84       	ldd	r6, Y+13	; 0x0d
    3e5e:	7e 84       	ldd	r7, Y+14	; 0x0e
    3e60:	8f 84       	ldd	r8, Y+15	; 0x0f
    3e62:	98 88       	ldd	r9, Y+16	; 0x10
    3e64:	ed 88       	ldd	r14, Y+21	; 0x15
    3e66:	fe 88       	ldd	r15, Y+22	; 0x16
    3e68:	0f 89       	ldd	r16, Y+23	; 0x17
    3e6a:	18 8d       	ldd	r17, Y+24	; 0x18
    3e6c:	e0 e2       	ldi	r30, 0x20	; 32
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	dc 01       	movw	r26, r24
    3e76:	aa 24       	eor	r10, r10
    3e78:	bb 24       	eor	r11, r11
    3e7a:	65 01       	movw	r12, r10
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	a9 01       	movw	r20, r18
    3e82:	b3 01       	movw	r22, r6
    3e84:	61 70       	andi	r22, 0x01	; 1
    3e86:	70 70       	andi	r23, 0x00	; 0
    3e88:	61 15       	cp	r22, r1
    3e8a:	71 05       	cpc	r23, r1
    3e8c:	d1 f0       	breq	.+52     	; 0x3ec2 <__mulsf3+0xee>
    3e8e:	2e 0d       	add	r18, r14
    3e90:	3f 1d       	adc	r19, r15
    3e92:	40 1f       	adc	r20, r16
    3e94:	51 1f       	adc	r21, r17
    3e96:	15 01       	movw	r2, r10
    3e98:	26 01       	movw	r4, r12
    3e9a:	28 0e       	add	r2, r24
    3e9c:	39 1e       	adc	r3, r25
    3e9e:	4a 1e       	adc	r4, r26
    3ea0:	5b 1e       	adc	r5, r27
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	a0 e0       	ldi	r26, 0x00	; 0
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	2e 15       	cp	r18, r14
    3eac:	3f 05       	cpc	r19, r15
    3eae:	40 07       	cpc	r20, r16
    3eb0:	51 07       	cpc	r21, r17
    3eb2:	18 f0       	brcs	.+6      	; 0x3eba <__mulsf3+0xe6>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	dc 01       	movw	r26, r24
    3eba:	82 0d       	add	r24, r2
    3ebc:	93 1d       	adc	r25, r3
    3ebe:	a4 1d       	adc	r26, r4
    3ec0:	b5 1d       	adc	r27, r5
    3ec2:	aa 0c       	add	r10, r10
    3ec4:	bb 1c       	adc	r11, r11
    3ec6:	cc 1c       	adc	r12, r12
    3ec8:	dd 1c       	adc	r13, r13
    3eca:	17 ff       	sbrs	r17, 7
    3ecc:	09 c0       	rjmp	.+18     	; 0x3ee0 <__mulsf3+0x10c>
    3ece:	61 e0       	ldi	r22, 0x01	; 1
    3ed0:	26 2e       	mov	r2, r22
    3ed2:	31 2c       	mov	r3, r1
    3ed4:	41 2c       	mov	r4, r1
    3ed6:	51 2c       	mov	r5, r1
    3ed8:	a2 28       	or	r10, r2
    3eda:	b3 28       	or	r11, r3
    3edc:	c4 28       	or	r12, r4
    3ede:	d5 28       	or	r13, r5
    3ee0:	31 97       	sbiw	r30, 0x01	; 1
    3ee2:	49 f0       	breq	.+18     	; 0x3ef6 <__mulsf3+0x122>
    3ee4:	ee 0c       	add	r14, r14
    3ee6:	ff 1c       	adc	r15, r15
    3ee8:	00 1f       	adc	r16, r16
    3eea:	11 1f       	adc	r17, r17
    3eec:	96 94       	lsr	r9
    3eee:	87 94       	ror	r8
    3ef0:	77 94       	ror	r7
    3ef2:	67 94       	ror	r6
    3ef4:	c6 cf       	rjmp	.-116    	; 0x3e82 <__mulsf3+0xae>
    3ef6:	6b 89       	ldd	r22, Y+19	; 0x13
    3ef8:	7c 89       	ldd	r23, Y+20	; 0x14
    3efa:	eb 85       	ldd	r30, Y+11	; 0x0b
    3efc:	fc 85       	ldd	r31, Y+12	; 0x0c
    3efe:	6e 0f       	add	r22, r30
    3f00:	7f 1f       	adc	r23, r31
    3f02:	6e 5f       	subi	r22, 0xFE	; 254
    3f04:	7f 4f       	sbci	r23, 0xFF	; 255
    3f06:	7c 8f       	std	Y+28, r23	; 0x1c
    3f08:	6b 8f       	std	Y+27, r22	; 0x1b
    3f0a:	61 e0       	ldi	r22, 0x01	; 1
    3f0c:	ea 85       	ldd	r30, Y+10	; 0x0a
    3f0e:	7a 89       	ldd	r23, Y+18	; 0x12
    3f10:	e7 17       	cp	r30, r23
    3f12:	09 f4       	brne	.+2      	; 0x3f16 <__mulsf3+0x142>
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	6a 8f       	std	Y+26, r22	; 0x1a
    3f18:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3f1a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3f1c:	10 c0       	rjmp	.+32     	; 0x3f3e <__mulsf3+0x16a>
    3f1e:	fc 01       	movw	r30, r24
    3f20:	e1 70       	andi	r30, 0x01	; 1
    3f22:	f0 70       	andi	r31, 0x00	; 0
    3f24:	30 97       	sbiw	r30, 0x00	; 0
    3f26:	29 f0       	breq	.+10     	; 0x3f32 <__mulsf3+0x15e>
    3f28:	56 95       	lsr	r21
    3f2a:	47 95       	ror	r20
    3f2c:	37 95       	ror	r19
    3f2e:	27 95       	ror	r18
    3f30:	50 68       	ori	r21, 0x80	; 128
    3f32:	b6 95       	lsr	r27
    3f34:	a7 95       	ror	r26
    3f36:	97 95       	ror	r25
    3f38:	87 95       	ror	r24
    3f3a:	6f 5f       	subi	r22, 0xFF	; 255
    3f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3e:	b7 fd       	sbrc	r27, 7
    3f40:	ee cf       	rjmp	.-36     	; 0x3f1e <__mulsf3+0x14a>
    3f42:	0c c0       	rjmp	.+24     	; 0x3f5c <__mulsf3+0x188>
    3f44:	88 0f       	add	r24, r24
    3f46:	99 1f       	adc	r25, r25
    3f48:	aa 1f       	adc	r26, r26
    3f4a:	bb 1f       	adc	r27, r27
    3f4c:	57 fd       	sbrc	r21, 7
    3f4e:	81 60       	ori	r24, 0x01	; 1
    3f50:	22 0f       	add	r18, r18
    3f52:	33 1f       	adc	r19, r19
    3f54:	44 1f       	adc	r20, r20
    3f56:	55 1f       	adc	r21, r21
    3f58:	61 50       	subi	r22, 0x01	; 1
    3f5a:	70 40       	sbci	r23, 0x00	; 0
    3f5c:	80 30       	cpi	r24, 0x00	; 0
    3f5e:	e0 e0       	ldi	r30, 0x00	; 0
    3f60:	9e 07       	cpc	r25, r30
    3f62:	e0 e0       	ldi	r30, 0x00	; 0
    3f64:	ae 07       	cpc	r26, r30
    3f66:	e0 e4       	ldi	r30, 0x40	; 64
    3f68:	be 07       	cpc	r27, r30
    3f6a:	60 f3       	brcs	.-40     	; 0x3f44 <__mulsf3+0x170>
    3f6c:	6b 8f       	std	Y+27, r22	; 0x1b
    3f6e:	7c 8f       	std	Y+28, r23	; 0x1c
    3f70:	6f e7       	ldi	r22, 0x7F	; 127
    3f72:	e6 2e       	mov	r14, r22
    3f74:	f1 2c       	mov	r15, r1
    3f76:	01 2d       	mov	r16, r1
    3f78:	11 2d       	mov	r17, r1
    3f7a:	e8 22       	and	r14, r24
    3f7c:	f9 22       	and	r15, r25
    3f7e:	0a 23       	and	r16, r26
    3f80:	1b 23       	and	r17, r27
    3f82:	60 e4       	ldi	r22, 0x40	; 64
    3f84:	e6 16       	cp	r14, r22
    3f86:	f1 04       	cpc	r15, r1
    3f88:	01 05       	cpc	r16, r1
    3f8a:	11 05       	cpc	r17, r1
    3f8c:	61 f4       	brne	.+24     	; 0x3fa6 <__mulsf3+0x1d2>
    3f8e:	87 fd       	sbrc	r24, 7
    3f90:	0a c0       	rjmp	.+20     	; 0x3fa6 <__mulsf3+0x1d2>
    3f92:	21 15       	cp	r18, r1
    3f94:	31 05       	cpc	r19, r1
    3f96:	41 05       	cpc	r20, r1
    3f98:	51 05       	cpc	r21, r1
    3f9a:	29 f0       	breq	.+10     	; 0x3fa6 <__mulsf3+0x1d2>
    3f9c:	80 5c       	subi	r24, 0xC0	; 192
    3f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa0:	af 4f       	sbci	r26, 0xFF	; 255
    3fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fa4:	80 78       	andi	r24, 0x80	; 128
    3fa6:	8d 8f       	std	Y+29, r24	; 0x1d
    3fa8:	9e 8f       	std	Y+30, r25	; 0x1e
    3faa:	af 8f       	std	Y+31, r26	; 0x1f
    3fac:	b8 a3       	std	Y+32, r27	; 0x20
    3fae:	83 e0       	ldi	r24, 0x03	; 3
    3fb0:	89 8f       	std	Y+25, r24	; 0x19
    3fb2:	ce 01       	movw	r24, r28
    3fb4:	49 96       	adiw	r24, 0x19	; 25
    3fb6:	02 c0       	rjmp	.+4      	; 0x3fbc <__mulsf3+0x1e8>
    3fb8:	87 e7       	ldi	r24, 0x77	; 119
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 a6 22 	call	0x454c	; 0x454c <__pack_f>
    3fc0:	a0 96       	adiw	r28, 0x20	; 32
    3fc2:	e2 e1       	ldi	r30, 0x12	; 18
    3fc4:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__epilogue_restores__>

00003fc8 <__divsf3>:
    3fc8:	a8 e1       	ldi	r26, 0x18	; 24
    3fca:	b0 e0       	ldi	r27, 0x00	; 0
    3fcc:	ea ee       	ldi	r30, 0xEA	; 234
    3fce:	ff e1       	ldi	r31, 0x1F	; 31
    3fd0:	0c 94 93 24 	jmp	0x4926	; 0x4926 <__prologue_saves__+0x10>
    3fd4:	69 83       	std	Y+1, r22	; 0x01
    3fd6:	7a 83       	std	Y+2, r23	; 0x02
    3fd8:	8b 83       	std	Y+3, r24	; 0x03
    3fda:	9c 83       	std	Y+4, r25	; 0x04
    3fdc:	2d 83       	std	Y+5, r18	; 0x05
    3fde:	3e 83       	std	Y+6, r19	; 0x06
    3fe0:	4f 83       	std	Y+7, r20	; 0x07
    3fe2:	58 87       	std	Y+8, r21	; 0x08
    3fe4:	8e 01       	movw	r16, r28
    3fe6:	07 5f       	subi	r16, 0xF7	; 247
    3fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fea:	ce 01       	movw	r24, r28
    3fec:	01 96       	adiw	r24, 0x01	; 1
    3fee:	b8 01       	movw	r22, r16
    3ff0:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    3ff4:	81 e1       	ldi	r24, 0x11	; 17
    3ff6:	e8 2e       	mov	r14, r24
    3ff8:	f1 2c       	mov	r15, r1
    3ffa:	ec 0e       	add	r14, r28
    3ffc:	fd 1e       	adc	r15, r29
    3ffe:	ce 01       	movw	r24, r28
    4000:	05 96       	adiw	r24, 0x05	; 5
    4002:	b7 01       	movw	r22, r14
    4004:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    4008:	99 85       	ldd	r25, Y+9	; 0x09
    400a:	92 30       	cpi	r25, 0x02	; 2
    400c:	08 f4       	brcc	.+2      	; 0x4010 <__divsf3+0x48>
    400e:	83 c0       	rjmp	.+262    	; 0x4116 <__divsf3+0x14e>
    4010:	89 89       	ldd	r24, Y+17	; 0x11
    4012:	82 30       	cpi	r24, 0x02	; 2
    4014:	08 f4       	brcc	.+2      	; 0x4018 <__divsf3+0x50>
    4016:	7b c0       	rjmp	.+246    	; 0x410e <__divsf3+0x146>
    4018:	2a 85       	ldd	r18, Y+10	; 0x0a
    401a:	3a 89       	ldd	r19, Y+18	; 0x12
    401c:	23 27       	eor	r18, r19
    401e:	2a 87       	std	Y+10, r18	; 0x0a
    4020:	94 30       	cpi	r25, 0x04	; 4
    4022:	11 f0       	breq	.+4      	; 0x4028 <__divsf3+0x60>
    4024:	92 30       	cpi	r25, 0x02	; 2
    4026:	21 f4       	brne	.+8      	; 0x4030 <__divsf3+0x68>
    4028:	98 17       	cp	r25, r24
    402a:	09 f0       	breq	.+2      	; 0x402e <__divsf3+0x66>
    402c:	6c c0       	rjmp	.+216    	; 0x4106 <__divsf3+0x13e>
    402e:	71 c0       	rjmp	.+226    	; 0x4112 <__divsf3+0x14a>
    4030:	84 30       	cpi	r24, 0x04	; 4
    4032:	39 f4       	brne	.+14     	; 0x4042 <__divsf3+0x7a>
    4034:	1d 86       	std	Y+13, r1	; 0x0d
    4036:	1e 86       	std	Y+14, r1	; 0x0e
    4038:	1f 86       	std	Y+15, r1	; 0x0f
    403a:	18 8a       	std	Y+16, r1	; 0x10
    403c:	1c 86       	std	Y+12, r1	; 0x0c
    403e:	1b 86       	std	Y+11, r1	; 0x0b
    4040:	6a c0       	rjmp	.+212    	; 0x4116 <__divsf3+0x14e>
    4042:	82 30       	cpi	r24, 0x02	; 2
    4044:	19 f4       	brne	.+6      	; 0x404c <__divsf3+0x84>
    4046:	84 e0       	ldi	r24, 0x04	; 4
    4048:	89 87       	std	Y+9, r24	; 0x09
    404a:	65 c0       	rjmp	.+202    	; 0x4116 <__divsf3+0x14e>
    404c:	8b 85       	ldd	r24, Y+11	; 0x0b
    404e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4050:	2b 89       	ldd	r18, Y+19	; 0x13
    4052:	3c 89       	ldd	r19, Y+20	; 0x14
    4054:	82 1b       	sub	r24, r18
    4056:	93 0b       	sbc	r25, r19
    4058:	9c 87       	std	Y+12, r25	; 0x0c
    405a:	8b 87       	std	Y+11, r24	; 0x0b
    405c:	2d 85       	ldd	r18, Y+13	; 0x0d
    405e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4060:	4f 85       	ldd	r20, Y+15	; 0x0f
    4062:	58 89       	ldd	r21, Y+16	; 0x10
    4064:	ed 88       	ldd	r14, Y+21	; 0x15
    4066:	fe 88       	ldd	r15, Y+22	; 0x16
    4068:	0f 89       	ldd	r16, Y+23	; 0x17
    406a:	18 8d       	ldd	r17, Y+24	; 0x18
    406c:	2e 15       	cp	r18, r14
    406e:	3f 05       	cpc	r19, r15
    4070:	40 07       	cpc	r20, r16
    4072:	51 07       	cpc	r21, r17
    4074:	38 f4       	brcc	.+14     	; 0x4084 <__divsf3+0xbc>
    4076:	22 0f       	add	r18, r18
    4078:	33 1f       	adc	r19, r19
    407a:	44 1f       	adc	r20, r20
    407c:	55 1f       	adc	r21, r21
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	9c 87       	std	Y+12, r25	; 0x0c
    4082:	8b 87       	std	Y+11, r24	; 0x0b
    4084:	6f e1       	ldi	r22, 0x1F	; 31
    4086:	70 e0       	ldi	r23, 0x00	; 0
    4088:	a1 2c       	mov	r10, r1
    408a:	b1 2c       	mov	r11, r1
    408c:	c1 2c       	mov	r12, r1
    408e:	a0 e4       	ldi	r26, 0x40	; 64
    4090:	da 2e       	mov	r13, r26
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	dc 01       	movw	r26, r24
    4098:	2e 15       	cp	r18, r14
    409a:	3f 05       	cpc	r19, r15
    409c:	40 07       	cpc	r20, r16
    409e:	51 07       	cpc	r21, r17
    40a0:	40 f0       	brcs	.+16     	; 0x40b2 <__divsf3+0xea>
    40a2:	8a 29       	or	r24, r10
    40a4:	9b 29       	or	r25, r11
    40a6:	ac 29       	or	r26, r12
    40a8:	bd 29       	or	r27, r13
    40aa:	2e 19       	sub	r18, r14
    40ac:	3f 09       	sbc	r19, r15
    40ae:	40 0b       	sbc	r20, r16
    40b0:	51 0b       	sbc	r21, r17
    40b2:	d6 94       	lsr	r13
    40b4:	c7 94       	ror	r12
    40b6:	b7 94       	ror	r11
    40b8:	a7 94       	ror	r10
    40ba:	22 0f       	add	r18, r18
    40bc:	33 1f       	adc	r19, r19
    40be:	44 1f       	adc	r20, r20
    40c0:	55 1f       	adc	r21, r21
    40c2:	61 50       	subi	r22, 0x01	; 1
    40c4:	70 40       	sbci	r23, 0x00	; 0
    40c6:	41 f7       	brne	.-48     	; 0x4098 <__divsf3+0xd0>
    40c8:	6f e7       	ldi	r22, 0x7F	; 127
    40ca:	e6 2e       	mov	r14, r22
    40cc:	f1 2c       	mov	r15, r1
    40ce:	01 2d       	mov	r16, r1
    40d0:	11 2d       	mov	r17, r1
    40d2:	e8 22       	and	r14, r24
    40d4:	f9 22       	and	r15, r25
    40d6:	0a 23       	and	r16, r26
    40d8:	1b 23       	and	r17, r27
    40da:	60 e4       	ldi	r22, 0x40	; 64
    40dc:	e6 16       	cp	r14, r22
    40de:	f1 04       	cpc	r15, r1
    40e0:	01 05       	cpc	r16, r1
    40e2:	11 05       	cpc	r17, r1
    40e4:	61 f4       	brne	.+24     	; 0x40fe <__divsf3+0x136>
    40e6:	87 fd       	sbrc	r24, 7
    40e8:	0a c0       	rjmp	.+20     	; 0x40fe <__divsf3+0x136>
    40ea:	21 15       	cp	r18, r1
    40ec:	31 05       	cpc	r19, r1
    40ee:	41 05       	cpc	r20, r1
    40f0:	51 05       	cpc	r21, r1
    40f2:	29 f0       	breq	.+10     	; 0x40fe <__divsf3+0x136>
    40f4:	80 5c       	subi	r24, 0xC0	; 192
    40f6:	9f 4f       	sbci	r25, 0xFF	; 255
    40f8:	af 4f       	sbci	r26, 0xFF	; 255
    40fa:	bf 4f       	sbci	r27, 0xFF	; 255
    40fc:	80 78       	andi	r24, 0x80	; 128
    40fe:	8d 87       	std	Y+13, r24	; 0x0d
    4100:	9e 87       	std	Y+14, r25	; 0x0e
    4102:	af 87       	std	Y+15, r26	; 0x0f
    4104:	b8 8b       	std	Y+16, r27	; 0x10
    4106:	8e 01       	movw	r16, r28
    4108:	07 5f       	subi	r16, 0xF7	; 247
    410a:	1f 4f       	sbci	r17, 0xFF	; 255
    410c:	04 c0       	rjmp	.+8      	; 0x4116 <__divsf3+0x14e>
    410e:	87 01       	movw	r16, r14
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <__divsf3+0x14e>
    4112:	07 e7       	ldi	r16, 0x77	; 119
    4114:	10 e0       	ldi	r17, 0x00	; 0
    4116:	c8 01       	movw	r24, r16
    4118:	0e 94 a6 22 	call	0x454c	; 0x454c <__pack_f>
    411c:	68 96       	adiw	r28, 0x18	; 24
    411e:	ea e0       	ldi	r30, 0x0A	; 10
    4120:	0c 94 af 24 	jmp	0x495e	; 0x495e <__epilogue_restores__+0x10>

00004124 <__gtsf2>:
    4124:	a8 e1       	ldi	r26, 0x18	; 24
    4126:	b0 e0       	ldi	r27, 0x00	; 0
    4128:	e8 e9       	ldi	r30, 0x98	; 152
    412a:	f0 e2       	ldi	r31, 0x20	; 32
    412c:	0c 94 97 24 	jmp	0x492e	; 0x492e <__prologue_saves__+0x18>
    4130:	69 83       	std	Y+1, r22	; 0x01
    4132:	7a 83       	std	Y+2, r23	; 0x02
    4134:	8b 83       	std	Y+3, r24	; 0x03
    4136:	9c 83       	std	Y+4, r25	; 0x04
    4138:	2d 83       	std	Y+5, r18	; 0x05
    413a:	3e 83       	std	Y+6, r19	; 0x06
    413c:	4f 83       	std	Y+7, r20	; 0x07
    413e:	58 87       	std	Y+8, r21	; 0x08
    4140:	8e 01       	movw	r16, r28
    4142:	07 5f       	subi	r16, 0xF7	; 247
    4144:	1f 4f       	sbci	r17, 0xFF	; 255
    4146:	ce 01       	movw	r24, r28
    4148:	01 96       	adiw	r24, 0x01	; 1
    414a:	b8 01       	movw	r22, r16
    414c:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    4150:	81 e1       	ldi	r24, 0x11	; 17
    4152:	e8 2e       	mov	r14, r24
    4154:	f1 2c       	mov	r15, r1
    4156:	ec 0e       	add	r14, r28
    4158:	fd 1e       	adc	r15, r29
    415a:	ce 01       	movw	r24, r28
    415c:	05 96       	adiw	r24, 0x05	; 5
    415e:	b7 01       	movw	r22, r14
    4160:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    4164:	89 85       	ldd	r24, Y+9	; 0x09
    4166:	82 30       	cpi	r24, 0x02	; 2
    4168:	40 f0       	brcs	.+16     	; 0x417a <__gtsf2+0x56>
    416a:	89 89       	ldd	r24, Y+17	; 0x11
    416c:	82 30       	cpi	r24, 0x02	; 2
    416e:	28 f0       	brcs	.+10     	; 0x417a <__gtsf2+0x56>
    4170:	c8 01       	movw	r24, r16
    4172:	b7 01       	movw	r22, r14
    4174:	0e 94 dd 23 	call	0x47ba	; 0x47ba <__fpcmp_parts_f>
    4178:	01 c0       	rjmp	.+2      	; 0x417c <__gtsf2+0x58>
    417a:	8f ef       	ldi	r24, 0xFF	; 255
    417c:	68 96       	adiw	r28, 0x18	; 24
    417e:	e6 e0       	ldi	r30, 0x06	; 6
    4180:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <__epilogue_restores__+0x18>

00004184 <__gesf2>:
    4184:	a8 e1       	ldi	r26, 0x18	; 24
    4186:	b0 e0       	ldi	r27, 0x00	; 0
    4188:	e8 ec       	ldi	r30, 0xC8	; 200
    418a:	f0 e2       	ldi	r31, 0x20	; 32
    418c:	0c 94 97 24 	jmp	0x492e	; 0x492e <__prologue_saves__+0x18>
    4190:	69 83       	std	Y+1, r22	; 0x01
    4192:	7a 83       	std	Y+2, r23	; 0x02
    4194:	8b 83       	std	Y+3, r24	; 0x03
    4196:	9c 83       	std	Y+4, r25	; 0x04
    4198:	2d 83       	std	Y+5, r18	; 0x05
    419a:	3e 83       	std	Y+6, r19	; 0x06
    419c:	4f 83       	std	Y+7, r20	; 0x07
    419e:	58 87       	std	Y+8, r21	; 0x08
    41a0:	8e 01       	movw	r16, r28
    41a2:	07 5f       	subi	r16, 0xF7	; 247
    41a4:	1f 4f       	sbci	r17, 0xFF	; 255
    41a6:	ce 01       	movw	r24, r28
    41a8:	01 96       	adiw	r24, 0x01	; 1
    41aa:	b8 01       	movw	r22, r16
    41ac:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    41b0:	81 e1       	ldi	r24, 0x11	; 17
    41b2:	e8 2e       	mov	r14, r24
    41b4:	f1 2c       	mov	r15, r1
    41b6:	ec 0e       	add	r14, r28
    41b8:	fd 1e       	adc	r15, r29
    41ba:	ce 01       	movw	r24, r28
    41bc:	05 96       	adiw	r24, 0x05	; 5
    41be:	b7 01       	movw	r22, r14
    41c0:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    41c4:	89 85       	ldd	r24, Y+9	; 0x09
    41c6:	82 30       	cpi	r24, 0x02	; 2
    41c8:	40 f0       	brcs	.+16     	; 0x41da <__gesf2+0x56>
    41ca:	89 89       	ldd	r24, Y+17	; 0x11
    41cc:	82 30       	cpi	r24, 0x02	; 2
    41ce:	28 f0       	brcs	.+10     	; 0x41da <__gesf2+0x56>
    41d0:	c8 01       	movw	r24, r16
    41d2:	b7 01       	movw	r22, r14
    41d4:	0e 94 dd 23 	call	0x47ba	; 0x47ba <__fpcmp_parts_f>
    41d8:	01 c0       	rjmp	.+2      	; 0x41dc <__gesf2+0x58>
    41da:	8f ef       	ldi	r24, 0xFF	; 255
    41dc:	68 96       	adiw	r28, 0x18	; 24
    41de:	e6 e0       	ldi	r30, 0x06	; 6
    41e0:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <__epilogue_restores__+0x18>

000041e4 <__ltsf2>:
    41e4:	a8 e1       	ldi	r26, 0x18	; 24
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	e8 ef       	ldi	r30, 0xF8	; 248
    41ea:	f0 e2       	ldi	r31, 0x20	; 32
    41ec:	0c 94 97 24 	jmp	0x492e	; 0x492e <__prologue_saves__+0x18>
    41f0:	69 83       	std	Y+1, r22	; 0x01
    41f2:	7a 83       	std	Y+2, r23	; 0x02
    41f4:	8b 83       	std	Y+3, r24	; 0x03
    41f6:	9c 83       	std	Y+4, r25	; 0x04
    41f8:	2d 83       	std	Y+5, r18	; 0x05
    41fa:	3e 83       	std	Y+6, r19	; 0x06
    41fc:	4f 83       	std	Y+7, r20	; 0x07
    41fe:	58 87       	std	Y+8, r21	; 0x08
    4200:	8e 01       	movw	r16, r28
    4202:	07 5f       	subi	r16, 0xF7	; 247
    4204:	1f 4f       	sbci	r17, 0xFF	; 255
    4206:	ce 01       	movw	r24, r28
    4208:	01 96       	adiw	r24, 0x01	; 1
    420a:	b8 01       	movw	r22, r16
    420c:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    4210:	81 e1       	ldi	r24, 0x11	; 17
    4212:	e8 2e       	mov	r14, r24
    4214:	f1 2c       	mov	r15, r1
    4216:	ec 0e       	add	r14, r28
    4218:	fd 1e       	adc	r15, r29
    421a:	ce 01       	movw	r24, r28
    421c:	05 96       	adiw	r24, 0x05	; 5
    421e:	b7 01       	movw	r22, r14
    4220:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    4224:	89 85       	ldd	r24, Y+9	; 0x09
    4226:	82 30       	cpi	r24, 0x02	; 2
    4228:	40 f0       	brcs	.+16     	; 0x423a <__ltsf2+0x56>
    422a:	89 89       	ldd	r24, Y+17	; 0x11
    422c:	82 30       	cpi	r24, 0x02	; 2
    422e:	28 f0       	brcs	.+10     	; 0x423a <__ltsf2+0x56>
    4230:	c8 01       	movw	r24, r16
    4232:	b7 01       	movw	r22, r14
    4234:	0e 94 dd 23 	call	0x47ba	; 0x47ba <__fpcmp_parts_f>
    4238:	01 c0       	rjmp	.+2      	; 0x423c <__ltsf2+0x58>
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	68 96       	adiw	r28, 0x18	; 24
    423e:	e6 e0       	ldi	r30, 0x06	; 6
    4240:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <__epilogue_restores__+0x18>

00004244 <__floatsisf>:
    4244:	a8 e0       	ldi	r26, 0x08	; 8
    4246:	b0 e0       	ldi	r27, 0x00	; 0
    4248:	e8 e2       	ldi	r30, 0x28	; 40
    424a:	f1 e2       	ldi	r31, 0x21	; 33
    424c:	0c 94 97 24 	jmp	0x492e	; 0x492e <__prologue_saves__+0x18>
    4250:	7b 01       	movw	r14, r22
    4252:	8c 01       	movw	r16, r24
    4254:	83 e0       	ldi	r24, 0x03	; 3
    4256:	89 83       	std	Y+1, r24	; 0x01
    4258:	d8 01       	movw	r26, r16
    425a:	c7 01       	movw	r24, r14
    425c:	88 27       	eor	r24, r24
    425e:	b7 fd       	sbrc	r27, 7
    4260:	83 95       	inc	r24
    4262:	99 27       	eor	r25, r25
    4264:	aa 27       	eor	r26, r26
    4266:	bb 27       	eor	r27, r27
    4268:	28 2f       	mov	r18, r24
    426a:	8a 83       	std	Y+2, r24	; 0x02
    426c:	e1 14       	cp	r14, r1
    426e:	f1 04       	cpc	r15, r1
    4270:	01 05       	cpc	r16, r1
    4272:	11 05       	cpc	r17, r1
    4274:	19 f4       	brne	.+6      	; 0x427c <__floatsisf+0x38>
    4276:	82 e0       	ldi	r24, 0x02	; 2
    4278:	89 83       	std	Y+1, r24	; 0x01
    427a:	37 c0       	rjmp	.+110    	; 0x42ea <__floatsisf+0xa6>
    427c:	8e e1       	ldi	r24, 0x1E	; 30
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	9c 83       	std	Y+4, r25	; 0x04
    4282:	8b 83       	std	Y+3, r24	; 0x03
    4284:	22 23       	and	r18, r18
    4286:	89 f0       	breq	.+34     	; 0x42aa <__floatsisf+0x66>
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	e8 16       	cp	r14, r24
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	f8 06       	cpc	r15, r24
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	08 07       	cpc	r16, r24
    4294:	80 e8       	ldi	r24, 0x80	; 128
    4296:	18 07       	cpc	r17, r24
    4298:	69 f1       	breq	.+90     	; 0x42f4 <__floatsisf+0xb0>
    429a:	10 95       	com	r17
    429c:	00 95       	com	r16
    429e:	f0 94       	com	r15
    42a0:	e0 94       	com	r14
    42a2:	e1 1c       	adc	r14, r1
    42a4:	f1 1c       	adc	r15, r1
    42a6:	01 1d       	adc	r16, r1
    42a8:	11 1d       	adc	r17, r1
    42aa:	ed 82       	std	Y+5, r14	; 0x05
    42ac:	fe 82       	std	Y+6, r15	; 0x06
    42ae:	0f 83       	std	Y+7, r16	; 0x07
    42b0:	18 87       	std	Y+8, r17	; 0x08
    42b2:	c8 01       	movw	r24, r16
    42b4:	b7 01       	movw	r22, r14
    42b6:	0e 94 4c 22 	call	0x4498	; 0x4498 <__clzsi2>
    42ba:	9c 01       	movw	r18, r24
    42bc:	21 50       	subi	r18, 0x01	; 1
    42be:	30 40       	sbci	r19, 0x00	; 0
    42c0:	12 16       	cp	r1, r18
    42c2:	13 06       	cpc	r1, r19
    42c4:	94 f4       	brge	.+36     	; 0x42ea <__floatsisf+0xa6>
    42c6:	02 2e       	mov	r0, r18
    42c8:	04 c0       	rjmp	.+8      	; 0x42d2 <__floatsisf+0x8e>
    42ca:	ee 0c       	add	r14, r14
    42cc:	ff 1c       	adc	r15, r15
    42ce:	00 1f       	adc	r16, r16
    42d0:	11 1f       	adc	r17, r17
    42d2:	0a 94       	dec	r0
    42d4:	d2 f7       	brpl	.-12     	; 0x42ca <__floatsisf+0x86>
    42d6:	ed 82       	std	Y+5, r14	; 0x05
    42d8:	fe 82       	std	Y+6, r15	; 0x06
    42da:	0f 83       	std	Y+7, r16	; 0x07
    42dc:	18 87       	std	Y+8, r17	; 0x08
    42de:	8e e1       	ldi	r24, 0x1E	; 30
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	82 1b       	sub	r24, r18
    42e4:	93 0b       	sbc	r25, r19
    42e6:	9c 83       	std	Y+4, r25	; 0x04
    42e8:	8b 83       	std	Y+3, r24	; 0x03
    42ea:	ce 01       	movw	r24, r28
    42ec:	01 96       	adiw	r24, 0x01	; 1
    42ee:	0e 94 a6 22 	call	0x454c	; 0x454c <__pack_f>
    42f2:	04 c0       	rjmp	.+8      	; 0x42fc <__floatsisf+0xb8>
    42f4:	60 e0       	ldi	r22, 0x00	; 0
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	9f ec       	ldi	r25, 0xCF	; 207
    42fc:	28 96       	adiw	r28, 0x08	; 8
    42fe:	e6 e0       	ldi	r30, 0x06	; 6
    4300:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <__epilogue_restores__+0x18>

00004304 <__fixsfsi>:
    4304:	ac e0       	ldi	r26, 0x0C	; 12
    4306:	b0 e0       	ldi	r27, 0x00	; 0
    4308:	e8 e8       	ldi	r30, 0x88	; 136
    430a:	f1 e2       	ldi	r31, 0x21	; 33
    430c:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__prologue_saves__+0x20>
    4310:	69 83       	std	Y+1, r22	; 0x01
    4312:	7a 83       	std	Y+2, r23	; 0x02
    4314:	8b 83       	std	Y+3, r24	; 0x03
    4316:	9c 83       	std	Y+4, r25	; 0x04
    4318:	ce 01       	movw	r24, r28
    431a:	01 96       	adiw	r24, 0x01	; 1
    431c:	be 01       	movw	r22, r28
    431e:	6b 5f       	subi	r22, 0xFB	; 251
    4320:	7f 4f       	sbci	r23, 0xFF	; 255
    4322:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__unpack_f>
    4326:	8d 81       	ldd	r24, Y+5	; 0x05
    4328:	82 30       	cpi	r24, 0x02	; 2
    432a:	81 f1       	breq	.+96     	; 0x438c <__fixsfsi+0x88>
    432c:	82 30       	cpi	r24, 0x02	; 2
    432e:	70 f1       	brcs	.+92     	; 0x438c <__fixsfsi+0x88>
    4330:	84 30       	cpi	r24, 0x04	; 4
    4332:	21 f4       	brne	.+8      	; 0x433c <__fixsfsi+0x38>
    4334:	8e 81       	ldd	r24, Y+6	; 0x06
    4336:	88 23       	and	r24, r24
    4338:	69 f1       	breq	.+90     	; 0x4394 <__fixsfsi+0x90>
    433a:	0a c0       	rjmp	.+20     	; 0x4350 <__fixsfsi+0x4c>
    433c:	2f 81       	ldd	r18, Y+7	; 0x07
    433e:	38 85       	ldd	r19, Y+8	; 0x08
    4340:	37 fd       	sbrc	r19, 7
    4342:	24 c0       	rjmp	.+72     	; 0x438c <__fixsfsi+0x88>
    4344:	6e 81       	ldd	r22, Y+6	; 0x06
    4346:	2f 31       	cpi	r18, 0x1F	; 31
    4348:	31 05       	cpc	r19, r1
    434a:	3c f0       	brlt	.+14     	; 0x435a <__fixsfsi+0x56>
    434c:	66 23       	and	r22, r22
    434e:	11 f1       	breq	.+68     	; 0x4394 <__fixsfsi+0x90>
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	40 e0       	ldi	r20, 0x00	; 0
    4356:	50 e8       	ldi	r21, 0x80	; 128
    4358:	21 c0       	rjmp	.+66     	; 0x439c <__fixsfsi+0x98>
    435a:	8e e1       	ldi	r24, 0x1E	; 30
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	82 1b       	sub	r24, r18
    4360:	93 0b       	sbc	r25, r19
    4362:	29 85       	ldd	r18, Y+9	; 0x09
    4364:	3a 85       	ldd	r19, Y+10	; 0x0a
    4366:	4b 85       	ldd	r20, Y+11	; 0x0b
    4368:	5c 85       	ldd	r21, Y+12	; 0x0c
    436a:	04 c0       	rjmp	.+8      	; 0x4374 <__fixsfsi+0x70>
    436c:	56 95       	lsr	r21
    436e:	47 95       	ror	r20
    4370:	37 95       	ror	r19
    4372:	27 95       	ror	r18
    4374:	8a 95       	dec	r24
    4376:	d2 f7       	brpl	.-12     	; 0x436c <__fixsfsi+0x68>
    4378:	66 23       	and	r22, r22
    437a:	81 f0       	breq	.+32     	; 0x439c <__fixsfsi+0x98>
    437c:	50 95       	com	r21
    437e:	40 95       	com	r20
    4380:	30 95       	com	r19
    4382:	21 95       	neg	r18
    4384:	3f 4f       	sbci	r19, 0xFF	; 255
    4386:	4f 4f       	sbci	r20, 0xFF	; 255
    4388:	5f 4f       	sbci	r21, 0xFF	; 255
    438a:	08 c0       	rjmp	.+16     	; 0x439c <__fixsfsi+0x98>
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	a9 01       	movw	r20, r18
    4392:	04 c0       	rjmp	.+8      	; 0x439c <__fixsfsi+0x98>
    4394:	2f ef       	ldi	r18, 0xFF	; 255
    4396:	3f ef       	ldi	r19, 0xFF	; 255
    4398:	4f ef       	ldi	r20, 0xFF	; 255
    439a:	5f e7       	ldi	r21, 0x7F	; 127
    439c:	b9 01       	movw	r22, r18
    439e:	ca 01       	movw	r24, r20
    43a0:	2c 96       	adiw	r28, 0x0c	; 12
    43a2:	e2 e0       	ldi	r30, 0x02	; 2
    43a4:	0c 94 b7 24 	jmp	0x496e	; 0x496e <__epilogue_restores__+0x20>

000043a8 <__floatunsisf>:
    43a8:	a8 e0       	ldi	r26, 0x08	; 8
    43aa:	b0 e0       	ldi	r27, 0x00	; 0
    43ac:	ea ed       	ldi	r30, 0xDA	; 218
    43ae:	f1 e2       	ldi	r31, 0x21	; 33
    43b0:	0c 94 95 24 	jmp	0x492a	; 0x492a <__prologue_saves__+0x14>
    43b4:	7b 01       	movw	r14, r22
    43b6:	8c 01       	movw	r16, r24
    43b8:	1a 82       	std	Y+2, r1	; 0x02
    43ba:	61 15       	cp	r22, r1
    43bc:	71 05       	cpc	r23, r1
    43be:	81 05       	cpc	r24, r1
    43c0:	91 05       	cpc	r25, r1
    43c2:	19 f4       	brne	.+6      	; 0x43ca <__floatunsisf+0x22>
    43c4:	82 e0       	ldi	r24, 0x02	; 2
    43c6:	89 83       	std	Y+1, r24	; 0x01
    43c8:	5f c0       	rjmp	.+190    	; 0x4488 <__floatunsisf+0xe0>
    43ca:	83 e0       	ldi	r24, 0x03	; 3
    43cc:	89 83       	std	Y+1, r24	; 0x01
    43ce:	8e e1       	ldi	r24, 0x1E	; 30
    43d0:	c8 2e       	mov	r12, r24
    43d2:	d1 2c       	mov	r13, r1
    43d4:	dc 82       	std	Y+4, r13	; 0x04
    43d6:	cb 82       	std	Y+3, r12	; 0x03
    43d8:	ed 82       	std	Y+5, r14	; 0x05
    43da:	fe 82       	std	Y+6, r15	; 0x06
    43dc:	0f 83       	std	Y+7, r16	; 0x07
    43de:	18 87       	std	Y+8, r17	; 0x08
    43e0:	c8 01       	movw	r24, r16
    43e2:	b7 01       	movw	r22, r14
    43e4:	0e 94 4c 22 	call	0x4498	; 0x4498 <__clzsi2>
    43e8:	fc 01       	movw	r30, r24
    43ea:	31 97       	sbiw	r30, 0x01	; 1
    43ec:	f7 ff       	sbrs	r31, 7
    43ee:	3a c0       	rjmp	.+116    	; 0x4464 <__floatunsisf+0xbc>
    43f0:	aa 27       	eor	r26, r26
    43f2:	bb 27       	eor	r27, r27
    43f4:	ae 1b       	sub	r26, r30
    43f6:	bf 0b       	sbc	r27, r31
    43f8:	21 e0       	ldi	r18, 0x01	; 1
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	40 e0       	ldi	r20, 0x00	; 0
    43fe:	50 e0       	ldi	r21, 0x00	; 0
    4400:	0a 2e       	mov	r0, r26
    4402:	04 c0       	rjmp	.+8      	; 0x440c <__floatunsisf+0x64>
    4404:	22 0f       	add	r18, r18
    4406:	33 1f       	adc	r19, r19
    4408:	44 1f       	adc	r20, r20
    440a:	55 1f       	adc	r21, r21
    440c:	0a 94       	dec	r0
    440e:	d2 f7       	brpl	.-12     	; 0x4404 <__floatunsisf+0x5c>
    4410:	21 50       	subi	r18, 0x01	; 1
    4412:	30 40       	sbci	r19, 0x00	; 0
    4414:	40 40       	sbci	r20, 0x00	; 0
    4416:	50 40       	sbci	r21, 0x00	; 0
    4418:	2e 21       	and	r18, r14
    441a:	3f 21       	and	r19, r15
    441c:	40 23       	and	r20, r16
    441e:	51 23       	and	r21, r17
    4420:	61 e0       	ldi	r22, 0x01	; 1
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	21 15       	cp	r18, r1
    442a:	31 05       	cpc	r19, r1
    442c:	41 05       	cpc	r20, r1
    442e:	51 05       	cpc	r21, r1
    4430:	19 f4       	brne	.+6      	; 0x4438 <__floatunsisf+0x90>
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	70 e0       	ldi	r23, 0x00	; 0
    4436:	cb 01       	movw	r24, r22
    4438:	04 c0       	rjmp	.+8      	; 0x4442 <__floatunsisf+0x9a>
    443a:	16 95       	lsr	r17
    443c:	07 95       	ror	r16
    443e:	f7 94       	ror	r15
    4440:	e7 94       	ror	r14
    4442:	aa 95       	dec	r26
    4444:	d2 f7       	brpl	.-12     	; 0x443a <__floatunsisf+0x92>
    4446:	e6 2a       	or	r14, r22
    4448:	f7 2a       	or	r15, r23
    444a:	08 2b       	or	r16, r24
    444c:	19 2b       	or	r17, r25
    444e:	ed 82       	std	Y+5, r14	; 0x05
    4450:	fe 82       	std	Y+6, r15	; 0x06
    4452:	0f 83       	std	Y+7, r16	; 0x07
    4454:	18 87       	std	Y+8, r17	; 0x08
    4456:	8e e1       	ldi	r24, 0x1E	; 30
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	8e 1b       	sub	r24, r30
    445c:	9f 0b       	sbc	r25, r31
    445e:	9c 83       	std	Y+4, r25	; 0x04
    4460:	8b 83       	std	Y+3, r24	; 0x03
    4462:	12 c0       	rjmp	.+36     	; 0x4488 <__floatunsisf+0xe0>
    4464:	30 97       	sbiw	r30, 0x00	; 0
    4466:	81 f0       	breq	.+32     	; 0x4488 <__floatunsisf+0xe0>
    4468:	0e 2e       	mov	r0, r30
    446a:	04 c0       	rjmp	.+8      	; 0x4474 <__floatunsisf+0xcc>
    446c:	ee 0c       	add	r14, r14
    446e:	ff 1c       	adc	r15, r15
    4470:	00 1f       	adc	r16, r16
    4472:	11 1f       	adc	r17, r17
    4474:	0a 94       	dec	r0
    4476:	d2 f7       	brpl	.-12     	; 0x446c <__floatunsisf+0xc4>
    4478:	ed 82       	std	Y+5, r14	; 0x05
    447a:	fe 82       	std	Y+6, r15	; 0x06
    447c:	0f 83       	std	Y+7, r16	; 0x07
    447e:	18 87       	std	Y+8, r17	; 0x08
    4480:	ce 1a       	sub	r12, r30
    4482:	df 0a       	sbc	r13, r31
    4484:	dc 82       	std	Y+4, r13	; 0x04
    4486:	cb 82       	std	Y+3, r12	; 0x03
    4488:	ce 01       	movw	r24, r28
    448a:	01 96       	adiw	r24, 0x01	; 1
    448c:	0e 94 a6 22 	call	0x454c	; 0x454c <__pack_f>
    4490:	28 96       	adiw	r28, 0x08	; 8
    4492:	e8 e0       	ldi	r30, 0x08	; 8
    4494:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <__epilogue_restores__+0x14>

00004498 <__clzsi2>:
    4498:	af 92       	push	r10
    449a:	bf 92       	push	r11
    449c:	cf 92       	push	r12
    449e:	df 92       	push	r13
    44a0:	ef 92       	push	r14
    44a2:	ff 92       	push	r15
    44a4:	0f 93       	push	r16
    44a6:	1f 93       	push	r17
    44a8:	7b 01       	movw	r14, r22
    44aa:	8c 01       	movw	r16, r24
    44ac:	80 e0       	ldi	r24, 0x00	; 0
    44ae:	e8 16       	cp	r14, r24
    44b0:	80 e0       	ldi	r24, 0x00	; 0
    44b2:	f8 06       	cpc	r15, r24
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	08 07       	cpc	r16, r24
    44b8:	80 e0       	ldi	r24, 0x00	; 0
    44ba:	18 07       	cpc	r17, r24
    44bc:	58 f4       	brcc	.+22     	; 0x44d4 <__clzsi2+0x3c>
    44be:	ef ef       	ldi	r30, 0xFF	; 255
    44c0:	ee 16       	cp	r14, r30
    44c2:	f1 04       	cpc	r15, r1
    44c4:	01 05       	cpc	r16, r1
    44c6:	11 05       	cpc	r17, r1
    44c8:	09 f0       	breq	.+2      	; 0x44cc <__clzsi2+0x34>
    44ca:	90 f4       	brcc	.+36     	; 0x44f0 <__clzsi2+0x58>
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	dc 01       	movw	r26, r24
    44d2:	17 c0       	rjmp	.+46     	; 0x4502 <__clzsi2+0x6a>
    44d4:	f0 e0       	ldi	r31, 0x00	; 0
    44d6:	ef 16       	cp	r14, r31
    44d8:	f0 e0       	ldi	r31, 0x00	; 0
    44da:	ff 06       	cpc	r15, r31
    44dc:	f0 e0       	ldi	r31, 0x00	; 0
    44de:	0f 07       	cpc	r16, r31
    44e0:	f1 e0       	ldi	r31, 0x01	; 1
    44e2:	1f 07       	cpc	r17, r31
    44e4:	50 f4       	brcc	.+20     	; 0x44fa <__clzsi2+0x62>
    44e6:	80 e1       	ldi	r24, 0x10	; 16
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	a0 e0       	ldi	r26, 0x00	; 0
    44ec:	b0 e0       	ldi	r27, 0x00	; 0
    44ee:	09 c0       	rjmp	.+18     	; 0x4502 <__clzsi2+0x6a>
    44f0:	88 e0       	ldi	r24, 0x08	; 8
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	a0 e0       	ldi	r26, 0x00	; 0
    44f6:	b0 e0       	ldi	r27, 0x00	; 0
    44f8:	04 c0       	rjmp	.+8      	; 0x4502 <__clzsi2+0x6a>
    44fa:	88 e1       	ldi	r24, 0x18	; 24
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	a0 e0       	ldi	r26, 0x00	; 0
    4500:	b0 e0       	ldi	r27, 0x00	; 0
    4502:	20 e2       	ldi	r18, 0x20	; 32
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	40 e0       	ldi	r20, 0x00	; 0
    4508:	50 e0       	ldi	r21, 0x00	; 0
    450a:	28 1b       	sub	r18, r24
    450c:	39 0b       	sbc	r19, r25
    450e:	4a 0b       	sbc	r20, r26
    4510:	5b 0b       	sbc	r21, r27
    4512:	57 01       	movw	r10, r14
    4514:	68 01       	movw	r12, r16
    4516:	04 c0       	rjmp	.+8      	; 0x4520 <__clzsi2+0x88>
    4518:	d6 94       	lsr	r13
    451a:	c7 94       	ror	r12
    451c:	b7 94       	ror	r11
    451e:	a7 94       	ror	r10
    4520:	8a 95       	dec	r24
    4522:	d2 f7       	brpl	.-12     	; 0x4518 <__clzsi2+0x80>
    4524:	d6 01       	movw	r26, r12
    4526:	c5 01       	movw	r24, r10
    4528:	81 58       	subi	r24, 0x81	; 129
    452a:	9f 4f       	sbci	r25, 0xFF	; 255
    452c:	fc 01       	movw	r30, r24
    452e:	80 81       	ld	r24, Z
    4530:	28 1b       	sub	r18, r24
    4532:	31 09       	sbc	r19, r1
    4534:	41 09       	sbc	r20, r1
    4536:	51 09       	sbc	r21, r1
    4538:	c9 01       	movw	r24, r18
    453a:	1f 91       	pop	r17
    453c:	0f 91       	pop	r16
    453e:	ff 90       	pop	r15
    4540:	ef 90       	pop	r14
    4542:	df 90       	pop	r13
    4544:	cf 90       	pop	r12
    4546:	bf 90       	pop	r11
    4548:	af 90       	pop	r10
    454a:	08 95       	ret

0000454c <__pack_f>:
    454c:	ef 92       	push	r14
    454e:	ff 92       	push	r15
    4550:	0f 93       	push	r16
    4552:	1f 93       	push	r17
    4554:	cf 93       	push	r28
    4556:	df 93       	push	r29
    4558:	fc 01       	movw	r30, r24
    455a:	24 81       	ldd	r18, Z+4	; 0x04
    455c:	35 81       	ldd	r19, Z+5	; 0x05
    455e:	46 81       	ldd	r20, Z+6	; 0x06
    4560:	57 81       	ldd	r21, Z+7	; 0x07
    4562:	61 81       	ldd	r22, Z+1	; 0x01
    4564:	80 81       	ld	r24, Z
    4566:	82 30       	cpi	r24, 0x02	; 2
    4568:	20 f4       	brcc	.+8      	; 0x4572 <__pack_f+0x26>
    456a:	40 61       	ori	r20, 0x10	; 16
    456c:	ef ef       	ldi	r30, 0xFF	; 255
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	a3 c0       	rjmp	.+326    	; 0x46b8 <__pack_f+0x16c>
    4572:	84 30       	cpi	r24, 0x04	; 4
    4574:	09 f4       	brne	.+2      	; 0x4578 <__pack_f+0x2c>
    4576:	9b c0       	rjmp	.+310    	; 0x46ae <__pack_f+0x162>
    4578:	82 30       	cpi	r24, 0x02	; 2
    457a:	09 f4       	brne	.+2      	; 0x457e <__pack_f+0x32>
    457c:	92 c0       	rjmp	.+292    	; 0x46a2 <__pack_f+0x156>
    457e:	21 15       	cp	r18, r1
    4580:	31 05       	cpc	r19, r1
    4582:	41 05       	cpc	r20, r1
    4584:	51 05       	cpc	r21, r1
    4586:	09 f4       	brne	.+2      	; 0x458a <__pack_f+0x3e>
    4588:	8f c0       	rjmp	.+286    	; 0x46a8 <__pack_f+0x15c>
    458a:	02 80       	ldd	r0, Z+2	; 0x02
    458c:	f3 81       	ldd	r31, Z+3	; 0x03
    458e:	e0 2d       	mov	r30, r0
    4590:	8f ef       	ldi	r24, 0xFF	; 255
    4592:	e2 38       	cpi	r30, 0x82	; 130
    4594:	f8 07       	cpc	r31, r24
    4596:	0c f0       	brlt	.+2      	; 0x459a <__pack_f+0x4e>
    4598:	5a c0       	rjmp	.+180    	; 0x464e <__pack_f+0x102>
    459a:	c2 e8       	ldi	r28, 0x82	; 130
    459c:	df ef       	ldi	r29, 0xFF	; 255
    459e:	ce 1b       	sub	r28, r30
    45a0:	df 0b       	sbc	r29, r31
    45a2:	ca 31       	cpi	r28, 0x1A	; 26
    45a4:	d1 05       	cpc	r29, r1
    45a6:	6c f5       	brge	.+90     	; 0x4602 <__pack_f+0xb6>
    45a8:	79 01       	movw	r14, r18
    45aa:	8a 01       	movw	r16, r20
    45ac:	0c 2e       	mov	r0, r28
    45ae:	04 c0       	rjmp	.+8      	; 0x45b8 <__pack_f+0x6c>
    45b0:	16 95       	lsr	r17
    45b2:	07 95       	ror	r16
    45b4:	f7 94       	ror	r15
    45b6:	e7 94       	ror	r14
    45b8:	0a 94       	dec	r0
    45ba:	d2 f7       	brpl	.-12     	; 0x45b0 <__pack_f+0x64>
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	a0 e0       	ldi	r26, 0x00	; 0
    45c2:	b0 e0       	ldi	r27, 0x00	; 0
    45c4:	0c 2e       	mov	r0, r28
    45c6:	04 c0       	rjmp	.+8      	; 0x45d0 <__pack_f+0x84>
    45c8:	88 0f       	add	r24, r24
    45ca:	99 1f       	adc	r25, r25
    45cc:	aa 1f       	adc	r26, r26
    45ce:	bb 1f       	adc	r27, r27
    45d0:	0a 94       	dec	r0
    45d2:	d2 f7       	brpl	.-12     	; 0x45c8 <__pack_f+0x7c>
    45d4:	01 97       	sbiw	r24, 0x01	; 1
    45d6:	a1 09       	sbc	r26, r1
    45d8:	b1 09       	sbc	r27, r1
    45da:	82 23       	and	r24, r18
    45dc:	93 23       	and	r25, r19
    45de:	a4 23       	and	r26, r20
    45e0:	b5 23       	and	r27, r21
    45e2:	21 e0       	ldi	r18, 0x01	; 1
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	40 e0       	ldi	r20, 0x00	; 0
    45e8:	50 e0       	ldi	r21, 0x00	; 0
    45ea:	00 97       	sbiw	r24, 0x00	; 0
    45ec:	a1 05       	cpc	r26, r1
    45ee:	b1 05       	cpc	r27, r1
    45f0:	19 f4       	brne	.+6      	; 0x45f8 <__pack_f+0xac>
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	a9 01       	movw	r20, r18
    45f8:	2e 29       	or	r18, r14
    45fa:	3f 29       	or	r19, r15
    45fc:	40 2b       	or	r20, r16
    45fe:	51 2b       	or	r21, r17
    4600:	03 c0       	rjmp	.+6      	; 0x4608 <__pack_f+0xbc>
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	a9 01       	movw	r20, r18
    4608:	da 01       	movw	r26, r20
    460a:	c9 01       	movw	r24, r18
    460c:	8f 77       	andi	r24, 0x7F	; 127
    460e:	90 70       	andi	r25, 0x00	; 0
    4610:	a0 70       	andi	r26, 0x00	; 0
    4612:	b0 70       	andi	r27, 0x00	; 0
    4614:	80 34       	cpi	r24, 0x40	; 64
    4616:	91 05       	cpc	r25, r1
    4618:	a1 05       	cpc	r26, r1
    461a:	b1 05       	cpc	r27, r1
    461c:	39 f4       	brne	.+14     	; 0x462c <__pack_f+0xe0>
    461e:	27 ff       	sbrs	r18, 7
    4620:	09 c0       	rjmp	.+18     	; 0x4634 <__pack_f+0xe8>
    4622:	20 5c       	subi	r18, 0xC0	; 192
    4624:	3f 4f       	sbci	r19, 0xFF	; 255
    4626:	4f 4f       	sbci	r20, 0xFF	; 255
    4628:	5f 4f       	sbci	r21, 0xFF	; 255
    462a:	04 c0       	rjmp	.+8      	; 0x4634 <__pack_f+0xe8>
    462c:	21 5c       	subi	r18, 0xC1	; 193
    462e:	3f 4f       	sbci	r19, 0xFF	; 255
    4630:	4f 4f       	sbci	r20, 0xFF	; 255
    4632:	5f 4f       	sbci	r21, 0xFF	; 255
    4634:	e1 e0       	ldi	r30, 0x01	; 1
    4636:	f0 e0       	ldi	r31, 0x00	; 0
    4638:	20 30       	cpi	r18, 0x00	; 0
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	38 07       	cpc	r19, r24
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	48 07       	cpc	r20, r24
    4642:	80 e4       	ldi	r24, 0x40	; 64
    4644:	58 07       	cpc	r21, r24
    4646:	28 f5       	brcc	.+74     	; 0x4692 <__pack_f+0x146>
    4648:	e0 e0       	ldi	r30, 0x00	; 0
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	22 c0       	rjmp	.+68     	; 0x4692 <__pack_f+0x146>
    464e:	e0 38       	cpi	r30, 0x80	; 128
    4650:	f1 05       	cpc	r31, r1
    4652:	6c f5       	brge	.+90     	; 0x46ae <__pack_f+0x162>
    4654:	e1 58       	subi	r30, 0x81	; 129
    4656:	ff 4f       	sbci	r31, 0xFF	; 255
    4658:	da 01       	movw	r26, r20
    465a:	c9 01       	movw	r24, r18
    465c:	8f 77       	andi	r24, 0x7F	; 127
    465e:	90 70       	andi	r25, 0x00	; 0
    4660:	a0 70       	andi	r26, 0x00	; 0
    4662:	b0 70       	andi	r27, 0x00	; 0
    4664:	80 34       	cpi	r24, 0x40	; 64
    4666:	91 05       	cpc	r25, r1
    4668:	a1 05       	cpc	r26, r1
    466a:	b1 05       	cpc	r27, r1
    466c:	39 f4       	brne	.+14     	; 0x467c <__pack_f+0x130>
    466e:	27 ff       	sbrs	r18, 7
    4670:	09 c0       	rjmp	.+18     	; 0x4684 <__pack_f+0x138>
    4672:	20 5c       	subi	r18, 0xC0	; 192
    4674:	3f 4f       	sbci	r19, 0xFF	; 255
    4676:	4f 4f       	sbci	r20, 0xFF	; 255
    4678:	5f 4f       	sbci	r21, 0xFF	; 255
    467a:	04 c0       	rjmp	.+8      	; 0x4684 <__pack_f+0x138>
    467c:	21 5c       	subi	r18, 0xC1	; 193
    467e:	3f 4f       	sbci	r19, 0xFF	; 255
    4680:	4f 4f       	sbci	r20, 0xFF	; 255
    4682:	5f 4f       	sbci	r21, 0xFF	; 255
    4684:	57 ff       	sbrs	r21, 7
    4686:	05 c0       	rjmp	.+10     	; 0x4692 <__pack_f+0x146>
    4688:	56 95       	lsr	r21
    468a:	47 95       	ror	r20
    468c:	37 95       	ror	r19
    468e:	27 95       	ror	r18
    4690:	31 96       	adiw	r30, 0x01	; 1
    4692:	87 e0       	ldi	r24, 0x07	; 7
    4694:	56 95       	lsr	r21
    4696:	47 95       	ror	r20
    4698:	37 95       	ror	r19
    469a:	27 95       	ror	r18
    469c:	8a 95       	dec	r24
    469e:	d1 f7       	brne	.-12     	; 0x4694 <__pack_f+0x148>
    46a0:	0b c0       	rjmp	.+22     	; 0x46b8 <__pack_f+0x16c>
    46a2:	e0 e0       	ldi	r30, 0x00	; 0
    46a4:	f0 e0       	ldi	r31, 0x00	; 0
    46a6:	05 c0       	rjmp	.+10     	; 0x46b2 <__pack_f+0x166>
    46a8:	e0 e0       	ldi	r30, 0x00	; 0
    46aa:	f0 e0       	ldi	r31, 0x00	; 0
    46ac:	05 c0       	rjmp	.+10     	; 0x46b8 <__pack_f+0x16c>
    46ae:	ef ef       	ldi	r30, 0xFF	; 255
    46b0:	f0 e0       	ldi	r31, 0x00	; 0
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	a9 01       	movw	r20, r18
    46b8:	8e 2f       	mov	r24, r30
    46ba:	87 95       	ror	r24
    46bc:	88 27       	eor	r24, r24
    46be:	87 95       	ror	r24
    46c0:	94 2f       	mov	r25, r20
    46c2:	9f 77       	andi	r25, 0x7F	; 127
    46c4:	67 95       	ror	r22
    46c6:	66 27       	eor	r22, r22
    46c8:	67 95       	ror	r22
    46ca:	e6 95       	lsr	r30
    46cc:	e2 2e       	mov	r14, r18
    46ce:	a9 2f       	mov	r26, r25
    46d0:	a8 2b       	or	r26, r24
    46d2:	fe 2f       	mov	r31, r30
    46d4:	f6 2b       	or	r31, r22
    46d6:	62 2f       	mov	r22, r18
    46d8:	73 2f       	mov	r23, r19
    46da:	8a 2f       	mov	r24, r26
    46dc:	9f 2f       	mov	r25, r31
    46de:	cd b7       	in	r28, 0x3d	; 61
    46e0:	de b7       	in	r29, 0x3e	; 62
    46e2:	e6 e0       	ldi	r30, 0x06	; 6
    46e4:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <__epilogue_restores__+0x18>

000046e8 <__unpack_f>:
    46e8:	dc 01       	movw	r26, r24
    46ea:	fb 01       	movw	r30, r22
    46ec:	2c 91       	ld	r18, X
    46ee:	11 96       	adiw	r26, 0x01	; 1
    46f0:	3c 91       	ld	r19, X
    46f2:	11 97       	sbiw	r26, 0x01	; 1
    46f4:	12 96       	adiw	r26, 0x02	; 2
    46f6:	8c 91       	ld	r24, X
    46f8:	12 97       	sbiw	r26, 0x02	; 2
    46fa:	48 2f       	mov	r20, r24
    46fc:	4f 77       	andi	r20, 0x7F	; 127
    46fe:	50 e0       	ldi	r21, 0x00	; 0
    4700:	98 2f       	mov	r25, r24
    4702:	99 1f       	adc	r25, r25
    4704:	99 27       	eor	r25, r25
    4706:	99 1f       	adc	r25, r25
    4708:	13 96       	adiw	r26, 0x03	; 3
    470a:	6c 91       	ld	r22, X
    470c:	13 97       	sbiw	r26, 0x03	; 3
    470e:	86 2f       	mov	r24, r22
    4710:	88 0f       	add	r24, r24
    4712:	89 2b       	or	r24, r25
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	66 1f       	adc	r22, r22
    4718:	66 27       	eor	r22, r22
    471a:	66 1f       	adc	r22, r22
    471c:	61 83       	std	Z+1, r22	; 0x01
    471e:	00 97       	sbiw	r24, 0x00	; 0
    4720:	39 f5       	brne	.+78     	; 0x4770 <__unpack_f+0x88>
    4722:	21 15       	cp	r18, r1
    4724:	31 05       	cpc	r19, r1
    4726:	41 05       	cpc	r20, r1
    4728:	51 05       	cpc	r21, r1
    472a:	11 f4       	brne	.+4      	; 0x4730 <__unpack_f+0x48>
    472c:	82 e0       	ldi	r24, 0x02	; 2
    472e:	29 c0       	rjmp	.+82     	; 0x4782 <__unpack_f+0x9a>
    4730:	82 e8       	ldi	r24, 0x82	; 130
    4732:	9f ef       	ldi	r25, 0xFF	; 255
    4734:	93 83       	std	Z+3, r25	; 0x03
    4736:	82 83       	std	Z+2, r24	; 0x02
    4738:	67 e0       	ldi	r22, 0x07	; 7
    473a:	22 0f       	add	r18, r18
    473c:	33 1f       	adc	r19, r19
    473e:	44 1f       	adc	r20, r20
    4740:	55 1f       	adc	r21, r21
    4742:	6a 95       	dec	r22
    4744:	d1 f7       	brne	.-12     	; 0x473a <__unpack_f+0x52>
    4746:	83 e0       	ldi	r24, 0x03	; 3
    4748:	80 83       	st	Z, r24
    474a:	09 c0       	rjmp	.+18     	; 0x475e <__unpack_f+0x76>
    474c:	22 0f       	add	r18, r18
    474e:	33 1f       	adc	r19, r19
    4750:	44 1f       	adc	r20, r20
    4752:	55 1f       	adc	r21, r21
    4754:	82 81       	ldd	r24, Z+2	; 0x02
    4756:	93 81       	ldd	r25, Z+3	; 0x03
    4758:	01 97       	sbiw	r24, 0x01	; 1
    475a:	93 83       	std	Z+3, r25	; 0x03
    475c:	82 83       	std	Z+2, r24	; 0x02
    475e:	20 30       	cpi	r18, 0x00	; 0
    4760:	80 e0       	ldi	r24, 0x00	; 0
    4762:	38 07       	cpc	r19, r24
    4764:	80 e0       	ldi	r24, 0x00	; 0
    4766:	48 07       	cpc	r20, r24
    4768:	80 e4       	ldi	r24, 0x40	; 64
    476a:	58 07       	cpc	r21, r24
    476c:	78 f3       	brcs	.-34     	; 0x474c <__unpack_f+0x64>
    476e:	20 c0       	rjmp	.+64     	; 0x47b0 <__unpack_f+0xc8>
    4770:	8f 3f       	cpi	r24, 0xFF	; 255
    4772:	91 05       	cpc	r25, r1
    4774:	79 f4       	brne	.+30     	; 0x4794 <__unpack_f+0xac>
    4776:	21 15       	cp	r18, r1
    4778:	31 05       	cpc	r19, r1
    477a:	41 05       	cpc	r20, r1
    477c:	51 05       	cpc	r21, r1
    477e:	19 f4       	brne	.+6      	; 0x4786 <__unpack_f+0x9e>
    4780:	84 e0       	ldi	r24, 0x04	; 4
    4782:	80 83       	st	Z, r24
    4784:	08 95       	ret
    4786:	44 ff       	sbrs	r20, 4
    4788:	03 c0       	rjmp	.+6      	; 0x4790 <__unpack_f+0xa8>
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	80 83       	st	Z, r24
    478e:	10 c0       	rjmp	.+32     	; 0x47b0 <__unpack_f+0xc8>
    4790:	10 82       	st	Z, r1
    4792:	0e c0       	rjmp	.+28     	; 0x47b0 <__unpack_f+0xc8>
    4794:	8f 57       	subi	r24, 0x7F	; 127
    4796:	90 40       	sbci	r25, 0x00	; 0
    4798:	93 83       	std	Z+3, r25	; 0x03
    479a:	82 83       	std	Z+2, r24	; 0x02
    479c:	83 e0       	ldi	r24, 0x03	; 3
    479e:	80 83       	st	Z, r24
    47a0:	87 e0       	ldi	r24, 0x07	; 7
    47a2:	22 0f       	add	r18, r18
    47a4:	33 1f       	adc	r19, r19
    47a6:	44 1f       	adc	r20, r20
    47a8:	55 1f       	adc	r21, r21
    47aa:	8a 95       	dec	r24
    47ac:	d1 f7       	brne	.-12     	; 0x47a2 <__unpack_f+0xba>
    47ae:	50 64       	ori	r21, 0x40	; 64
    47b0:	24 83       	std	Z+4, r18	; 0x04
    47b2:	35 83       	std	Z+5, r19	; 0x05
    47b4:	46 83       	std	Z+6, r20	; 0x06
    47b6:	57 83       	std	Z+7, r21	; 0x07
    47b8:	08 95       	ret

000047ba <__fpcmp_parts_f>:
    47ba:	fc 01       	movw	r30, r24
    47bc:	db 01       	movw	r26, r22
    47be:	90 81       	ld	r25, Z
    47c0:	92 30       	cpi	r25, 0x02	; 2
    47c2:	08 f4       	brcc	.+2      	; 0x47c6 <__fpcmp_parts_f+0xc>
    47c4:	49 c0       	rjmp	.+146    	; 0x4858 <__fpcmp_parts_f+0x9e>
    47c6:	8c 91       	ld	r24, X
    47c8:	82 30       	cpi	r24, 0x02	; 2
    47ca:	08 f4       	brcc	.+2      	; 0x47ce <__fpcmp_parts_f+0x14>
    47cc:	45 c0       	rjmp	.+138    	; 0x4858 <__fpcmp_parts_f+0x9e>
    47ce:	94 30       	cpi	r25, 0x04	; 4
    47d0:	51 f4       	brne	.+20     	; 0x47e6 <__fpcmp_parts_f+0x2c>
    47d2:	61 81       	ldd	r22, Z+1	; 0x01
    47d4:	84 30       	cpi	r24, 0x04	; 4
    47d6:	b1 f5       	brne	.+108    	; 0x4844 <__fpcmp_parts_f+0x8a>
    47d8:	11 96       	adiw	r26, 0x01	; 1
    47da:	2c 91       	ld	r18, X
    47dc:	11 97       	sbiw	r26, 0x01	; 1
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	26 1b       	sub	r18, r22
    47e2:	31 09       	sbc	r19, r1
    47e4:	41 c0       	rjmp	.+130    	; 0x4868 <__fpcmp_parts_f+0xae>
    47e6:	84 30       	cpi	r24, 0x04	; 4
    47e8:	21 f0       	breq	.+8      	; 0x47f2 <__fpcmp_parts_f+0x38>
    47ea:	92 30       	cpi	r25, 0x02	; 2
    47ec:	41 f4       	brne	.+16     	; 0x47fe <__fpcmp_parts_f+0x44>
    47ee:	82 30       	cpi	r24, 0x02	; 2
    47f0:	b1 f1       	breq	.+108    	; 0x485e <__fpcmp_parts_f+0xa4>
    47f2:	11 96       	adiw	r26, 0x01	; 1
    47f4:	8c 91       	ld	r24, X
    47f6:	11 97       	sbiw	r26, 0x01	; 1
    47f8:	88 23       	and	r24, r24
    47fa:	a1 f1       	breq	.+104    	; 0x4864 <__fpcmp_parts_f+0xaa>
    47fc:	2d c0       	rjmp	.+90     	; 0x4858 <__fpcmp_parts_f+0x9e>
    47fe:	61 81       	ldd	r22, Z+1	; 0x01
    4800:	82 30       	cpi	r24, 0x02	; 2
    4802:	01 f1       	breq	.+64     	; 0x4844 <__fpcmp_parts_f+0x8a>
    4804:	11 96       	adiw	r26, 0x01	; 1
    4806:	8c 91       	ld	r24, X
    4808:	11 97       	sbiw	r26, 0x01	; 1
    480a:	68 17       	cp	r22, r24
    480c:	d9 f4       	brne	.+54     	; 0x4844 <__fpcmp_parts_f+0x8a>
    480e:	22 81       	ldd	r18, Z+2	; 0x02
    4810:	33 81       	ldd	r19, Z+3	; 0x03
    4812:	12 96       	adiw	r26, 0x02	; 2
    4814:	8d 91       	ld	r24, X+
    4816:	9c 91       	ld	r25, X
    4818:	13 97       	sbiw	r26, 0x03	; 3
    481a:	82 17       	cp	r24, r18
    481c:	93 07       	cpc	r25, r19
    481e:	94 f0       	brlt	.+36     	; 0x4844 <__fpcmp_parts_f+0x8a>
    4820:	28 17       	cp	r18, r24
    4822:	39 07       	cpc	r19, r25
    4824:	bc f0       	brlt	.+46     	; 0x4854 <__fpcmp_parts_f+0x9a>
    4826:	24 81       	ldd	r18, Z+4	; 0x04
    4828:	35 81       	ldd	r19, Z+5	; 0x05
    482a:	46 81       	ldd	r20, Z+6	; 0x06
    482c:	57 81       	ldd	r21, Z+7	; 0x07
    482e:	14 96       	adiw	r26, 0x04	; 4
    4830:	8d 91       	ld	r24, X+
    4832:	9d 91       	ld	r25, X+
    4834:	0d 90       	ld	r0, X+
    4836:	bc 91       	ld	r27, X
    4838:	a0 2d       	mov	r26, r0
    483a:	82 17       	cp	r24, r18
    483c:	93 07       	cpc	r25, r19
    483e:	a4 07       	cpc	r26, r20
    4840:	b5 07       	cpc	r27, r21
    4842:	18 f4       	brcc	.+6      	; 0x484a <__fpcmp_parts_f+0x90>
    4844:	66 23       	and	r22, r22
    4846:	41 f0       	breq	.+16     	; 0x4858 <__fpcmp_parts_f+0x9e>
    4848:	0d c0       	rjmp	.+26     	; 0x4864 <__fpcmp_parts_f+0xaa>
    484a:	28 17       	cp	r18, r24
    484c:	39 07       	cpc	r19, r25
    484e:	4a 07       	cpc	r20, r26
    4850:	5b 07       	cpc	r21, r27
    4852:	28 f4       	brcc	.+10     	; 0x485e <__fpcmp_parts_f+0xa4>
    4854:	66 23       	and	r22, r22
    4856:	31 f0       	breq	.+12     	; 0x4864 <__fpcmp_parts_f+0xaa>
    4858:	21 e0       	ldi	r18, 0x01	; 1
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	05 c0       	rjmp	.+10     	; 0x4868 <__fpcmp_parts_f+0xae>
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	30 e0       	ldi	r19, 0x00	; 0
    4862:	02 c0       	rjmp	.+4      	; 0x4868 <__fpcmp_parts_f+0xae>
    4864:	2f ef       	ldi	r18, 0xFF	; 255
    4866:	3f ef       	ldi	r19, 0xFF	; 255
    4868:	c9 01       	movw	r24, r18
    486a:	08 95       	ret

0000486c <__udivmodqi4>:
    486c:	99 1b       	sub	r25, r25
    486e:	79 e0       	ldi	r23, 0x09	; 9
    4870:	04 c0       	rjmp	.+8      	; 0x487a <__udivmodqi4_ep>

00004872 <__udivmodqi4_loop>:
    4872:	99 1f       	adc	r25, r25
    4874:	96 17       	cp	r25, r22
    4876:	08 f0       	brcs	.+2      	; 0x487a <__udivmodqi4_ep>
    4878:	96 1b       	sub	r25, r22

0000487a <__udivmodqi4_ep>:
    487a:	88 1f       	adc	r24, r24
    487c:	7a 95       	dec	r23
    487e:	c9 f7       	brne	.-14     	; 0x4872 <__udivmodqi4_loop>
    4880:	80 95       	com	r24
    4882:	08 95       	ret

00004884 <__udivmodhi4>:
    4884:	aa 1b       	sub	r26, r26
    4886:	bb 1b       	sub	r27, r27
    4888:	51 e1       	ldi	r21, 0x11	; 17
    488a:	07 c0       	rjmp	.+14     	; 0x489a <__udivmodhi4_ep>

0000488c <__udivmodhi4_loop>:
    488c:	aa 1f       	adc	r26, r26
    488e:	bb 1f       	adc	r27, r27
    4890:	a6 17       	cp	r26, r22
    4892:	b7 07       	cpc	r27, r23
    4894:	10 f0       	brcs	.+4      	; 0x489a <__udivmodhi4_ep>
    4896:	a6 1b       	sub	r26, r22
    4898:	b7 0b       	sbc	r27, r23

0000489a <__udivmodhi4_ep>:
    489a:	88 1f       	adc	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	5a 95       	dec	r21
    48a0:	a9 f7       	brne	.-22     	; 0x488c <__udivmodhi4_loop>
    48a2:	80 95       	com	r24
    48a4:	90 95       	com	r25
    48a6:	bc 01       	movw	r22, r24
    48a8:	cd 01       	movw	r24, r26
    48aa:	08 95       	ret

000048ac <__divmodhi4>:
    48ac:	97 fb       	bst	r25, 7
    48ae:	09 2e       	mov	r0, r25
    48b0:	07 26       	eor	r0, r23
    48b2:	0a d0       	rcall	.+20     	; 0x48c8 <__divmodhi4_neg1>
    48b4:	77 fd       	sbrc	r23, 7
    48b6:	04 d0       	rcall	.+8      	; 0x48c0 <__divmodhi4_neg2>
    48b8:	e5 df       	rcall	.-54     	; 0x4884 <__udivmodhi4>
    48ba:	06 d0       	rcall	.+12     	; 0x48c8 <__divmodhi4_neg1>
    48bc:	00 20       	and	r0, r0
    48be:	1a f4       	brpl	.+6      	; 0x48c6 <__divmodhi4_exit>

000048c0 <__divmodhi4_neg2>:
    48c0:	70 95       	com	r23
    48c2:	61 95       	neg	r22
    48c4:	7f 4f       	sbci	r23, 0xFF	; 255

000048c6 <__divmodhi4_exit>:
    48c6:	08 95       	ret

000048c8 <__divmodhi4_neg1>:
    48c8:	f6 f7       	brtc	.-4      	; 0x48c6 <__divmodhi4_exit>
    48ca:	90 95       	com	r25
    48cc:	81 95       	neg	r24
    48ce:	9f 4f       	sbci	r25, 0xFF	; 255
    48d0:	08 95       	ret

000048d2 <__udivmodsi4>:
    48d2:	a1 e2       	ldi	r26, 0x21	; 33
    48d4:	1a 2e       	mov	r1, r26
    48d6:	aa 1b       	sub	r26, r26
    48d8:	bb 1b       	sub	r27, r27
    48da:	fd 01       	movw	r30, r26
    48dc:	0d c0       	rjmp	.+26     	; 0x48f8 <__udivmodsi4_ep>

000048de <__udivmodsi4_loop>:
    48de:	aa 1f       	adc	r26, r26
    48e0:	bb 1f       	adc	r27, r27
    48e2:	ee 1f       	adc	r30, r30
    48e4:	ff 1f       	adc	r31, r31
    48e6:	a2 17       	cp	r26, r18
    48e8:	b3 07       	cpc	r27, r19
    48ea:	e4 07       	cpc	r30, r20
    48ec:	f5 07       	cpc	r31, r21
    48ee:	20 f0       	brcs	.+8      	; 0x48f8 <__udivmodsi4_ep>
    48f0:	a2 1b       	sub	r26, r18
    48f2:	b3 0b       	sbc	r27, r19
    48f4:	e4 0b       	sbc	r30, r20
    48f6:	f5 0b       	sbc	r31, r21

000048f8 <__udivmodsi4_ep>:
    48f8:	66 1f       	adc	r22, r22
    48fa:	77 1f       	adc	r23, r23
    48fc:	88 1f       	adc	r24, r24
    48fe:	99 1f       	adc	r25, r25
    4900:	1a 94       	dec	r1
    4902:	69 f7       	brne	.-38     	; 0x48de <__udivmodsi4_loop>
    4904:	60 95       	com	r22
    4906:	70 95       	com	r23
    4908:	80 95       	com	r24
    490a:	90 95       	com	r25
    490c:	9b 01       	movw	r18, r22
    490e:	ac 01       	movw	r20, r24
    4910:	bd 01       	movw	r22, r26
    4912:	cf 01       	movw	r24, r30
    4914:	08 95       	ret

00004916 <__prologue_saves__>:
    4916:	2f 92       	push	r2
    4918:	3f 92       	push	r3
    491a:	4f 92       	push	r4
    491c:	5f 92       	push	r5
    491e:	6f 92       	push	r6
    4920:	7f 92       	push	r7
    4922:	8f 92       	push	r8
    4924:	9f 92       	push	r9
    4926:	af 92       	push	r10
    4928:	bf 92       	push	r11
    492a:	cf 92       	push	r12
    492c:	df 92       	push	r13
    492e:	ef 92       	push	r14
    4930:	ff 92       	push	r15
    4932:	0f 93       	push	r16
    4934:	1f 93       	push	r17
    4936:	cf 93       	push	r28
    4938:	df 93       	push	r29
    493a:	cd b7       	in	r28, 0x3d	; 61
    493c:	de b7       	in	r29, 0x3e	; 62
    493e:	ca 1b       	sub	r28, r26
    4940:	db 0b       	sbc	r29, r27
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	f8 94       	cli
    4946:	de bf       	out	0x3e, r29	; 62
    4948:	0f be       	out	0x3f, r0	; 63
    494a:	cd bf       	out	0x3d, r28	; 61
    494c:	09 94       	ijmp

0000494e <__epilogue_restores__>:
    494e:	2a 88       	ldd	r2, Y+18	; 0x12
    4950:	39 88       	ldd	r3, Y+17	; 0x11
    4952:	48 88       	ldd	r4, Y+16	; 0x10
    4954:	5f 84       	ldd	r5, Y+15	; 0x0f
    4956:	6e 84       	ldd	r6, Y+14	; 0x0e
    4958:	7d 84       	ldd	r7, Y+13	; 0x0d
    495a:	8c 84       	ldd	r8, Y+12	; 0x0c
    495c:	9b 84       	ldd	r9, Y+11	; 0x0b
    495e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4960:	b9 84       	ldd	r11, Y+9	; 0x09
    4962:	c8 84       	ldd	r12, Y+8	; 0x08
    4964:	df 80       	ldd	r13, Y+7	; 0x07
    4966:	ee 80       	ldd	r14, Y+6	; 0x06
    4968:	fd 80       	ldd	r15, Y+5	; 0x05
    496a:	0c 81       	ldd	r16, Y+4	; 0x04
    496c:	1b 81       	ldd	r17, Y+3	; 0x03
    496e:	aa 81       	ldd	r26, Y+2	; 0x02
    4970:	b9 81       	ldd	r27, Y+1	; 0x01
    4972:	ce 0f       	add	r28, r30
    4974:	d1 1d       	adc	r29, r1
    4976:	0f b6       	in	r0, 0x3f	; 63
    4978:	f8 94       	cli
    497a:	de bf       	out	0x3e, r29	; 62
    497c:	0f be       	out	0x3f, r0	; 63
    497e:	cd bf       	out	0x3d, r28	; 61
    4980:	ed 01       	movw	r28, r26
    4982:	08 95       	ret

00004984 <_exit>:
    4984:	f8 94       	cli

00004986 <__stop_program>:
    4986:	ff cf       	rjmp	.-2      	; 0x4986 <__stop_program>
